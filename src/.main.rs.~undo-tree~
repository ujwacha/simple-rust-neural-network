(undo-tree-save-format-version . 1)
"8d82c507f1a9909c6145dc6a3429f24057204b1c"
[nil nil nil nil (25661 3328 366639 818000) 0 nil]
([nil nil ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 69) (47 . 70)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 47) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -2) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) (undo-tree-id853 . -2) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) (undo-tree-id859 . -2) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) (undo-tree-id871 . -2) (undo-tree-id872 . -2) (undo-tree-id873 . -2) (undo-tree-id874 . -2) (undo-tree-id875 . -2) (undo-tree-id876 . -2) (undo-tree-id877 . -2) (undo-tree-id878 . -2) (undo-tree-id879 . -2) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (undo-tree-id885 . -2) (undo-tree-id886 . -2) (undo-tree-id887 . -2) (undo-tree-id888 . -2) (#("// this is the thing " 0 3 (fontified nil face font-lock-comment-delimiter-face) 3 20 (fontified nil face font-lock-comment-face) 20 21 (fontified nil face font-lock-comment-face)) . 49) (undo-tree-id889 . -20) (undo-tree-id890 . -19) (undo-tree-id891 . -19) (undo-tree-id892 . -19) (undo-tree-id893 . -19) (undo-tree-id894 . -19) (undo-tree-id895 . -19) (undo-tree-id896 . -19) (undo-tree-id897 . -19) (undo-tree-id898 . -19) (undo-tree-id899 . -19) (undo-tree-id900 . -19) (undo-tree-id901 . -19) (undo-tree-id902 . -19) (undo-tree-id903 . -19) (undo-tree-id904 . -19) (undo-tree-id905 . -19) (undo-tree-id906 . -19) (undo-tree-id907 . -19) (undo-tree-id908 . -19) (undo-tree-id909 . -19) (undo-tree-id910 . -19) (undo-tree-id911 . -19) (undo-tree-id912 . -19) (undo-tree-id913 . -19) (undo-tree-id914 . -19) (undo-tree-id915 . -19) (undo-tree-id916 . -19) (undo-tree-id917 . -19) (undo-tree-id918 . -19) (undo-tree-id919 . -19) (undo-tree-id920 . -19) (undo-tree-id921 . -19) (undo-tree-id922 . -19) (undo-tree-id923 . -19) (undo-tree-id924 . -19) (undo-tree-id925 . -19) (undo-tree-id926 . -19) (undo-tree-id927 . -19) (undo-tree-id928 . -19) (undo-tree-id929 . -19) (undo-tree-id930 . -19) (undo-tree-id931 . -19) (undo-tree-id932 . -19) (undo-tree-id933 . -19) (undo-tree-id934 . -19) (undo-tree-id935 . -19) (undo-tree-id936 . -19) (undo-tree-id937 . -19) (undo-tree-id938 . -19) (undo-tree-id939 . -19) (undo-tree-id940 . -19) (undo-tree-id941 . -19) (undo-tree-id942 . -19) (undo-tree-id943 . -19) (undo-tree-id944 . -19) (undo-tree-id945 . -19) (undo-tree-id946 . -19) (undo-tree-id947 . -19) (undo-tree-id948 . -19) (undo-tree-id949 . -19) (undo-tree-id950 . -19) (undo-tree-id951 . -19) (undo-tree-id952 . -19) (undo-tree-id953 . -19) (undo-tree-id954 . -19) (undo-tree-id955 . -19) (undo-tree-id956 . -19) (undo-tree-id957 . -19) (undo-tree-id958 . -19) (undo-tree-id959 . -19) (undo-tree-id960 . -19) (undo-tree-id961 . -19) (undo-tree-id962 . -19) (undo-tree-id963 . -19) (undo-tree-id964 . -19) (undo-tree-id965 . -19) (undo-tree-id966 . -19) (undo-tree-id967 . -19) (undo-tree-id968 . -19) (undo-tree-id969 . -19) (undo-tree-id970 . -19) (undo-tree-id971 . -19) (undo-tree-id972 . -19) (undo-tree-id973 . -19) (undo-tree-id974 . -19) (undo-tree-id975 . -19) (undo-tree-id976 . -19) (undo-tree-id977 . -19) (undo-tree-id978 . -19) (undo-tree-id979 . -19) (undo-tree-id980 . -19) (undo-tree-id981 . -19) (undo-tree-id982 . -19) (undo-tree-id983 . -19) (undo-tree-id984 . -19) (undo-tree-id985 . -19) (undo-tree-id986 . -19) (undo-tree-id987 . -19) (undo-tree-id988 . -19) (undo-tree-id989 . -19) (undo-tree-id990 . -19) (undo-tree-id991 . -19) (undo-tree-id992 . -19) (undo-tree-id993 . -19) (undo-tree-id994 . -19) (undo-tree-id995 . -19) (undo-tree-id996 . -19) (undo-tree-id997 . -19) (undo-tree-id998 . -19) (undo-tree-id999 . -19) (undo-tree-id1000 . -19) (undo-tree-id1001 . -19) (undo-tree-id1002 . -19) (undo-tree-id1003 . -19) (undo-tree-id1004 . -19) (undo-tree-id1005 . -19) (undo-tree-id1006 . -19) (undo-tree-id1007 . -19) (undo-tree-id1008 . -19) (undo-tree-id1009 . -19) (undo-tree-id1010 . -19) (undo-tree-id1011 . -19) (undo-tree-id1012 . -19) (undo-tree-id1013 . -19) (undo-tree-id1014 . -19) (undo-tree-id1015 . -19) (undo-tree-id1016 . -19) (undo-tree-id1017 . -19) (undo-tree-id1018 . -19) (undo-tree-id1019 . -19) (undo-tree-id1020 . -19) (undo-tree-id1021 . -19) (undo-tree-id1022 . -19) (undo-tree-id1023 . -19) (undo-tree-id1024 . -19) (undo-tree-id1025 . -19) (undo-tree-id1026 . -19) (undo-tree-id1027 . -19) (undo-tree-id1028 . -19) (undo-tree-id1029 . -19) (undo-tree-id1030 . -19) (undo-tree-id1031 . -19) (undo-tree-id1032 . -19) (undo-tree-id1033 . -19) (undo-tree-id1034 . -19) (undo-tree-id1035 . -19) (69 . 70)) (25661 3331 729519 574000) 0 nil])
([nil nil ((#("// this is the thing
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 20 (fontified t face font-lock-comment-face) 20 21 (fontified t face font-lock-comment-face)) . 49) (undo-tree-id1036 . -20) (undo-tree-id1037 . -19) (undo-tree-id1038 . -19) (undo-tree-id1039 . -19) (undo-tree-id1040 . -19) (undo-tree-id1041 . -19) (undo-tree-id1042 . -19) (undo-tree-id1043 . -19) (undo-tree-id1044 . -19) (undo-tree-id1045 . -19) (undo-tree-id1046 . -19) (undo-tree-id1047 . -19) (undo-tree-id1048 . -19) (undo-tree-id1049 . -19) (undo-tree-id1050 . -19) (undo-tree-id1051 . -19) (undo-tree-id1052 . -19) (undo-tree-id1053 . -19) (undo-tree-id1054 . -19) (undo-tree-id1055 . -19) (undo-tree-id1056 . -19) (undo-tree-id1057 . -19) (undo-tree-id1058 . -19) (undo-tree-id1059 . -19) (undo-tree-id1060 . -19) (undo-tree-id1061 . -19) (undo-tree-id1062 . -19) (undo-tree-id1063 . -19) (undo-tree-id1064 . -19) (undo-tree-id1065 . -19) (undo-tree-id1066 . -19) (undo-tree-id1067 . -19) (undo-tree-id1068 . -19) (undo-tree-id1069 . -19) (undo-tree-id1070 . -19) (undo-tree-id1071 . -19) (undo-tree-id1072 . -19) (undo-tree-id1073 . -19) (undo-tree-id1074 . -19) (undo-tree-id1075 . -19) (undo-tree-id1076 . -19) (undo-tree-id1077 . -19) (undo-tree-id1078 . -19) (undo-tree-id1079 . -19) (undo-tree-id1080 . -19) (undo-tree-id1081 . -19) (undo-tree-id1082 . -19) (undo-tree-id1083 . -19) (undo-tree-id1084 . -19) (undo-tree-id1085 . -19) (undo-tree-id1086 . -19) (undo-tree-id1087 . -19) (undo-tree-id1088 . -19) (undo-tree-id1089 . -19) (undo-tree-id1090 . -19) (undo-tree-id1091 . -19) (undo-tree-id1092 . -19) (undo-tree-id1093 . -19) (undo-tree-id1094 . -19) (undo-tree-id1095 . -19) (undo-tree-id1096 . -19) (undo-tree-id1097 . -19) (undo-tree-id1098 . -19) (undo-tree-id1099 . -19) (undo-tree-id1100 . -19) (undo-tree-id1101 . -19) (undo-tree-id1102 . -19) (undo-tree-id1103 . -19) (undo-tree-id1104 . -19) (undo-tree-id1105 . -19) (undo-tree-id1106 . -19) (undo-tree-id1107 . -19) (undo-tree-id1108 . -19) (undo-tree-id1109 . -19) (undo-tree-id1110 . -19) (undo-tree-id1111 . -19) (undo-tree-id1112 . -19) (undo-tree-id1113 . -19) (undo-tree-id1114 . -19) (undo-tree-id1115 . -19) (undo-tree-id1116 . -19) (undo-tree-id1117 . -19) (undo-tree-id1118 . -19) (undo-tree-id1119 . -19) (undo-tree-id1120 . -19) (undo-tree-id1121 . -19) (undo-tree-id1122 . -19) (undo-tree-id1123 . -19) (undo-tree-id1124 . -19) (undo-tree-id1125 . -19) (undo-tree-id1126 . -19) (undo-tree-id1127 . -19) (undo-tree-id1128 . -19) (undo-tree-id1129 . -19) (undo-tree-id1130 . -19) (undo-tree-id1131 . -19) (undo-tree-id1132 . -19) (undo-tree-id1133 . -19) (undo-tree-id1134 . -19) (undo-tree-id1135 . -19) (undo-tree-id1136 . -19) (undo-tree-id1137 . -19) (undo-tree-id1138 . -19) (undo-tree-id1139 . -19) (undo-tree-id1140 . -19) (undo-tree-id1141 . -19) (undo-tree-id1142 . -19) (undo-tree-id1143 . -19) (undo-tree-id1144 . -19) (undo-tree-id1145 . -19) (undo-tree-id1146 . -19) (undo-tree-id1147 . -19) (undo-tree-id1148 . -19) (undo-tree-id1149 . -19) (undo-tree-id1150 . -19) (undo-tree-id1151 . -19) (undo-tree-id1152 . -19) (undo-tree-id1153 . -19) (undo-tree-id1154 . -19) (undo-tree-id1155 . -19) (undo-tree-id1156 . -19) (undo-tree-id1157 . -19) (undo-tree-id1158 . -19) (undo-tree-id1159 . -19) (undo-tree-id1160 . -19) (undo-tree-id1161 . -19) (undo-tree-id1162 . -19) (undo-tree-id1163 . -19) (undo-tree-id1164 . -19) (undo-tree-id1165 . -19) (undo-tree-id1166 . -19) (undo-tree-id1167 . -19) (undo-tree-id1168 . -19) (undo-tree-id1169 . -19) (undo-tree-id1170 . -19) (undo-tree-id1171 . -19) (undo-tree-id1172 . -19) (undo-tree-id1173 . -19) (undo-tree-id1174 . -19) (undo-tree-id1175 . -19) (undo-tree-id1176 . -19) (undo-tree-id1177 . -19) (undo-tree-id1178 . -19) (undo-tree-id1179 . -19) (undo-tree-id1180 . -19) (undo-tree-id1181 . -19) (undo-tree-id1182 . -20) (undo-tree-id1183 . -19) (undo-tree-id1184 . -19) (undo-tree-id1185 . -19) (undo-tree-id1186 . -19) (undo-tree-id1187 . -19) (undo-tree-id1188 . -19) (undo-tree-id1189 . -19) (undo-tree-id1190 . -19) (undo-tree-id1191 . -19) (undo-tree-id1192 . -19) (undo-tree-id1193 . -19) (undo-tree-id1194 . -19) (undo-tree-id1195 . -19) (undo-tree-id1196 . -19) (undo-tree-id1197 . -19) (undo-tree-id1198 . -19) (undo-tree-id1199 . -19) (undo-tree-id1200 . -19) (undo-tree-id1201 . -19) (undo-tree-id1202 . -19) (undo-tree-id1203 . -19) (undo-tree-id1204 . -19) (undo-tree-id1205 . -19) (undo-tree-id1206 . -19) (undo-tree-id1207 . -19) (undo-tree-id1208 . -19) (undo-tree-id1209 . -19) (undo-tree-id1210 . -19) (undo-tree-id1211 . -19) (undo-tree-id1212 . -19) (undo-tree-id1213 . -19) (undo-tree-id1214 . -19) (undo-tree-id1215 . -19) (undo-tree-id1216 . -19) (undo-tree-id1217 . -19) (undo-tree-id1218 . -19) (undo-tree-id1219 . -19) (undo-tree-id1220 . -19) (undo-tree-id1221 . -19) (undo-tree-id1222 . -19) (undo-tree-id1223 . -19) (undo-tree-id1224 . -19) (undo-tree-id1225 . -19) (undo-tree-id1226 . -19) (undo-tree-id1227 . -19) (undo-tree-id1228 . -19) (undo-tree-id1229 . -19) (undo-tree-id1230 . -19) (undo-tree-id1231 . -19) (undo-tree-id1232 . -19) (undo-tree-id1233 . -19) (undo-tree-id1234 . -19) (undo-tree-id1235 . -19) (undo-tree-id1236 . -19) (undo-tree-id1237 . -19)) ((49 . 70)) (25661 3332 127379 295000) 0 nil])
([nil nil ((69 . 71) (#("k" 0 1 (fontified nil face font-lock-string-face)) . 69) (60 . 70) (59 . 61) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 59) (59 . 60) (50 . 60) (#("println!($0)" 0 12 (fontified nil)) . 50) (50 . 62) (#("pr" 0 2 (fontified nil)) . 50) (50 . 52) (#("println!(…)" 0 11 (fontified nil)) . 50) (50 . 61) (#("pr" 0 2 (fontified nil)) . 50) (45 . 52)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 45) (undo-tree-id729 . -5) (undo-tree-id730 . -5) (#("pr" 0 2 (fontified nil)) . 50) (50 . 52) (#("println!(…)" 0 11 (fontified nil)) . 50) (50 . 61) (#("pr" 0 2 (fontified nil)) . 50) (50 . 52) (#("println!($0)" 0 12 (fontified nil)) . 50) (50 . 62) (#("println!()" 0 8 (fontified nil face rust-builtin-formatting-macro) 8 9 (fontified nil face (rainbow-delimiters-depth-2-face)) 9 10 (fontified nil face (rainbow-delimiters-depth-2-face))) . 50) (undo-tree-id731 . 1) (undo-tree-id732 . 1) (undo-tree-id733 . -9) (undo-tree-id734 . -9) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 59) (59 . 60) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 59) (undo-tree-id735 . 1) (undo-tree-id736 . 1) (undo-tree-id737 . -1) (#("hello work" 0 9 (fontified nil face font-lock-string-face) 9 10 (fontified nil face font-lock-string-face)) . 60) (undo-tree-id738 . -9) (69 . 70) (#("ld" 0 2 (fontified t face font-lock-string-face)) . 69) (undo-tree-id739 . -1)) (25661 3332 418124 243000) 0 nil])
([nil nil ((73 . 74)) nil (25661 3335 993396 907000) 0 nil] [nil nil ((1 . 73) (#("

fn main() {
    println!(\"Hello, world!\");
    println!(\"hello world\")
}
" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 9 (fontified t face font-lock-function-name-face) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 14 (fontified t) 14 18 (fontified t) 18 26 (fontified t face rust-builtin-formatting-macro) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 42 (fontified t face font-lock-string-face) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 45 (fontified t) 45 49 (fontified t) 49 57 (fontified t face rust-builtin-formatting-macro) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 71 (fontified t face font-lock-string-face) 71 72 (fontified t face (rainbow-delimiters-depth-2-face)) 72 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-1-face)) 74 75 (fontified t)) . 1) (undo-tree-id0 . 5) (undo-tree-id1 . 5) (undo-tree-id3 . -69) (undo-tree-id5 . -69) (undo-tree-id7 . -69) (undo-tree-id9 . -69) (undo-tree-id11 . -69) (undo-tree-id13 . -69) (undo-tree-id15 . -69) (undo-tree-id17 . -69) (undo-tree-id19 . -69) (undo-tree-id21 . -69) (undo-tree-id23 . -69) (undo-tree-id25 . -69) (undo-tree-id27 . -69) (undo-tree-id29 . -69) (undo-tree-id31 . -69) (undo-tree-id33 . -69) (undo-tree-id35 . -69) (undo-tree-id37 . -69) (undo-tree-id39 . -69) (undo-tree-id41 . -69) (undo-tree-id43 . -69) (undo-tree-id45 . -69) (undo-tree-id47 . -69) (undo-tree-id49 . -69) (undo-tree-id51 . -69) (undo-tree-id53 . -69) (undo-tree-id55 . -69) (undo-tree-id57 . -69) (undo-tree-id59 . -69) (undo-tree-id61 . -69) (undo-tree-id63 . -69) (undo-tree-id65 . -69) (undo-tree-id67 . -69) (undo-tree-id69 . -69) (undo-tree-id71 . -69) (undo-tree-id73 . -69) (undo-tree-id74 . -69) (undo-tree-id75 . -69) (undo-tree-id77 . -69) (undo-tree-id79 . -69) (undo-tree-id81 . -69) (undo-tree-id83 . -69) (undo-tree-id85 . -69) (undo-tree-id87 . -69) (undo-tree-id89 . -69) (undo-tree-id91 . -69) (undo-tree-id93 . -69) (undo-tree-id95 . -69) (undo-tree-id97 . -69) (undo-tree-id99 . -69) (undo-tree-id101 . -69) (undo-tree-id103 . -69) (undo-tree-id105 . -69) (undo-tree-id107 . -69) (undo-tree-id109 . -69) (undo-tree-id111 . -69) (undo-tree-id113 . -69) (undo-tree-id115 . -69) (undo-tree-id117 . -69) (undo-tree-id119 . -69) (undo-tree-id121 . -69) (undo-tree-id123 . -69) (undo-tree-id125 . -69) (undo-tree-id127 . -69) (undo-tree-id129 . -69) (undo-tree-id131 . -69) (undo-tree-id133 . -69)) ((1 . 76) (#("fn main() {
    println!(\"Hello, world!\");
    println!(\"hello world\")
}" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-function-name-face) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 16 (fontified t) 16 24 (fontified t face rust-builtin-formatting-macro) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 40 (fontified t face font-lock-string-face) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 43 (fontified t) 43 47 (fontified t) 47 55 (fontified t face rust-builtin-formatting-macro) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 69 (fontified t face font-lock-string-face) 69 70 (fontified t face (rainbow-delimiters-depth-2-face)) 70 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-1-face))) . 1) (undo-tree-id140 . 2) (undo-tree-id141 . -70) (undo-tree-id142 . -69) (undo-tree-id143 . -70) (undo-tree-id144 . -70) (undo-tree-id145 . -70) (undo-tree-id146 . -70) (undo-tree-id147 . -70) (undo-tree-id148 . -70) (undo-tree-id149 . -70) (undo-tree-id150 . -70) (undo-tree-id151 . -70) (undo-tree-id152 . -70) (undo-tree-id153 . -70) (undo-tree-id154 . -70) (undo-tree-id155 . -70) (undo-tree-id156 . -70) (undo-tree-id157 . -70) (undo-tree-id158 . -70) (undo-tree-id159 . -70) (undo-tree-id160 . -70) (undo-tree-id161 . -70) (undo-tree-id162 . -70) (undo-tree-id163 . -70) (undo-tree-id164 . -70) (undo-tree-id165 . -70) (undo-tree-id166 . -70) (undo-tree-id167 . -70) (undo-tree-id168 . -70) (undo-tree-id169 . -70) (undo-tree-id170 . -70) (undo-tree-id171 . -70) (undo-tree-id172 . -70) (undo-tree-id173 . -70) (undo-tree-id174 . -70) (undo-tree-id175 . -70) (undo-tree-id176 . -70) (undo-tree-id177 . -70) (undo-tree-id178 . -70) (undo-tree-id179 . -70) (undo-tree-id180 . -70) (undo-tree-id181 . -70) (undo-tree-id182 . -70) (undo-tree-id183 . -70) (undo-tree-id184 . -70) (undo-tree-id185 . -70) (undo-tree-id186 . -70) (undo-tree-id187 . -70) (undo-tree-id188 . -70) (undo-tree-id189 . -70) (undo-tree-id190 . -70) (undo-tree-id191 . -70) (undo-tree-id192 . -70) (undo-tree-id193 . -70) (undo-tree-id194 . -70) (undo-tree-id195 . -70) (undo-tree-id196 . -70) (undo-tree-id197 . -70) (undo-tree-id198 . -70) (undo-tree-id199 . -70) (undo-tree-id200 . -70) (undo-tree-id201 . -70) (undo-tree-id202 . -70) (undo-tree-id203 . -70) (undo-tree-id204 . -70) (undo-tree-id205 . -70) (undo-tree-id206 . -70) (undo-tree-id207 . -70) (undo-tree-id208 . -70) (undo-tree-id209 . -70) (undo-tree-id210 . -70) (undo-tree-id211 . -70) (undo-tree-id212 . -70) (undo-tree-id213 . -70) (undo-tree-id214 . -70) (undo-tree-id215 . -70) (undo-tree-id216 . -70) (undo-tree-id217 . -70) (undo-tree-id218 . -70) (undo-tree-id219 . -70) (undo-tree-id220 . -70) (undo-tree-id221 . -70) (undo-tree-id222 . -70) (undo-tree-id223 . -70) (undo-tree-id224 . -70) (undo-tree-id225 . -70) (undo-tree-id226 . -70) (undo-tree-id227 . -70) (undo-tree-id228 . -70) (undo-tree-id229 . -70) (undo-tree-id230 . -70) (undo-tree-id231 . -70) (undo-tree-id232 . -70) (undo-tree-id233 . -70) (undo-tree-id234 . -70) (undo-tree-id235 . -70) (undo-tree-id236 . -70) (undo-tree-id237 . -70) (undo-tree-id238 . -70) (undo-tree-id239 . -70) (undo-tree-id240 . -70) (undo-tree-id241 . -70) (undo-tree-id242 . -70) (undo-tree-id243 . -70) (undo-tree-id244 . -70) (undo-tree-id245 . -70) (undo-tree-id246 . -70) (undo-tree-id247 . -70) (undo-tree-id248 . -70) (undo-tree-id249 . -70) (undo-tree-id250 . -70) (undo-tree-id251 . -70) (undo-tree-id252 . -70) (undo-tree-id253 . -70) (undo-tree-id254 . -70) (undo-tree-id255 . -70) (undo-tree-id256 . -70) (undo-tree-id257 . -70) (undo-tree-id258 . -70) (undo-tree-id259 . -70) (undo-tree-id260 . -70) (undo-tree-id261 . -70) (undo-tree-id262 . -70) (undo-tree-id263 . -70) (undo-tree-id264 . -70) (undo-tree-id265 . -70) (undo-tree-id266 . -70) (undo-tree-id267 . -70) (undo-tree-id268 . -70) (undo-tree-id269 . -70) (undo-tree-id270 . -70) (undo-tree-id271 . -70) (undo-tree-id272 . -70) (undo-tree-id273 . -70) (undo-tree-id274 . -70) (undo-tree-id275 . -70) (undo-tree-id276 . -70) (undo-tree-id277 . -70) (undo-tree-id278 . -70) (undo-tree-id279 . -70) (undo-tree-id280 . -70) (undo-tree-id281 . -70) (undo-tree-id282 . -70) (undo-tree-id283 . -70) (undo-tree-id284 . -70) (undo-tree-id285 . -70) (undo-tree-id286 . -70) (undo-tree-id287 . -70) (undo-tree-id288 . -70) (undo-tree-id289 . -70) (undo-tree-id290 . -70) (undo-tree-id291 . -70) (undo-tree-id292 . -70) (undo-tree-id293 . -70) (undo-tree-id294 . -70) (undo-tree-id295 . -70) (undo-tree-id296 . -70) (undo-tree-id297 . -70) (undo-tree-id298 . -70) (undo-tree-id299 . -70) (undo-tree-id300 . -70) (undo-tree-id301 . -70) (undo-tree-id302 . -70) (undo-tree-id303 . -70) (undo-tree-id304 . -70) (undo-tree-id305 . -70) (undo-tree-id306 . -70) (undo-tree-id307 . -70) (undo-tree-id308 . -70) (undo-tree-id309 . -70) (undo-tree-id310 . -70) (undo-tree-id311 . -70) (undo-tree-id312 . -70) (undo-tree-id313 . -70) (undo-tree-id314 . -70) (undo-tree-id315 . -70) (undo-tree-id316 . -70) (undo-tree-id317 . -70) (undo-tree-id318 . -70) (undo-tree-id319 . -70) (undo-tree-id320 . -70) (undo-tree-id321 . -70) (undo-tree-id322 . -70) (undo-tree-id323 . -70) (undo-tree-id324 . -70) (undo-tree-id325 . -70) (undo-tree-id326 . -70) (undo-tree-id327 . -70) (undo-tree-id328 . -70) (undo-tree-id329 . -70) (undo-tree-id330 . -70) (undo-tree-id331 . -70) (undo-tree-id332 . -70) (undo-tree-id333 . -70) (undo-tree-id334 . -70) (undo-tree-id335 . -70) (undo-tree-id336 . -70) (undo-tree-id337 . -70) (undo-tree-id338 . -70) (undo-tree-id339 . -70) (undo-tree-id340 . -70) (undo-tree-id341 . -70) (undo-tree-id342 . -70) (undo-tree-id343 . -70) (undo-tree-id344 . -70) (undo-tree-id345 . -70) (undo-tree-id346 . -70) (undo-tree-id347 . -70) (undo-tree-id348 . -70) (undo-tree-id349 . -70) (undo-tree-id350 . -70) (undo-tree-id351 . -70) (undo-tree-id352 . -70) (undo-tree-id353 . -70) (undo-tree-id354 . -70) (undo-tree-id355 . -70) (undo-tree-id356 . -70) (undo-tree-id357 . -70) (undo-tree-id358 . -70) (undo-tree-id359 . -70) (undo-tree-id360 . -70) (undo-tree-id361 . -70) (undo-tree-id362 . -70) (undo-tree-id363 . -70) (undo-tree-id364 . -70) (undo-tree-id365 . -70) (undo-tree-id366 . -70) (undo-tree-id367 . -70) (undo-tree-id368 . -70) (undo-tree-id369 . -70) (undo-tree-id370 . -70) (undo-tree-id371 . -70) (undo-tree-id372 . -70) (undo-tree-id373 . -70) (undo-tree-id374 . -70) (undo-tree-id375 . -70) (undo-tree-id376 . -70) (undo-tree-id377 . -70) (undo-tree-id378 . -70) (undo-tree-id379 . -70) (undo-tree-id380 . -70) (undo-tree-id381 . -70) (undo-tree-id382 . -70) (undo-tree-id383 . -70) (undo-tree-id384 . -70) (undo-tree-id385 . -70) (undo-tree-id386 . -70) (undo-tree-id387 . -70) (undo-tree-id388 . -70) (undo-tree-id389 . -70) (undo-tree-id390 . -70) (undo-tree-id391 . -70) (undo-tree-id392 . -70) (undo-tree-id393 . -70) (undo-tree-id394 . -70) (undo-tree-id395 . -70) (undo-tree-id396 . -70) (undo-tree-id397 . -70) (undo-tree-id398 . -70) (undo-tree-id399 . -70) (undo-tree-id400 . -70) (undo-tree-id401 . -70) (undo-tree-id402 . -70) (undo-tree-id403 . -70) (undo-tree-id404 . -70) (undo-tree-id405 . -70) (undo-tree-id406 . -70) (undo-tree-id407 . -70) (undo-tree-id408 . -70) (undo-tree-id409 . -70) (undo-tree-id410 . -70) (undo-tree-id411 . -70) (undo-tree-id412 . -70) (undo-tree-id413 . -70) (undo-tree-id414 . -70) (undo-tree-id415 . -70) (undo-tree-id416 . -70) (undo-tree-id417 . -70) (undo-tree-id418 . -70) (undo-tree-id419 . -70) (undo-tree-id420 . -70) (undo-tree-id421 . -70) (undo-tree-id422 . -70) (undo-tree-id423 . -70) (undo-tree-id424 . -70) (undo-tree-id425 . -70) (undo-tree-id426 . -70) (undo-tree-id427 . -70) (undo-tree-id428 . -70) (undo-tree-id429 . -70) (undo-tree-id430 . -70) (undo-tree-id431 . -70) (undo-tree-id432 . -70) (undo-tree-id433 . -70) (undo-tree-id434 . -70) (undo-tree-id435 . -70) (undo-tree-id436 . -70) (undo-tree-id437 . -70) (undo-tree-id438 . -70) (undo-tree-id439 . -70) (undo-tree-id440 . -70) (undo-tree-id441 . -70) (undo-tree-id442 . -70) (undo-tree-id443 . -70) (undo-tree-id444 . -70) (undo-tree-id445 . -70) (undo-tree-id446 . -70) (undo-tree-id447 . -70) (undo-tree-id448 . -70) (undo-tree-id449 . -70) (undo-tree-id450 . -70) (undo-tree-id451 . -70) (undo-tree-id452 . -70) (undo-tree-id453 . -70) (undo-tree-id454 . -70) (undo-tree-id455 . -70) (undo-tree-id456 . -70) (undo-tree-id457 . -70) (undo-tree-id458 . -70) (undo-tree-id459 . -70) (undo-tree-id460 . -70) (undo-tree-id461 . -70) (undo-tree-id462 . -70) (undo-tree-id463 . -70) (undo-tree-id464 . -70) (undo-tree-id465 . -70) (undo-tree-id466 . -70) (undo-tree-id467 . -70) (undo-tree-id468 . -70) (undo-tree-id469 . -70) (undo-tree-id470 . -70) (undo-tree-id471 . -70) (undo-tree-id472 . -70) (undo-tree-id473 . -70) (undo-tree-id474 . -70) (undo-tree-id475 . -70) (undo-tree-id476 . -70) (undo-tree-id477 . -70) (undo-tree-id478 . -70) (undo-tree-id479 . -70) (undo-tree-id480 . -70) (undo-tree-id481 . -70) (undo-tree-id482 . -70) (undo-tree-id483 . -70) (undo-tree-id484 . -70) (undo-tree-id485 . -39) (undo-tree-id486 . -39) (undo-tree-id487 . -39) (undo-tree-id488 . -39) (undo-tree-id489 . -39) (undo-tree-id490 . -39) (undo-tree-id491 . -39) (undo-tree-id492 . -39) (undo-tree-id493 . -39) (undo-tree-id494 . -39) (undo-tree-id495 . -39) (undo-tree-id496 . -39) (undo-tree-id497 . -39) (undo-tree-id498 . -39) (undo-tree-id499 . -39) (undo-tree-id500 . -39) (undo-tree-id501 . -39) (undo-tree-id502 . -39) (undo-tree-id503 . -39) (undo-tree-id504 . -39) (undo-tree-id505 . -39) (undo-tree-id506 . -39) (undo-tree-id507 . -39) (undo-tree-id508 . -39) (undo-tree-id509 . -39) (undo-tree-id510 . -39) (undo-tree-id511 . -39) (undo-tree-id512 . -10) (undo-tree-id513 . -10) (undo-tree-id514 . -10) (undo-tree-id515 . -10) (undo-tree-id516 . -10) (undo-tree-id517 . -10) (undo-tree-id518 . -10) (undo-tree-id519 . -10) (undo-tree-id520 . -10) (undo-tree-id521 . -10) (undo-tree-id522 . -10) (undo-tree-id523 . -10) (undo-tree-id524 . -10) (undo-tree-id525 . -10) (undo-tree-id526 . -10) (undo-tree-id527 . -10) (undo-tree-id528 . -10) (undo-tree-id529 . -10) (undo-tree-id530 . -10) (undo-tree-id531 . -10) (undo-tree-id532 . -10) (undo-tree-id533 . -10) (undo-tree-id534 . -10) (undo-tree-id535 . -10) (undo-tree-id536 . -10) (undo-tree-id537 . -10) (undo-tree-id538 . -10) (undo-tree-id539 . -10) (undo-tree-id540 . -10) (undo-tree-id541 . -10) (undo-tree-id542 . -10) (undo-tree-id543 . -10) (undo-tree-id544 . -10) (undo-tree-id545 . -10) (undo-tree-id546 . -10) (undo-tree-id547 . -10) (undo-tree-id548 . -39) (undo-tree-id549 . -39) (undo-tree-id550 . -39) (undo-tree-id551 . -39) (undo-tree-id552 . -39) (undo-tree-id553 . -39) (undo-tree-id554 . -39) (undo-tree-id555 . -39) (undo-tree-id556 . -39) (undo-tree-id557 . -39) (undo-tree-id558 . -39) (undo-tree-id559 . -39) (undo-tree-id560 . -39) (undo-tree-id561 . -39) (undo-tree-id562 . -39) (undo-tree-id563 . -39) (undo-tree-id564 . -39) (undo-tree-id565 . -39) (undo-tree-id566 . -39) (undo-tree-id567 . -39) (undo-tree-id568 . -39) (undo-tree-id569 . -39) (undo-tree-id570 . -39) (undo-tree-id571 . -39) (undo-tree-id572 . -39) (undo-tree-id573 . -39) (undo-tree-id574 . -39) (undo-tree-id575 . -70) (undo-tree-id576 . -70) (undo-tree-id577 . -70) (undo-tree-id578 . -70) (undo-tree-id579 . -70) (undo-tree-id580 . -70) (undo-tree-id581 . -70) (undo-tree-id582 . -70) (undo-tree-id583 . -70) (undo-tree-id584 . -70) (undo-tree-id585 . -70) (undo-tree-id586 . -70) (undo-tree-id587 . -70) (undo-tree-id588 . -70) (undo-tree-id589 . -70) (undo-tree-id590 . -70) (undo-tree-id591 . -70) (undo-tree-id592 . -70) (undo-tree-id593 . -70) (undo-tree-id594 . -70) (undo-tree-id595 . -70) (undo-tree-id596 . -70) (undo-tree-id597 . -70) (undo-tree-id598 . -70) (undo-tree-id599 . -70) (undo-tree-id600 . -70) (undo-tree-id601 . -70) (undo-tree-id602 . -71) (undo-tree-id603 . -71) (undo-tree-id604 . -71) (undo-tree-id605 . -71) (undo-tree-id606 . -71) (undo-tree-id607 . -71) (undo-tree-id608 . -71) (undo-tree-id609 . -71) (undo-tree-id610 . -71) (undo-tree-id611 . -71) (undo-tree-id612 . -71) (undo-tree-id613 . -71) (undo-tree-id614 . -71) (undo-tree-id615 . -71) (undo-tree-id616 . -71) (undo-tree-id617 . -71) (undo-tree-id618 . -71) (undo-tree-id619 . -71) (undo-tree-id620 . 3) (undo-tree-id621 . -70) (undo-tree-id622 . 17) (undo-tree-id623 . -56) (undo-tree-id624 . -71) (undo-tree-id625 . -71) (undo-tree-id626 . -71) (undo-tree-id627 . -71) (undo-tree-id628 . -71) (undo-tree-id629 . -71) (undo-tree-id630 . -71) (undo-tree-id631 . -71) (undo-tree-id632 . -71) (undo-tree-id633 . -71) (undo-tree-id634 . -71) (undo-tree-id635 . -71) (undo-tree-id636 . -71) (undo-tree-id637 . -71) (undo-tree-id638 . -71) (undo-tree-id639 . -71) (undo-tree-id640 . -71) (undo-tree-id641 . -71) (undo-tree-id642 . -71) (undo-tree-id643 . -71) (undo-tree-id644 . -71) (undo-tree-id645 . -71) (undo-tree-id646 . -71) (undo-tree-id647 . -71) (undo-tree-id648 . -71) (undo-tree-id649 . -71) (undo-tree-id650 . -71) (undo-tree-id651 . -71) (undo-tree-id652 . -71) (undo-tree-id653 . -71) (undo-tree-id654 . -71) (undo-tree-id655 . -71) (undo-tree-id656 . -71) (undo-tree-id657 . -71) (undo-tree-id658 . -71) (undo-tree-id659 . -71) (undo-tree-id660 . -71) (undo-tree-id661 . -71) (undo-tree-id662 . -71) (undo-tree-id663 . -71) (undo-tree-id664 . -71) (undo-tree-id665 . -71) (undo-tree-id666 . -71) (undo-tree-id667 . -71) (undo-tree-id668 . -71) (undo-tree-id669 . -43) (undo-tree-id670 . -70) (undo-tree-id671 . -43) (undo-tree-id672 . -69) (undo-tree-id673 . -69) (undo-tree-id674 . -69) (undo-tree-id675 . -69) (undo-tree-id676 . -69) (undo-tree-id677 . -69) (undo-tree-id678 . -69) (undo-tree-id679 . -69) (undo-tree-id680 . -69) (undo-tree-id681 . -69) (undo-tree-id682 . -69) (undo-tree-id683 . -69) (undo-tree-id684 . -69) (undo-tree-id685 . -69) (undo-tree-id686 . -69) (undo-tree-id687 . -69) (undo-tree-id688 . -69) (undo-tree-id689 . -69) (undo-tree-id690 . -69) (undo-tree-id691 . -69) (undo-tree-id692 . -69) (undo-tree-id693 . -69) (undo-tree-id694 . -69) (undo-tree-id695 . -69) (undo-tree-id696 . -69) (undo-tree-id697 . -69) (undo-tree-id698 . -69) (undo-tree-id699 . -69) (undo-tree-id700 . -69) (undo-tree-id701 . -69) (undo-tree-id702 . -69) (undo-tree-id703 . -69) (undo-tree-id704 . -69) (undo-tree-id705 . -69) (undo-tree-id706 . -69) (undo-tree-id707 . -69) (undo-tree-id708 . 72) (undo-tree-id709 . 61) (undo-tree-id710 . -69) (undo-tree-id711 . -69) (undo-tree-id712 . -69) (undo-tree-id713 . -69) (undo-tree-id714 . -69) (undo-tree-id715 . -69) (undo-tree-id716 . -69) (undo-tree-id717 . -69) (undo-tree-id718 . -69) (undo-tree-id719 . -69) (undo-tree-id720 . -69) (undo-tree-id721 . -69) (undo-tree-id722 . -69) (undo-tree-id723 . -69) (undo-tree-id724 . -69) (undo-tree-id725 . -69) (undo-tree-id726 . -69) (undo-tree-id727 . -69) (undo-tree-id728 . -69)) (25661 3321 582215 819000) 0 nil])
([nil nil ((1 . 74) (#("

fn main() {
    println!(\"Hello, world!\");
    println!(\"hello world\");
}
" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 9 (fontified t face font-lock-function-name-face) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 14 (fontified t) 14 18 (fontified t) 18 26 (fontified t face rust-builtin-formatting-macro) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 42 (fontified t face font-lock-string-face) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t) 45 49 (fontified t) 49 57 (fontified t face rust-builtin-formatting-macro) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 59 (fontified t face font-lock-string-face) 59 68 (fontified t face font-lock-string-face) 68 70 (fontified t face font-lock-string-face) 70 71 (fontified t face font-lock-string-face) 71 72 (fontified t face (rainbow-delimiters-depth-2-face)) 72 73 (fontified t) 73 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-1-face)) 75 76 (fontified t)) . 1) (undo-tree-id1238 . 3) (undo-tree-id1239 . 6) (undo-tree-id1240 . -45) (undo-tree-id1241 . -72) (undo-tree-id1242 . -72) (undo-tree-id1243 . -72) (undo-tree-id1244 . -72) (undo-tree-id1245 . -72) (undo-tree-id1246 . -72) (undo-tree-id1247 . -72) (undo-tree-id1248 . -72) (undo-tree-id1249 . -72) (undo-tree-id1250 . -72) (undo-tree-id1251 . -72) (undo-tree-id1252 . -72) (undo-tree-id1253 . -72) (undo-tree-id1254 . -72) (undo-tree-id1255 . -72) (undo-tree-id1256 . -72) (undo-tree-id1257 . -72) (undo-tree-id1258 . -72) (undo-tree-id1259 . -72) (undo-tree-id1260 . -72) (undo-tree-id1261 . -72) (undo-tree-id1262 . -72) (undo-tree-id1263 . -72) (undo-tree-id1264 . -72) (undo-tree-id1265 . -72) (undo-tree-id1266 . -72) (undo-tree-id1267 . -72) (undo-tree-id1268 . -72) (undo-tree-id1269 . -72) (undo-tree-id1270 . -72) (undo-tree-id1271 . -72) (undo-tree-id1272 . -72) (undo-tree-id1273 . -72) (undo-tree-id1274 . -72) (undo-tree-id1275 . -72) (undo-tree-id1276 . -72) (undo-tree-id1277 . -72) (undo-tree-id1278 . -72) (undo-tree-id1279 . -72) (undo-tree-id1280 . -72) (undo-tree-id1281 . -72) (undo-tree-id1282 . -72) (undo-tree-id1283 . -72) (undo-tree-id1284 . -72) (undo-tree-id1285 . -72) (undo-tree-id1286 . -72) (undo-tree-id1287 . -72) (undo-tree-id1288 . -72) (undo-tree-id1289 . -72) (undo-tree-id1290 . -72) (undo-tree-id1291 . -72) (undo-tree-id1292 . -72) (undo-tree-id1293 . -72) (undo-tree-id1294 . -72) (undo-tree-id1295 . -72) (undo-tree-id1296 . -72) (undo-tree-id1297 . -72) (undo-tree-id1298 . -72) (undo-tree-id1299 . -72) (undo-tree-id1300 . -72) (undo-tree-id1301 . -72) (undo-tree-id1302 . -72) (undo-tree-id1303 . -72) (undo-tree-id1304 . -72) (undo-tree-id1305 . -72) (undo-tree-id1306 . -72) (undo-tree-id1307 . -72) (undo-tree-id1308 . -72) (undo-tree-id1309 . -72) (undo-tree-id1310 . -72) (undo-tree-id1311 . -72) (undo-tree-id1312 . -72) (undo-tree-id1313 . -72) (undo-tree-id1314 . -72) (undo-tree-id1315 . -72) (undo-tree-id1316 . -72) (undo-tree-id1317 . -72) (undo-tree-id1318 . -72) (undo-tree-id1319 . -72) (undo-tree-id1320 . -72) (undo-tree-id1321 . -72) (undo-tree-id1322 . -72) (undo-tree-id1323 . -72) (undo-tree-id1324 . -72) (undo-tree-id1325 . -72) (undo-tree-id1326 . -72) (undo-tree-id1327 . -72) (undo-tree-id1328 . -72) (undo-tree-id1329 . -72) (undo-tree-id1330 . -72) (undo-tree-id1331 . -72) (undo-tree-id1332 . -72) (undo-tree-id1333 . -72) (undo-tree-id1334 . -72) (undo-tree-id1335 . -72) (undo-tree-id1336 . -72) (undo-tree-id1337 . -72) (undo-tree-id1338 . -72) (undo-tree-id1339 . -72)) nil (25661 3335 993390 212000) 0 nil])
([nil nil ((71 . 72) (t 25661 3311 303092 113000)) ((#(";" 0 1 (fontified t)) . 71) (t 25661 3315 103408 760000)) (25661 3315 94514 997000) 0 nil])
([nil nil ((#("    println!(\"hello world\");
" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 26 (face font-lock-string-face fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 29 (fontified t)) . 44) (undo-tree-id2 . -28) (t 25661 3336 1825 409000)) nil (25661 3359 256829 167000) 0 nil])
nil
([nil nil ((1 . 3)) nil (25661 3359 256827 328000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1 . 1)) nil (25661 3359 256825 871000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id0 . 1)) nil (25661 3359 256819 632000) 0 nil])
([nil nil ((1 . 3) (t 25661 3359 266004 520000)) nil (25661 4972 550571 33000) 0 nil])
([nil nil ((13 . 16) (#("f" 0 1 (fontified nil)) . 13) (13 . 14) (#("f64" 0 3 (fontified nil)) . -13) (13 . 16) (#("f" 0 1 (fontified t)) . -13) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 14 (9 . 14) (8 . 10) (#(" " 0 1 (fontified t)) . -8) (undo-tree-id23 . -1) 9 (5 . 9) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -5) (undo-tree-id24 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -6) (undo-tree-id25 . -1) 7 (1 . 7)) nil (25661 4972 550568 406000) 0 nil])
([nil nil ((21 . 24) (#("f" 0 1 (fontified nil)) . 21) (21 . 22) (#("f64" 0 3 (fontified nil)) . -21) (21 . 24) (#("f" 0 1 (fontified t)) . -21) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 22 (17 . 22)) nil (25661 4972 550562 973000) 0 nil])
([nil nil ((27 . 31) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 27) (27 . 31) (26 . 28) (24 . 27)) nil (25661 4972 550560 342000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 10)) nil (25661 4972 550559 138000) 0 nil])
([nil nil ((44 . 45) (#("q" 0 1 (fontified t)) . -44) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 45 (44 . 45) (43 . 44) (44 . 48) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 43) (43 . 44) (42 . 44) (30 . 43)) nil (25661 4972 550557 920000) 0 nil])
([nil nil ((60 . 61) (59 . 60) (60 . 64) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 59) (59 . 60) (58 . 60) (51 . 59)) nil (25661 4972 550554 708000) 0 nil])
([nil nil ((78 . 79) (#("y" 0 1 (fontified t face font-lock-function-name-face)) . -78) (undo-tree-id16 . -1) 79 (75 . 79) (71 . 75) (69 . 71)) nil (25661 4972 550552 937000) 0 nil])
([nil nil ((75 . 76)) nil (25661 4972 550551 113000) 0 nil])
([nil nil ((84 . 87) (#("f" 0 1 (fontified nil)) . 84) (84 . 85) (#("f64" 0 3 (fontified nil)) . -84) (84 . 87) (#("f" 0 1 (fontified t)) . -84) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 85 (81 . 85) (80 . 82)) nil (25661 4972 550549 891000) 0 nil])
([nil nil ((99 . 103) (#("    " 0 4 (fontified nil)) . 98) (undo-tree-id11 . -4) (98 . 103) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 98) (98 . 102) (97 . 99) (95 . 98) (92 . 95) (#("f" 0 1 (fontified nil)) . 92) (92 . 93) (#("f64" 0 3 (fontified nil)) . -92) (92 . 95) (#("f" 0 1 (fontified t)) . -92) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 93 (91 . 93) (88 . 91)) nil (25661 4972 550545 725000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 98)) nil (25661 4972 550541 792000) 0 nil])
([nil nil ((113 . 114) (114 . 118) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 113) (113 . 114) (112 . 114) (109 . 113) (102 . 109)) nil (25661 4972 550540 639000) 0 nil])
([nil nil ((110 . 112)) nil (25661 4972 550539 247000) 0 nil])
([nil nil ((116 . 117)) nil (25661 4972 550538 570000) 0 nil])
([nil nil ((132 . 133) (131 . 132) (132 . 136) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 131) (131 . 132) (130 . 132) (125 . 131) (123 . 125)) nil (25661 4972 550537 487000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -143) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -144) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#(" " 0 1 (fontified t)) . -145) (undo-tree-id10 . -1) 146 (143 . 146) (141 . 143)) nil (25661 4972 550534 827000) 0 nil])
([nil nil ((#("fn relu(x: f64) -> f64 {
    if x > 0.0 {
	x
    } else {
	0
    }
}

fn d_relu(x: f64) -> f64 {
    if x > 0.0 {
	1
    } else {
	0
    }
}


" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-function-name-face) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t face font-lock-variable-name-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-type-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 17 (fontified t) 17 18 (fontified t syntax-table (1)) 18 19 (fontified t) 19 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t) 25 29 (fontified t) 29 31 (fontified t face font-lock-keyword-face) 31 34 (fontified t) 34 35 (fontified t syntax-table (1)) 35 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 42 (fontified t) 42 45 (fontified t) 45 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 51 (fontified t) 51 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 58 (fontified t) 58 61 (fontified t) 61 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t) 67 68 (fontified t face (rainbow-delimiters-depth-1-face)) 68 69 (fontified t) 69 70 (fontified t) 70 72 (fontified t face font-lock-keyword-face) 72 73 (fontified t) 73 79 (fontified t face font-lock-function-name-face) 79 80 (fontified t face (rainbow-delimiters-depth-1-face)) 80 81 (fontified t face font-lock-variable-name-face) 81 83 (fontified t) 83 86 (fontified t face font-lock-type-face) 86 87 (fontified t face (rainbow-delimiters-depth-1-face)) 87 89 (fontified t) 89 90 (fontified t syntax-table (1)) 90 91 (fontified t) 91 94 (fontified t face font-lock-type-face) 94 95 (fontified t) 95 96 (fontified t face (rainbow-delimiters-depth-1-face)) 96 97 (fontified t) 97 101 (fontified t) 101 103 (fontified t face font-lock-keyword-face) 103 106 (fontified t) 106 107 (fontified t syntax-table (1)) 107 112 (fontified t) 112 113 (fontified t face (rainbow-delimiters-depth-2-face)) 113 114 (fontified t) 114 117 (fontified t) 117 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-2-face)) 122 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-2-face)) 129 130 (fontified t) 130 133 (fontified t) 133 137 (fontified t) 137 138 (fontified t face (rainbow-delimiters-depth-2-face)) 138 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-1-face)) 140 141 (fontified t) 141 142 (fontified t) 142 143 (fontified t)) . 1) (undo-tree-id0 . -142) (undo-tree-id1 . 1) (undo-tree-id2 . -142) (undo-tree-id3 . -142) (undo-tree-id4 . -142) (undo-tree-id5 . -142)) nil (25661 4972 550527 731000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id132 . 1) (undo-tree-id133 . 1) (t 25661 4972 555739 482000)) nil (25661 12283 90325 226000) 0 nil])
([nil nil ((#("    println!(\"Hello, world!\");
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 28 (fontified t face font-lock-string-face) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 31 (fontified t)) . 13) (undo-tree-id131 . -30) (t 25661 4972 625740 649000)) nil (25661 12283 90323 138000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14) (undo-tree-id129 . -4) 18 (14 . 18) (#("    " 0 4 (fontified nil)) . 13) (undo-tree-id130 . -4) (12 . 18)) nil (25661 12283 90320 987000) 0 nil])
([nil nil ((13 . 17)) nil (25661 12283 90318 871000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -48) (undo-tree-id128 . -1) 49 (43 . 49) (22 . 43) (18 . 22)) nil (25661 12283 90317 555000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 13) (undo-tree-id126 . -4) (undo-tree-id127 . -3) 16) nil (25661 12283 90315 504000) 0 nil])
([nil nil ((#("    // setting up the database
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face)) . 13) (undo-tree-id115 . 1) (undo-tree-id116 . -30) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -29) (undo-tree-id120 . -29) (undo-tree-id121 . -29) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) 16) nil (25661 12283 90313 15000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14) (undo-tree-id113 . -4) 18 (14 . 18) (#("    " 0 4 (fontified nil)) . 13) (undo-tree-id114 . -4) (12 . 18)) nil (25661 12283 90305 850000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -32) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -33) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("i" 0 1 (fontified t)) . -34) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("t" 0 1 (fontified t)) . -35) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("_" 0 1 (fontified t)) . -36) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("n" 0 1 (fontified t)) . -37) (undo-tree-id104 . -1) (#("e" 0 1 (fontified t)) . -38) (undo-tree-id105 . -1) 39 (36 . 39) (32 . 36) (#("i" 0 1 (fontified t)) . -32) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -33) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 34 (21 . 34) (apply yas--snippet-revive 18 21 #s(yas--snippet nil nil nil 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil nil nil)) (18 . 21) (#("let" 0 3 (fontified nil)) . 18) (18 . 21) (#("le" 0 2 (fontified nil)) . 18) (18 . 20) (#("let" 0 3 (fontified nil)) . -18) (18 . 21) (#("le" 0 2 (fontified t)) . -18) (undo-tree-id110 . -2) (undo-tree-id111 . -2) 20 (18 . 20) (14 . 18) (#("    " 0 4 (fontified nil)) . 13) (undo-tree-id112 . -4) (17 . 18) (13 . 17)) nil (25661 12283 90300 773000) 0 nil])
([nil nil ((1 . 3)) nil (25661 12283 90265 171000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . 1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -3) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("N" 0 1 (fontified t face font-lock-type-face)) . -5) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 6 (5 . 6) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -5) (undo-tree-id63 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -6) (undo-tree-id64 . -1) 7 (#("a" 0 1 (fontified t face font-lock-constant-face)) . -7) (undo-tree-id65 . -1) (#("g" 0 1 (fontified t face font-lock-constant-face)) . -8) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -9) (undo-tree-id67 . -1) (#("_" 0 1 (fontified t face font-lock-constant-face)) . -10) (undo-tree-id68 . -1) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -11) (undo-tree-id69 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -12) (undo-tree-id70 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -13) (undo-tree-id71 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -14) (undo-tree-id72 . -1) (#("g" 0 1 (fontified t face font-lock-constant-face)) . -15) (undo-tree-id73 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -16) (undo-tree-id74 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -17) (undo-tree-id75 . -1) (#("z" 0 1 (fontified t face font-lock-constant-face)) . -18) (undo-tree-id76 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -19) (undo-tree-id77 . -1) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -20) (undo-tree-id78 . -1) (#("_" 0 1 (fontified t face font-lock-constant-face)) . -21) (undo-tree-id79 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -22) (undo-tree-id80 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -23) (undo-tree-id81 . -1) (#(":" 0 1 (fontified t)) . -24) (undo-tree-id82 . -1) (#(":" 0 1 (fontified t)) . -25) (undo-tree-id83 . -1) (#("i" 0 1 (fontified t)) . -26) (undo-tree-id84 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -27) (undo-tree-id85 . -1) 28 (24 . 28) (5 . 24) (#("in" 0 2 (fontified nil)) . 5) (5 . 7) (#("image_recognizer_nn" 0 19 (fontified nil)) . -5) (5 . 24) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -5) (undo-tree-id86 . -2) (undo-tree-id87 . -2) 7 (5 . 7) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -5) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -6) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -7) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 8 (1 . 8)) nil (25661 12283 90252 962000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id134 . 1) (undo-tree-id135 . 1) (t 25661 12283 100404 316000)) nil (25661 12290 192158 303000) 0 nil])
([nil nil ((#("    let network = 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 19 (fontified t)) . 15) (undo-tree-id207 . 1) (undo-tree-id208 . -18) (undo-tree-id209 . -18) (undo-tree-id210 . -17) (undo-tree-id211 . -17) (undo-tree-id212 . -18) (undo-tree-id213 . -17) (undo-tree-id214 . -18) 32 (t 25661 12290 200536 93000)) nil (25661 12294 760048 496000) 0 nil])
([nil nil ((1 . 12) (#("
fn main() {


" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 1) (undo-tree-id136 . 1) (undo-tree-id137 . -14) (undo-tree-id138 . -14) (undo-tree-id139 . 14) (undo-tree-id140 . -14) (undo-tree-id141 . -15) (undo-tree-id142 . -15) (undo-tree-id143 . -15) (undo-tree-id144 . -15) (undo-tree-id145 . -15) (undo-tree-id146 . 15) (undo-tree-id147 . -15) (undo-tree-id148 . -14) (undo-tree-id149 . -14) (undo-tree-id150 . -14) (undo-tree-id151 . -14) (undo-tree-id152 . -14) (undo-tree-id153 . -14) (undo-tree-id154 . -14) (undo-tree-id155 . -14) (undo-tree-id156 . -14) (undo-tree-id157 . -14) (undo-tree-id158 . -14) (undo-tree-id159 . -14) (undo-tree-id160 . -14) (undo-tree-id161 . -14) (undo-tree-id162 . -14) (undo-tree-id163 . -14) (undo-tree-id164 . -14) (undo-tree-id165 . -14) (undo-tree-id166 . -14) (undo-tree-id167 . -14) (undo-tree-id168 . -14) (undo-tree-id169 . -14) (undo-tree-id170 . -14) (undo-tree-id171 . -14) (undo-tree-id172 . -14) (undo-tree-id173 . -14) (undo-tree-id174 . -14) (undo-tree-id175 . -14) (undo-tree-id176 . -14) (undo-tree-id177 . -14) (undo-tree-id178 . -14) (undo-tree-id179 . -14) (undo-tree-id180 . -14) (undo-tree-id181 . -14) (undo-tree-id182 . -14) (undo-tree-id183 . -14) (undo-tree-id184 . -14) (undo-tree-id185 . -14) (undo-tree-id186 . -14) (undo-tree-id187 . -14) (undo-tree-id188 . -14) (undo-tree-id189 . -14) (undo-tree-id190 . -14) (undo-tree-id191 . -14) (undo-tree-id192 . -14) (undo-tree-id193 . -14) (undo-tree-id194 . -14) (undo-tree-id195 . -14) (undo-tree-id196 . -14) (undo-tree-id197 . -14) (undo-tree-id198 . -14) (undo-tree-id199 . -14) (undo-tree-id200 . -14) (undo-tree-id201 . -14) (undo-tree-id202 . -14) (undo-tree-id203 . -14) (undo-tree-id204 . -14) (undo-tree-id205 . -14) (undo-tree-id206 . -14)) nil (25661 12294 760035 915000) 0 nil])
([nil nil ((1 . 3) (t 25661 12294 770620 565000)) nil (25661 12337 800347 505000) 0 nil])
([nil nil ((26 . 34) (24 . 26) (#(":" 0 1 (fontified t)) . -24) (undo-tree-id215 . -1) (#(":" 0 1 (fontified t)) . -25) (undo-tree-id216 . -1) (#("N" 0 1 (fontified t face font-lock-type-face)) . -26) (undo-tree-id217 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -27) (undo-tree-id218 . -1) 28 (24 . 28) (5 . 24) (#("ima" 0 3 (fontified nil)) . 5) (5 . 8) (#("image_recognizer_nn" 0 19 (fontified nil)) . -5) (5 . 24) (#("ima" 0 3 (fontified t face font-lock-constant-face)) . -5) (undo-tree-id219 . -3) (undo-tree-id220 . -3) 8 (5 . 8) (#("N" 0 1 (fontified t face font-lock-type-face)) . -5) (undo-tree-id221 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -6) (undo-tree-id222 . -1) 7 (1 . 7)) nil (25661 12337 800340 459000) 0 nil])
([nil nil ((#("use image_recognizer_nn::Network;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 32 (fontified t face font-lock-type-face) 32 33 (fontified t) 33 34 (fontified t)) . 1) (undo-tree-id225 . 1) (undo-tree-id226 . -33) (undo-tree-id227 . -25) (undo-tree-id228 . -25) (undo-tree-id229 . -25) (undo-tree-id230 . -25) (undo-tree-id231 . 1) (undo-tree-id232 . -32) (undo-tree-id233 . -25) (undo-tree-id234 . -32) (undo-tree-id235 . -25) (undo-tree-id236 . -32) (undo-tree-id237 . 34) (undo-tree-id238 . -34) (undo-tree-id239 . -34) (undo-tree-id240 . -25) (undo-tree-id241 . -25) (undo-tree-id242 . -34) 26 (t 25661 12337 811403 142000)) nil (25661 12342 792114 342000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id223 . 1) (undo-tree-id224 . 1)) nil (25661 12342 792095 92000) 0 nil])
([nil nil ((1 . 39) (1 . 3) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 85 90 nil nil nil nil #s(yas--field 2 92 98 nil nil nil nil #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil)))) #s(yas--field 2 92 98 nil nil nil nil #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil))) #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil))) #s(yas--exit 106 nil) 46 nil #s(yas--field 1 85 90 nil nil nil nil #s(yas--field 2 92 98 nil nil nil nil #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil)))) nil nil)) (32 . 66) (#("init_network(${1:first}, ${2:second}, ${3:third})$0" 0 51 (fontified nil)) . 32) (32 . 83) (#("init_n" 0 6 (fontified nil)) . 32) (32 . 38) (#("init_network(…) (use image_recognizer_nn::init_network)" 0 55 (fontified nil)) . -32) (32 . 87) (#("init_n" 0 6 (fontified t)) . -32) (undo-tree-id244 . -6) (undo-tree-id245 . -6) 38 (33 . 38) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -33) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("i" 0 1 (fontified t)) . -34) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 35 (32 . 35) (#("N" 0 1 (fontified t face font-lock-type-face)) . -32) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 33 (24 . 33) (18 . 24) (#("k" 0 1 (fontified t)) . -18) (undo-tree-id252 . -1) (undo-tree-id253 . -1) 19 (18 . 19) (14 . 18) (#("    " 0 4 (fontified nil)) . 13) (undo-tree-id254 . -4) (13 . 18) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 13) (13 . 17) (12 . 14) (t 25661 12342 804825 799000)) nil (25661 12414 782289 114000) 0 nil])
([nil nil ((apply yas--snippet-revive 72 106 #s(yas--snippet nil (#s(yas--field 1 85 90 nil nil nil nil #s(yas--field 2 92 98 nil nil nil nil #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil)))) #s(yas--field 2 92 98 nil nil nil nil #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil))) #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil))) #s(yas--exit 106 nil) 46 nil #s(yas--field 1 85 90 nil nil nil nil #s(yas--field 2 92 98 nil nil nil nil #s(yas--field 3 100 105 nil nil nil nil #s(yas--exit 106 nil)))) nil nil))) nil (25661 12414 782275 793000) 0 nil])
([nil nil ((103 . 117) (98 . 103) (97 . 98) (82 . 97) (77 . 82) (67 . 77) (59 . 67) (#(" " 0 1 (fontified t)) . -59) (undo-tree-id243 . -1) 60 (57 . 60) (53 . 57)) nil (25661 12414 782273 585000) 0 nil])
([nil nil ((117 . 118)) nil (25661 12414 782263 398000) 0 nil])
([nil nil ((171 . 172)) nil (25661 12414 782258 1000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -173) (undo-tree-id454 . -4) 177 (172 . 177) (t 25661 12414 796082 318000)) nil (25661 12439 143571 597000) 0 nil])
([nil nil ((56 . 60) (#("    " 0 4 (fontified nil)) . 55) (undo-tree-id452 . -4) (55 . 60) (#("    " 0 4 (fontified nil)) . 54) (undo-tree-id453 . -4) (58 . 59) (#("    " 0 4 (fontified nil)) . 53) (53 . 57) (53 . 54)) nil (25661 12439 143569 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 93 . 94) (nil fontified nil 54 . 94) (54 . 94)) nil (25661 12439 143566 175000) 0 nil])
([nil nil ((53 . 220) (#("
use mnist::*;
use ndarray::prelude::*;



    let first = 28 * 28;
    let second = 50;
    let third = 10;
    let network = init_network(first, second, third);
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 10 (fontified t face font-lock-constant-face) 10 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 26 (fontified t face font-lock-constant-face) 26 28 (fontified t) 28 35 (fontified t face font-lock-constant-face) 35 40 (fontified t) 40 41 (fontified t rear-nonsticky t) 41 42 (fontified t) 42 47 (fontified t) 47 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 56 (fontified t face font-lock-variable-name-face) 56 68 (fontified t) 68 72 (fontified t) 72 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t) 76 82 (fontified t face font-lock-variable-name-face) 82 89 (fontified t) 89 93 (fontified t) 93 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 102 (fontified t face font-lock-variable-name-face) 102 108 (fontified t) 108 109 (fontified t) 109 113 (fontified t) 113 116 (fontified t face font-lock-keyword-face) 116 117 (fontified t) 117 124 (fontified t face font-lock-variable-name-face) 124 127 (fontified t) 127 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-2-face)) 140 160 (fontified t) 160 161 (fontified t face (rainbow-delimiters-depth-2-face)) 161 163 (fontified t)) . 53) (undo-tree-id255 . 116) (undo-tree-id256 . -1) (undo-tree-id257 . -40) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -140) (undo-tree-id261 . 55) (undo-tree-id262 . -161) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -41) (undo-tree-id344 . -41) (undo-tree-id345 . -41) (undo-tree-id346 . -41) (undo-tree-id347 . -41) (undo-tree-id348 . -41) (undo-tree-id349 . -41) (undo-tree-id350 . -41) (undo-tree-id351 . -41) (undo-tree-id352 . -41) (undo-tree-id353 . -41) (undo-tree-id354 . -41) (undo-tree-id355 . -41) (undo-tree-id356 . -41) (undo-tree-id357 . -41) (undo-tree-id358 . -41) (undo-tree-id359 . -41) (undo-tree-id360 . -41) (undo-tree-id361 . -41) (undo-tree-id362 . -41) (undo-tree-id363 . -41) (undo-tree-id364 . -41) (undo-tree-id365 . -41) (undo-tree-id366 . -41) (undo-tree-id367 . -41) (undo-tree-id368 . -41) (undo-tree-id369 . -41) (undo-tree-id370 . -41) (undo-tree-id371 . -41) (undo-tree-id372 . -41) (undo-tree-id373 . -41) (undo-tree-id374 . -41) (undo-tree-id375 . -41) (undo-tree-id376 . -41) (undo-tree-id377 . -41) (undo-tree-id378 . -41) (undo-tree-id379 . -41) (undo-tree-id380 . -41) (undo-tree-id381 . -41) (undo-tree-id382 . -41) (undo-tree-id383 . -41) (undo-tree-id384 . -41) (undo-tree-id385 . -41) (undo-tree-id386 . -41) (undo-tree-id387 . -41) (undo-tree-id388 . -41) (undo-tree-id389 . -41) (undo-tree-id390 . -41) (undo-tree-id391 . -41) (undo-tree-id392 . -41) (undo-tree-id393 . -41) (undo-tree-id394 . -41) (undo-tree-id395 . -41) (undo-tree-id396 . -41) (undo-tree-id397 . -41) (undo-tree-id398 . -41) (undo-tree-id399 . -41) (undo-tree-id400 . -41) (undo-tree-id401 . -41) (undo-tree-id402 . -41) (undo-tree-id403 . -41) (undo-tree-id404 . -41) (undo-tree-id405 . -41) (undo-tree-id406 . -41) (undo-tree-id407 . -41) (undo-tree-id408 . -41) (undo-tree-id409 . -41) (undo-tree-id410 . -41) (undo-tree-id411 . -41) (undo-tree-id412 . -41) (undo-tree-id413 . -41) (undo-tree-id414 . -41) (undo-tree-id415 . -41) (undo-tree-id416 . -41) (undo-tree-id417 . -41) (undo-tree-id418 . -41) (undo-tree-id419 . -41) (undo-tree-id420 . -41) (undo-tree-id421 . -41) (undo-tree-id422 . -41) (undo-tree-id423 . -41) (undo-tree-id424 . -41) (undo-tree-id425 . -41) (undo-tree-id426 . -41) (undo-tree-id427 . -41) (undo-tree-id428 . -41) (undo-tree-id429 . -41) (undo-tree-id430 . -41) (undo-tree-id431 . -41) (undo-tree-id432 . -41) (undo-tree-id433 . -41) (undo-tree-id434 . -41) (undo-tree-id435 . -41) (undo-tree-id436 . -41) (undo-tree-id437 . -41) (undo-tree-id438 . -41) (undo-tree-id439 . -41) (undo-tree-id440 . -41) (undo-tree-id441 . -41) (undo-tree-id442 . -41) (undo-tree-id443 . -41) (undo-tree-id444 . -41) (undo-tree-id445 . -41) (undo-tree-id446 . -41) (undo-tree-id447 . -41) (undo-tree-id448 . -41) (undo-tree-id449 . -41) (undo-tree-id450 . -41) (undo-tree-id451 . -41)) nil (25661 12439 143556 4000) 0 nil])
([nil nil ((#("    use mnist::*;
    use ndarray::prelude::*;

" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-constant-face) 13 22 (fontified t) 22 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 33 (fontified t face font-lock-constant-face) 33 35 (fontified t) 35 42 (fontified t face font-lock-constant-face) 42 48 (fontified t)) . 53) (undo-tree-id456 . -47) (undo-tree-id457 . -47) (undo-tree-id458 . -47) (undo-tree-id459 . -42) (undo-tree-id460 . -8) (undo-tree-id461 . -16) (undo-tree-id462 . -4) (undo-tree-id463 . -17) (undo-tree-id464 . -26) (undo-tree-id465 . -45) (undo-tree-id466 . -22) (undo-tree-id467 . -46) (undo-tree-id468 . -47) (t 25661 12439 153161 687000)) nil (25661 12443 690676 870000) 0 nil])
([nil nil ((nil rear-nonsticky nil 87 . 88) (nil fontified nil 40 . 88) (40 . 88)) nil (25661 12443 690666 860000) 0 nil])
([nil nil ((40 . 78) (#("    use mnist::*;
    use ndarray::prelude::*;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-constant-face) 13 22 (fontified t) 22 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 33 (fontified t face font-lock-constant-face) 33 35 (fontified t) 35 42 (fontified t face font-lock-constant-face) 42 47 (fontified t)) . 40) (undo-tree-id455 . -47)) nil (25661 12443 690661 370000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -92) (undo-tree-id751 . -4) 96 (91 . 96) (t 25661 12443 699904 740000)) nil (25661 12454 747853 158000) 0 nil])
([nil nil ((94 . 98) (#("    " 0 4 (fontified nil)) . 93) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (93 . 98) (#("    " 0 4 (fontified nil)) . 92) (undo-tree-id750 . -4) (96 . 97) (92 . 96)) nil (25661 12454 747850 307000) 0 nil])
([nil nil ((nil rear-nonsticky nil 376 . 377) (nil fontified nil 93 . 377) (93 . 377)) nil (25661 12454 747835 618000) 0 nil])
([nil nil ((92 . 375) (#("
    let Mnist {
        trn_img,
        trn_lbl,
        tst_img,
        tst_lbl,
        ..
    } = MnistBuilder::new()
        .label_format_digit()
        .training_set_length(50_000)
        .validation_set_length(10_000)
        .test_set_length(10_000)
        .finalize();


    " 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-type-face) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-2-face)) 101 104 (fontified t) 104 116 (fontified t face font-lock-type-face) 116 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-2-face)) 122 123 (fontified t face (rainbow-delimiters-depth-2-face)) 123 151 (fontified t) 151 152 (fontified t face (rainbow-delimiters-depth-2-face)) 152 153 (fontified t face (rainbow-delimiters-depth-2-face)) 153 182 (fontified t) 182 183 (fontified t face (rainbow-delimiters-depth-2-face)) 183 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-2-face)) 190 221 (fontified t) 221 222 (fontified t face (rainbow-delimiters-depth-2-face)) 222 228 (fontified t) 228 229 (fontified t face (rainbow-delimiters-depth-2-face)) 229 254 (fontified t) 254 255 (fontified t face (rainbow-delimiters-depth-2-face)) 255 261 (fontified t) 261 262 (fontified t face (rainbow-delimiters-depth-2-face)) 262 280 (fontified t) 280 281 (fontified t face (rainbow-delimiters-depth-2-face)) 281 282 (fontified t face (rainbow-delimiters-depth-2-face)) 282 284 (fontified t) 284 285 (rear-nonsticky t fontified t) 285 286 (fontified t) 286 290 (fontified t)) . 92) (undo-tree-id469 . -1) (undo-tree-id470 . -284) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . 5) (undo-tree-id499 . -290) (undo-tree-id500 . -290) (undo-tree-id501 . -290) (undo-tree-id502 . -290) (undo-tree-id503 . -290) (undo-tree-id504 . -290) (undo-tree-id505 . -290) (undo-tree-id506 . -290) (undo-tree-id507 . -290) (undo-tree-id508 . -290) (undo-tree-id509 . -290) (undo-tree-id510 . -290) (undo-tree-id511 . -290) (undo-tree-id512 . -290) (undo-tree-id513 . -290) (undo-tree-id514 . -290) (undo-tree-id515 . -290) (undo-tree-id516 . -290) (undo-tree-id517 . -290) (undo-tree-id518 . -290) (undo-tree-id519 . -290) (undo-tree-id520 . -290) (undo-tree-id521 . -290) (undo-tree-id522 . -290) (undo-tree-id523 . -290) (undo-tree-id524 . -290) (undo-tree-id525 . -290) (undo-tree-id526 . -290) (undo-tree-id527 . -290) (undo-tree-id528 . -290) (undo-tree-id529 . -290) (undo-tree-id530 . -289) (undo-tree-id531 . -289) (undo-tree-id532 . -289) (undo-tree-id533 . -289) (undo-tree-id534 . -289) (undo-tree-id535 . -289) (undo-tree-id536 . -289) (undo-tree-id537 . -289) (undo-tree-id538 . -289) (undo-tree-id539 . -289) (undo-tree-id540 . -289) (undo-tree-id541 . -289) (undo-tree-id542 . -289) (undo-tree-id543 . -289) (undo-tree-id544 . -289) (undo-tree-id545 . -289) (undo-tree-id546 . -289) (undo-tree-id547 . -289) (undo-tree-id548 . -289) (undo-tree-id549 . -289) (undo-tree-id550 . -289) (undo-tree-id551 . -289) (undo-tree-id552 . -289) (undo-tree-id553 . -289) (undo-tree-id554 . -289) (undo-tree-id555 . -289) (undo-tree-id556 . -289) (undo-tree-id557 . -289) (undo-tree-id558 . -289) (undo-tree-id559 . -289) (undo-tree-id560 . -289) (undo-tree-id561 . -289) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -285) (undo-tree-id592 . -285) (undo-tree-id593 . -285) (undo-tree-id594 . -285) (undo-tree-id595 . -285) (undo-tree-id596 . -285) (undo-tree-id597 . -285) (undo-tree-id598 . -285) (undo-tree-id599 . -285) (undo-tree-id600 . -285) (undo-tree-id601 . -285) (undo-tree-id602 . -285) (undo-tree-id603 . -285) (undo-tree-id604 . -285) (undo-tree-id605 . -285) (undo-tree-id606 . -285) (undo-tree-id607 . -285) (undo-tree-id608 . -285) (undo-tree-id609 . -285) (undo-tree-id610 . -285) (undo-tree-id611 . -285) (undo-tree-id612 . -285) (undo-tree-id613 . -285) (undo-tree-id614 . -285) (undo-tree-id615 . -285) (undo-tree-id616 . -285) (undo-tree-id617 . -285) (undo-tree-id618 . -285) (undo-tree-id619 . -285) (undo-tree-id620 . -285) (undo-tree-id621 . -285) (undo-tree-id622 . -285) (undo-tree-id623 . -285) (undo-tree-id624 . -285) (undo-tree-id625 . -285) (undo-tree-id626 . -285) (undo-tree-id627 . -285) (undo-tree-id628 . -285) (undo-tree-id629 . -285) (undo-tree-id630 . -285) (undo-tree-id631 . -285) (undo-tree-id632 . -285) (undo-tree-id633 . -285) (undo-tree-id634 . -285) (undo-tree-id635 . -285) (undo-tree-id636 . -285) (undo-tree-id637 . -285) (undo-tree-id638 . -285) (undo-tree-id639 . -285) (undo-tree-id640 . -285) (undo-tree-id641 . -285) (undo-tree-id642 . -285) (undo-tree-id643 . -285) (undo-tree-id644 . -285) (undo-tree-id645 . -285) (undo-tree-id646 . -285) (undo-tree-id647 . -285) (undo-tree-id648 . -285) (undo-tree-id649 . -285) (undo-tree-id650 . -285) (undo-tree-id651 . -285) (undo-tree-id652 . -285) (undo-tree-id653 . -285) (undo-tree-id654 . -285) (undo-tree-id655 . -285) (undo-tree-id656 . -285) (undo-tree-id657 . -285) (undo-tree-id658 . -285) (undo-tree-id659 . -285) (undo-tree-id660 . -285) (undo-tree-id661 . -285) (undo-tree-id662 . -285) (undo-tree-id663 . -285) (undo-tree-id664 . -285) (undo-tree-id665 . -285) (undo-tree-id666 . -285) (undo-tree-id667 . -285) (undo-tree-id668 . -285) (undo-tree-id669 . -285) (undo-tree-id670 . -285) (undo-tree-id671 . -285) (undo-tree-id672 . -285) (undo-tree-id673 . -285) (undo-tree-id674 . -285) (undo-tree-id675 . -285) (undo-tree-id676 . -285) (undo-tree-id677 . -285) (undo-tree-id678 . -285) (undo-tree-id679 . -285) (undo-tree-id680 . -285) (undo-tree-id681 . -285) (undo-tree-id682 . -285) (undo-tree-id683 . -285) (undo-tree-id684 . -285) (undo-tree-id685 . -285) (undo-tree-id686 . -285) (undo-tree-id687 . -285) (undo-tree-id688 . -285) (undo-tree-id689 . -285) (undo-tree-id690 . -285) (undo-tree-id691 . -285) (undo-tree-id692 . -285) (undo-tree-id693 . -285) (undo-tree-id694 . -285) (undo-tree-id695 . -285) (undo-tree-id696 . -285) (undo-tree-id697 . -285) (undo-tree-id698 . -285) (undo-tree-id699 . -285) (undo-tree-id700 . -285) (undo-tree-id701 . -285) (undo-tree-id702 . -285) (undo-tree-id703 . -285) (undo-tree-id704 . -285) (undo-tree-id705 . -285) (undo-tree-id706 . -285) (undo-tree-id707 . -285) (undo-tree-id708 . -285) (undo-tree-id709 . -285) (undo-tree-id710 . -285) (undo-tree-id711 . -285) (undo-tree-id712 . -285) (undo-tree-id713 . -285) (undo-tree-id714 . -285) (undo-tree-id715 . -285) (undo-tree-id716 . -285) (undo-tree-id717 . -285) (undo-tree-id718 . -285) (undo-tree-id719 . -285) (undo-tree-id720 . -285) (undo-tree-id721 . -285)) nil (25661 12454 747824 115000) 0 nil])
([nil nil ((376 . 380) (#("    " 0 4 (fontified nil)) . 375) (undo-tree-id781 . -4) (374 . 380) (t 25661 12454 760089 725000)) nil (25661 12472 601817 6000) 0 nil])
([nil nil ((nil rear-nonsticky nil 714 . 715) (nil fontified nil 380 . 715) (380 . 715) 379) nil (25661 12472 601814 593000) 0 nil])
([nil nil ((380 . 709) (#("    for chunks in trn_img.chunks(first) {
        let image_matrix = Array::from_shape_vec((1, first), chunks.to_vec())
            .unwrap()
            .map(|x| *x as f64 / 256.0);
        train_images.push(image_matrix);
    }

    for k in 0..20 {
        print_image(&train_images[k]);

        println!(\"{}\", trn_lbl[k]);
    }

" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 50 (fontified t) 50 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 66 (fontified t face font-lock-variable-name-face) 66 69 (fontified t) 69 74 (fontified t face font-lock-type-face) 74 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-3-face)) 91 92 (fontified t face (rainbow-delimiters-depth-4-face)) 92 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-4-face)) 101 116 (fontified t) 116 117 (fontified t face (rainbow-delimiters-depth-4-face)) 117 118 (fontified t face (rainbow-delimiters-depth-4-face)) 118 119 (fontified t face (rainbow-delimiters-depth-3-face)) 119 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-3-face)) 140 141 (fontified t face (rainbow-delimiters-depth-3-face)) 141 158 (fontified t) 158 159 (fontified t face (rainbow-delimiters-depth-3-face)) 159 166 (fontified t) 166 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 172 (fontified t face font-lock-type-face) 172 180 (fontified t) 180 181 (fontified t face (rainbow-delimiters-depth-3-face)) 181 208 (fontified t) 208 209 (fontified t face (rainbow-delimiters-depth-3-face)) 209 221 (fontified t) 221 222 (fontified t face (rainbow-delimiters-depth-3-face)) 222 228 (fontified t) 228 229 (fontified t face (rainbow-delimiters-depth-2-face)) 229 235 (fontified t) 235 238 (fontified t face font-lock-keyword-face) 238 239 (fontified t) 239 240 (fontified t face font-lock-variable-name-face) 240 241 (fontified t) 241 243 (fontified t face font-lock-keyword-face) 243 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-2-face)) 251 271 (fontified t) 271 272 (fontified t face (rainbow-delimiters-depth-3-face)) 272 273 (fontified t face rust-ampersand-face) 273 285 (fontified t) 285 286 (fontified t face (rainbow-delimiters-depth-4-face)) 286 287 (fontified t) 287 288 (fontified t face (rainbow-delimiters-depth-4-face)) 288 289 (fontified t face (rainbow-delimiters-depth-3-face)) 289 300 (fontified t) 300 308 (fontified t face rust-builtin-formatting-macro) 308 309 (fontified t face (rainbow-delimiters-depth-3-face)) 309 310 (fontified t face font-lock-string-face) 310 312 (fontified t face rust-string-interpolation) 312 313 (fontified t face font-lock-string-face) 313 322 (fontified t) 322 323 (fontified t face (rainbow-delimiters-depth-4-face)) 323 324 (fontified t) 324 325 (fontified t face (rainbow-delimiters-depth-4-face)) 325 326 (fontified t face (rainbow-delimiters-depth-3-face)) 326 332 (fontified t) 332 333 (fontified t face (rainbow-delimiters-depth-2-face)) 333 334 (fontified t) 334 335 (rear-nonsticky t fontified t)) . -380) (undo-tree-id752 . -334) (undo-tree-id753 . -335) (undo-tree-id754 . -335) (undo-tree-id755 . -335) (undo-tree-id756 . -335) (undo-tree-id757 . -335) (undo-tree-id758 . -335) (undo-tree-id759 . -335) (undo-tree-id760 . -335) (undo-tree-id761 . -335) (undo-tree-id762 . -335) (undo-tree-id763 . -335) (undo-tree-id764 . -335) (undo-tree-id765 . -335) (undo-tree-id766 . -335) (undo-tree-id767 . -335) (undo-tree-id768 . -335) (undo-tree-id769 . -335) (undo-tree-id770 . -335) (undo-tree-id771 . -335) (undo-tree-id772 . -335) (undo-tree-id773 . -335) (undo-tree-id774 . -335) (undo-tree-id775 . -335) (undo-tree-id776 . -335) (undo-tree-id777 . -335) (undo-tree-id778 . -335) (undo-tree-id779 . -335) (undo-tree-id780 . -335)) nil (25661 12472 601809 55000) 0 nil])
([nil nil ((377 . 381) (#("    " 0 4 (fontified nil)) . 376) (undo-tree-id788 . -4) (376 . 381) (#("    " 0 4 (fontified nil)) . 375) (375 . 379) (375 . 376) (t 25661 12472 613719 223000)) nil (25661 12490 198303 433000) 0 nil])
([nil nil ((nil rear-nonsticky nil 381 . 382) (#("
" 0 1 (fontified nil)) . -382) (381 . 383) 380) nil (25661 12490 198300 232000) 0 nil])
([nil nil ((nil rear-nonsticky nil 386 . 387) (#("
" 0 1 (fontified nil)) . -421) (382 . 422)) nil (25661 12490 198298 385000) 0 nil])
([nil nil ((#("
    

" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 7 (fontified t)) . 376) (undo-tree-id782 . -7) (undo-tree-id783 . -6) (undo-tree-id784 . -6) (undo-tree-id785 . -6) (undo-tree-id786 . -6) (undo-tree-id787 . -7)) nil (25661 12490 198293 599000) 0 nil])
([nil nil ((#("
    let first = 28 * 28;
    let second = 50;
    let third = 10;
" 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-variable-name-face) 14 26 (fontified t) 26 30 (fontified t) 30 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 40 (fontified t face font-lock-variable-name-face) 40 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 60 (fontified t face font-lock-variable-name-face) 60 67 (fontified t)) . 749) (undo-tree-id872 . 1) (undo-tree-id873 . -66) (undo-tree-id874 . -66) (undo-tree-id875 . -66) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -66) (undo-tree-id883 . -66) 815 (t 25661 12490 210674 936000)) nil (25661 12511 786654 695000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -93) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) 97 (93 . 97) (#("    " 0 4 (fontified nil)) . 92) (undo-tree-id871 . -4) (91 . 97)) nil (25661 12511 786646 530000) 0 nil])
([nil nil ((nil rear-nonsticky nil 159 . 160) (nil fontified nil 93 . 160) (93 . 160)) nil (25661 12511 786634 542000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 92) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1)) nil (25661 12511 786628 495000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -714) (undo-tree-id886 . -4) 718 (714 . 718) (#("    " 0 4 (fontified nil)) . 713) (undo-tree-id887 . -4) (713 . 718) (#("    " 0 4 (fontified nil)) . 712) (712 . 716) (712 . 713) (t 25661 12511 797692 457000)) nil (25661 12519 799891 596000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 713) (undo-tree-id885 . -1)) nil (25661 12519 799887 34000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 713) (undo-tree-id884 . 1)) nil (25661 12519 799880 928000) 0 nil])
([nil nil ((872 . 874) (t 25661 12519 811155 18000)) nil (25661 12542 245232 788000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1386 . 1387) (nil fontified nil 874 . 1387) (874 . 1387)) nil (25661 12542 245231 252000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 873) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . 1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1)) nil (25661 12542 245224 732000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39 . 40) (#("
" 0 1 (fontified nil)) . -78) (39 . 79) 1 (t 25661 12542 258180 847000)) nil (25661 12559 300701 227000) 0 nil])
([nil nil ((44 . 116) (#("ndarray::{self, Array, OwnedRepr};
use mnist::*;
use ndarray::prelude::*" 0 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 14 (fontified t face font-lock-keyword-face) 14 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 23 (fontified t) 23 32 (fontified t face font-lock-type-face) 32 33 (fontified t face (rainbow-delimiters-depth-1-face)) 33 34 (fontified t) 34 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-constant-face) 44 49 (fontified t) 49 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 60 (fontified t face font-lock-constant-face) 60 62 (fontified t) 62 69 (fontified t face font-lock-constant-face) 69 72 (fontified t)) . 44) (undo-tree-id955 . -34) (undo-tree-id956 . -34) (undo-tree-id957 . -35)) nil (25661 12559 300695 576000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -910) (undo-tree-id1268 . -4) 914 (910 . 914) (#("    " 0 4 (fontified nil)) . 909) (undo-tree-id1269 . -4) (908 . 914) (t 25661 12559 315117 732000)) nil (25661 22206 703489 705000) 0 nil])
([nil nil ((910 . 914) (#("    " 0 4 (fontified nil)) . 909) (undo-tree-id1267 . -4) (913 . 914) (909 . 913)) nil (25661 22206 703487 227000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 910) (undo-tree-id1264 . 1) (undo-tree-id1265 . -4) (undo-tree-id1266 . -3) 913) nil (25661 22206 703485 283000) 0 nil])
([nil nil ((apply -12 756 867 undo--wrap-and-run-primitive-undo 756 867 (("    " . 756) (866 . 869) (827 . 830) (784 . 787) (756 . 763)))) nil (25661 22206 703483 3000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -940) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (#("m" 0 1 (fontified t)) . -941) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (#("a" 0 1 (fontified t)) . -942) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) 943 (931 . 943) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -931) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -932) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -933) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -934) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (#(" " 0 1 (fontified t)) . -935) (undo-tree-id1253 . -1) (#("i" 0 1 (fontified t)) . -936) (undo-tree-id1254 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -937) (undo-tree-id1255 . -1) (#(" " 0 1 (fontified t)) . -938) (undo-tree-id1256 . -1) 939 (935 . 939) (#(" " 0 1 (fontified t)) . -935) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) 936 (933 . 936) (931 . 933) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -931) (undo-tree-id1259 . -1) (#(" " 0 1 (fontified t)) . -932) (undo-tree-id1260 . -1) (#("i" 0 1 (fontified t)) . -933) (undo-tree-id1261 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -934) (undo-tree-id1262 . -1) 935 (927 . 935) (923 . 927) (#("    " 0 4 (fontified nil)) . 922) (undo-tree-id1263 . -4) (922 . 927) (#("    " 0 4 (fontified nil)) . 921) (921 . 925) (921 . 922)) nil (25661 22206 703479 610000) 0 nil])
([nil nil ((964 . 971) (#("tr" 0 2 (fontified nil)) . 964) (undo-tree-id1227 . -2) (964 . 966) (#("trn_lbl" 0 7 (fontified nil)) . -964) (undo-tree-id1228 . -7) (964 . 971) (#("tr" 0 2 (fontified t)) . -964) (undo-tree-id1229 . -2) (undo-tree-id1230 . -2) (undo-tree-id1231 . -2) 966 (965 . 966) (#("other" 0 5 (fontified nil)) . 965) (undo-tree-id1232 . -5) (964 . 965) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 964 971 nil nil nil t #s(yas--exit 972 nil))) #s(yas--exit 972 nil) 48 nil #s(yas--field 1 964 971 nil nil nil t #s(yas--exit 972 nil)) nil nil)) (960 . 970) (#("zip(${1:other})$0" 0 17 (fontified nil)) . 960) (960 . 977) (#("zip" 0 3 (fontified nil)) . 960) (960 . 963) (#("zip(…) (as Iterator)" 0 20 (fontified nil)) . -960) (960 . 980) (#("zip" 0 3 (fontified t)) . -960) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) 963 (962 . 963) (960 . 962) (959 . 960) (apply yas--snippet-revive 953 959 #s(yas--snippet nil nil #s(yas--exit 959 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 959 nil) 47 nil nil nil nil)) (953 . 959) (#("iter()$0" 0 8 (fontified nil)) . 953) (953 . 961) (#("it" 0 2 (fontified nil)) . 953) (953 . 955) (#("iter()" 0 6 (fontified nil)) . -953) (953 . 959) (#("it" 0 2 (fontified t)) . -953) (undo-tree-id1235 . -2) (undo-tree-id1236 . -2) 955 (952 . 955) (940 . 952) (#("tr" 0 2 (fontified nil)) . 940) (940 . 942) (#("train_images" 0 12 (fontified nil)) . -940) (940 . 952) (#("tr" 0 2 (fontified t)) . -940) (undo-tree-id1237 . -2) (undo-tree-id1238 . -2) 942 (940 . 942)) nil (25661 22206 703442 648000) 0 nil])
([nil nil ((983 . 989) (#("a" 0 1 (fontified t)) . -983) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (#("g" 0 1 (fontified t)) . -984) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("e" 0 1 (fontified t)) . -985) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#("," 0 1 (fontified t)) . -986) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) 987 (981 . 987) (980 . 982) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -980) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (#("h" 0 1 (fontified t face font-lock-variable-name-face)) . -981) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -982) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -983) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -984) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#(" " 0 1 (fontified t)) . -985) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (#("=" 0 1 (fontified t)) . -986) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#(" " 0 1 (fontified t)) . -987) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) 988 (976 . 988) (975 . 976) (976 . 980) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 975) (975 . 976) (974 . 976) (972 . 975) (apply yas--snippet-revive 960 972 #s(yas--snippet nil (#s(yas--field 1 964 971 nil nil nil t #s(yas--exit 972 nil))) #s(yas--exit 972 nil) 48 nil #s(yas--field 1 964 971 nil nil nil t #s(yas--exit 972 nil)) nil nil))) nil (25661 22206 703427 936000) 0 nil])
([nil nil ((999 . 1001) (998 . 999) (993 . 998) (#("th" 0 2 (fontified nil)) . 993) (993 . 995) (#("thing" 0 5 (fontified nil)) . -993) (993 . 998) (#("th" 0 2 (fontified t)) . -993) (undo-tree-id1200 . -2) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) 995 (990 . 995)) nil (25661 22206 703410 466000) 0 nil])
([nil nil ((922 . 1011) (#("
    for thing in train_images.iter().zip(trn_lbl) {
	let (img, lbl) = thing;
	
    }
" 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 31 (fontified t) 31 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 38 (fontified t) 38 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 67 (fontified t) 67 68 (fontified t face (rainbow-delimiters-depth-3-face)) 68 71 (fontified t) 71 79 (fontified t) 79 80 (fontified t) 80 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-2-face)) 85 86 (fontified t)) . 922) (undo-tree-id958 . 7) (undo-tree-id959 . -86) (undo-tree-id960 . -86) (undo-tree-id961 . -42) (undo-tree-id962 . -76) (undo-tree-id963 . -76) (undo-tree-id964 . -76) (undo-tree-id965 . -76) (undo-tree-id966 . -76) (undo-tree-id967 . -76) (undo-tree-id968 . -76) (undo-tree-id969 . -77) (undo-tree-id970 . -77) (undo-tree-id971 . -77) (undo-tree-id972 . -77) (undo-tree-id973 . -77) (undo-tree-id974 . -77) (undo-tree-id975 . -77) (undo-tree-id976 . -77) (undo-tree-id977 . -77) (undo-tree-id978 . -77) (undo-tree-id979 . -77) (undo-tree-id980 . -77) (undo-tree-id981 . -77) (undo-tree-id982 . -77) (undo-tree-id983 . -77) (undo-tree-id984 . -77) (undo-tree-id985 . -77) (undo-tree-id986 . -77) (undo-tree-id987 . -77) (undo-tree-id988 . -77) (undo-tree-id989 . -77) (undo-tree-id990 . -77) (undo-tree-id991 . -77) (undo-tree-id992 . -77) (undo-tree-id993 . -77) (undo-tree-id994 . -77) (undo-tree-id995 . -77) (undo-tree-id996 . -77) (undo-tree-id997 . -77) (undo-tree-id998 . -77) (undo-tree-id999 . -77) (undo-tree-id1000 . -77) (undo-tree-id1001 . -77) (undo-tree-id1002 . -77) (undo-tree-id1003 . -77) (undo-tree-id1004 . -77) (undo-tree-id1005 . -77) (undo-tree-id1006 . -77) (undo-tree-id1007 . -77) (undo-tree-id1008 . -77) (undo-tree-id1009 . -77) (undo-tree-id1010 . -77) (undo-tree-id1011 . -77) (undo-tree-id1012 . -77) (undo-tree-id1013 . -77) (undo-tree-id1014 . -77) (undo-tree-id1015 . -77) (undo-tree-id1016 . -77) (undo-tree-id1017 . -77) (undo-tree-id1018 . -77) (undo-tree-id1019 . -77) (undo-tree-id1020 . -77) (undo-tree-id1021 . -77) (undo-tree-id1022 . -77) (undo-tree-id1023 . -77) (undo-tree-id1024 . -77) (undo-tree-id1025 . -77) (undo-tree-id1026 . 9) (undo-tree-id1027 . -79) (undo-tree-id1028 . -79) (undo-tree-id1029 . -79) (undo-tree-id1030 . -79) (undo-tree-id1031 . -79) (undo-tree-id1032 . -79) (undo-tree-id1033 . -79) (undo-tree-id1034 . -79) (undo-tree-id1035 . -79) (undo-tree-id1036 . -79) (undo-tree-id1037 . -79) (undo-tree-id1038 . -79) (undo-tree-id1039 . -79) (undo-tree-id1040 . -79) (undo-tree-id1041 . -79) (undo-tree-id1042 . -79) (undo-tree-id1043 . -79) (undo-tree-id1044 . -79) (undo-tree-id1045 . -79) (undo-tree-id1046 . -79) (undo-tree-id1047 . -79) (undo-tree-id1048 . -79) (undo-tree-id1049 . -79) (undo-tree-id1050 . -79) (undo-tree-id1051 . -79) (undo-tree-id1052 . -79) (undo-tree-id1053 . -79) (undo-tree-id1054 . -79) (undo-tree-id1055 . -79) (undo-tree-id1056 . -79) (undo-tree-id1057 . -79) (undo-tree-id1058 . -79) (undo-tree-id1059 . -79) (undo-tree-id1060 . -79) (undo-tree-id1061 . -79) (undo-tree-id1062 . -79) (undo-tree-id1063 . -79) (undo-tree-id1064 . -79) (undo-tree-id1065 . -79) (undo-tree-id1066 . -79) (undo-tree-id1067 . -79) (undo-tree-id1068 . -79) (undo-tree-id1069 . -79) (undo-tree-id1070 . -79) (undo-tree-id1071 . -79) (undo-tree-id1072 . -78) (undo-tree-id1073 . -78) (undo-tree-id1074 . -78) (undo-tree-id1075 . -78) (undo-tree-id1076 . -78) (undo-tree-id1077 . -78) (undo-tree-id1078 . -78) (undo-tree-id1079 . -78) (undo-tree-id1080 . -78) (undo-tree-id1081 . -78) (undo-tree-id1082 . -78) (undo-tree-id1083 . -78) (undo-tree-id1084 . -78) (undo-tree-id1085 . -78) (undo-tree-id1086 . -78) (undo-tree-id1087 . -78) (undo-tree-id1088 . -78) (undo-tree-id1089 . -78) (undo-tree-id1090 . -78) (undo-tree-id1091 . -78) (undo-tree-id1092 . -78) (undo-tree-id1093 . -78) (undo-tree-id1094 . -78) (undo-tree-id1095 . -78) (undo-tree-id1096 . -78) (undo-tree-id1097 . -78) (undo-tree-id1098 . -78) (undo-tree-id1099 . -78) (undo-tree-id1100 . -78) (undo-tree-id1101 . -78) (undo-tree-id1102 . -78) (undo-tree-id1103 . -78) (undo-tree-id1104 . -78) (undo-tree-id1105 . -78) (undo-tree-id1106 . -78) (undo-tree-id1107 . -78) (undo-tree-id1108 . -78) (undo-tree-id1109 . -78) (undo-tree-id1110 . -78) (undo-tree-id1111 . -78) (undo-tree-id1112 . -78) (undo-tree-id1113 . -78) (undo-tree-id1114 . -78) (undo-tree-id1115 . -78) (undo-tree-id1116 . -78) (undo-tree-id1117 . -78) (undo-tree-id1118 . -78) (undo-tree-id1119 . -78) (undo-tree-id1120 . -78) (undo-tree-id1121 . -78) (undo-tree-id1122 . -78) (undo-tree-id1123 . -78) (undo-tree-id1124 . -78) (undo-tree-id1125 . -78) (undo-tree-id1126 . -78) (undo-tree-id1127 . -78) (undo-tree-id1128 . -78) (undo-tree-id1129 . -78) (undo-tree-id1130 . -78) (undo-tree-id1131 . -78) (undo-tree-id1132 . -78) (undo-tree-id1133 . -78) (undo-tree-id1134 . -78) (undo-tree-id1135 . -78) (undo-tree-id1136 . -78) (undo-tree-id1137 . -78) (undo-tree-id1138 . -78) (undo-tree-id1139 . -78) (undo-tree-id1140 . -78) (undo-tree-id1141 . -78) (undo-tree-id1142 . -78) (undo-tree-id1143 . -78) (undo-tree-id1144 . -78) (undo-tree-id1145 . -78) (undo-tree-id1146 . -78) (undo-tree-id1147 . -78) (undo-tree-id1148 . -78) (undo-tree-id1149 . -78) (undo-tree-id1150 . -78) (undo-tree-id1151 . -78) (undo-tree-id1152 . -78) (undo-tree-id1153 . -78) (undo-tree-id1154 . -78) (undo-tree-id1155 . -78) (undo-tree-id1156 . -78) (undo-tree-id1157 . -78) (undo-tree-id1158 . -78) (undo-tree-id1159 . -78) (undo-tree-id1160 . -78) (undo-tree-id1161 . -78) (undo-tree-id1162 . -78) (undo-tree-id1163 . -78) (undo-tree-id1164 . -78) (undo-tree-id1165 . -78) (undo-tree-id1166 . -78) (undo-tree-id1167 . -78) (undo-tree-id1168 . -78) (undo-tree-id1169 . -78) (undo-tree-id1170 . -78) (undo-tree-id1171 . -78) (undo-tree-id1172 . -78) (undo-tree-id1173 . -78) (undo-tree-id1174 . -78) (undo-tree-id1175 . -78) (undo-tree-id1176 . -78) (undo-tree-id1177 . -78) (undo-tree-id1178 . -78) (undo-tree-id1179 . -78) (undo-tree-id1180 . -78) (undo-tree-id1181 . -78) (undo-tree-id1182 . -78) (undo-tree-id1183 . -78) (undo-tree-id1184 . -78) (undo-tree-id1185 . -78) (undo-tree-id1186 . -78) (undo-tree-id1187 . -78) (undo-tree-id1188 . -78) (undo-tree-id1189 . -78) (undo-tree-id1190 . -78) (undo-tree-id1191 . -78) (undo-tree-id1192 . -78) (undo-tree-id1193 . -78) (undo-tree-id1194 . -78) (undo-tree-id1195 . -78) (undo-tree-id1196 . -78) (undo-tree-id1197 . -78) (undo-tree-id1198 . -78) (undo-tree-id1199 . -78)) nil (25661 22206 703395 683000) 0 nil])
([nil nil ((#("thing " 0 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t)) . 930) (undo-tree-id1274 . -5) (t 25661 22206 716292 56000)) nil (25661 22218 198480 353000) 0 nil])
([nil nil ((934 . 939) (931 . 934) (930 . 932)) nil (25661 22218 198478 268000) 0 nil])
([nil nil ((940 . 941)) nil (25661 22218 198477 26000) 0 nil])
([nil nil ((#("        let (img, lbl) = thing;
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 32 (fontified t)) . 979) (undo-tree-id1272 . -31) (undo-tree-id1273 . -18) 997) nil (25661 22220 148117 894000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -981) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("o" 0 1 (fontified t)) . -982) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) 983 (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -983) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) 984 (981 . 984) (#("i" 0 1 (fontified t)) . -981) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("m" 0 1 (fontified t)) . -982) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) 983 (981 . 983) (980 . 981) (#("	" 0 1 (fontified nil)) . 979) (undo-tree-id1369 . -1) (978 . 981)) nil (25661 22254 35949 764000) 0 nil] [nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 978) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1)) ((978 . 983) (t 25661 22218 209753 152000)) (25661 22218 198468 559000) 0 nil])
([nil nil ((983 . 984) (#("n" 0 1 (fontified nil)) . 983) (982 . 983) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 982 984 nil nil nil t #s(yas--exit 985 nil))) #s(yas--exit 985 nil) 49 nil #s(yas--field 1 982 984 nil nil nil t #s(yas--exit 985 nil)) nil nil)) (977 . 984) (#("take(${1:n})$0" 0 14 (fontified nil)) . 977) (977 . 991) (#("ta" 0 2 (fontified nil)) . 977) (977 . 979) (#("take(…) (as Iterator)" 0 21 (fontified nil)) . -977) (977 . 998) (#("ta" 0 2 (fontified t)) . -977) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) 979 (976 . 979)) nil (25661 22254 35941 154000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 977 985 #s(yas--snippet nil (#s(yas--field 1 982 984 nil nil nil t #s(yas--exit 985 nil))) #s(yas--exit 985 nil) 49 nil #s(yas--field 1 982 984 nil nil nil t #s(yas--exit 985 nil)) nil nil))) nil (25661 22254 35937 348000) 0 nil])
([nil nil ((1016 . 1019) (#("im" 0 2 (fontified nil)) . 1016) (1016 . 1018) (#("img" 0 3 (fontified nil)) . -1016) (1016 . 1019) (#("im" 0 2 (fontified t)) . -1016) (undo-tree-id1348 . -2) (undo-tree-id1349 . -2) 1018 (1017 . 1018) (#("input" 0 5 (fontified nil)) . 1017) (1016 . 1017) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1016 1019 nil nil nil t #s(yas--exit 1020 nil))) #s(yas--exit 1020 nil) 50 nil #s(yas--field 1 1016 1019 nil nil nil t #s(yas--exit 1020 nil)) nil nil)) (998 . 1022) (#("forward_propagate(${1:input})$0" 0 31 (fontified nil)) . 998) (998 . 1029) (#("fo" 0 2 (fontified nil)) . 998) (998 . 1000) (#("forward_propagate(…)" 0 20 (fontified nil)) . -998) (998 . 1018) (#("fo" 0 2 (fontified t)) . -998) (undo-tree-id1350 . -2) (undo-tree-id1351 . -2) 1000 (999 . 1000) (998 . 999) (997 . 998) (990 . 997) (#("ne" 0 2 (fontified nil)) . 990) (990 . 992) (#("network" 0 7 (fontified nil)) . -990) (990 . 997) (#("ne" 0 2 (fontified t)) . -990) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) 992 (990 . 992) (#("f" 0 1 (fontified t)) . -990) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) 991 (990 . 991) (989 . 990) (#("	" 0 1 (fontified nil)) . 988) (undo-tree-id1356 . -1) (989 . 990) (988 . 989)) nil (25661 22254 35933 489000) 0 nil])
([nil nil ((1020 . 1021) (apply yas--snippet-revive 998 1020 #s(yas--snippet nil (#s(yas--field 1 1016 1019 nil nil nil t #s(yas--exit 1020 nil))) #s(yas--exit 1020 nil) 50 nil #s(yas--field 1 1016 1019 nil nil nil t #s(yas--exit 1020 nil)) nil nil))) nil (25661 22254 35920 742000) 0 nil])
([nil nil ((988 . 1027) (#("
	network.forward_propagate(img);
	" 0 1 (fontified t) 1 2 (fontified t) 2 10 (fontified t) 10 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t)) . 988) (undo-tree-id1275 . 2) (undo-tree-id1276 . -28) (undo-tree-id1277 . -1) (undo-tree-id1278 . -32) (undo-tree-id1279 . -32) (undo-tree-id1280 . -32) (undo-tree-id1281 . -32) (undo-tree-id1282 . -32) (undo-tree-id1283 . -32) (undo-tree-id1284 . -32) (undo-tree-id1285 . -32) (undo-tree-id1286 . -32) (undo-tree-id1287 . -32) (undo-tree-id1288 . -32) (undo-tree-id1289 . -32) (undo-tree-id1290 . -32) (undo-tree-id1291 . -32) (undo-tree-id1292 . -32) (undo-tree-id1293 . -32) (undo-tree-id1294 . -32) (undo-tree-id1295 . -32) (undo-tree-id1296 . -32) (undo-tree-id1297 . -32) (undo-tree-id1298 . -32) (undo-tree-id1299 . -32) (undo-tree-id1300 . -32) (undo-tree-id1301 . -32) (undo-tree-id1302 . -32) (undo-tree-id1303 . -32) (undo-tree-id1304 . -32) (undo-tree-id1305 . -32) (undo-tree-id1306 . -32) (undo-tree-id1307 . -32) (undo-tree-id1308 . -32) (undo-tree-id1309 . -32) (undo-tree-id1310 . -32) (undo-tree-id1311 . -32) (undo-tree-id1312 . -32) (undo-tree-id1313 . -32) (undo-tree-id1314 . -32) (undo-tree-id1315 . -32) (undo-tree-id1316 . -32) (undo-tree-id1317 . -32) (undo-tree-id1318 . -32) (undo-tree-id1319 . -32) (undo-tree-id1320 . -32) (undo-tree-id1321 . -32) (undo-tree-id1322 . -32) (undo-tree-id1323 . -32) (undo-tree-id1324 . -32) (undo-tree-id1325 . -32) (undo-tree-id1326 . -32) (undo-tree-id1327 . -32) (undo-tree-id1328 . -32) (undo-tree-id1329 . -32) (undo-tree-id1330 . -32) (undo-tree-id1331 . -32) (undo-tree-id1332 . -32) (undo-tree-id1333 . -32) (undo-tree-id1334 . -32) (undo-tree-id1335 . -32) (undo-tree-id1336 . -32) (undo-tree-id1337 . -32) (undo-tree-id1338 . -32) (undo-tree-id1339 . -32) (undo-tree-id1340 . -32) (undo-tree-id1341 . -32) (undo-tree-id1342 . -32) (undo-tree-id1343 . -32) (undo-tree-id1344 . -32) (undo-tree-id1345 . -32) (undo-tree-id1346 . -32) (undo-tree-id1347 . -32)) nil (25661 22254 35914 110000) 0 nil])
([nil nil ((1022 . 1023) (t 25661 22254 50151 567000)) nil (25661 22259 872918 544000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 1022) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (t 25661 22259 886883 114000)) nil (25661 22264 661221 523000) 0 nil])
([nil nil ((apply yas--snippet-revive 1026 1033 #s(yas--snippet nil nil #s(yas--exit 1033 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1033 nil) 51 nil nil nil nil)) (1026 . 1033) (#("clone()$0" 0 9 (fontified nil)) . 1026) (1026 . 1035) (#("cl" 0 2 (fontified nil)) . 1026) (1026 . 1028) (#("clone() (as Clone)" 0 18 (fontified nil)) . -1026) (1026 . 1044) (#("cl" 0 2 (fontified t)) . -1026) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) 1028 (1026 . 1028) (1025 . 1026)) nil (25661 22264 661213 949000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1037) (undo-tree-id1378 . -1) 1038 (1037 . 1038) (#("	" 0 1 (fontified nil)) . 1036) (undo-tree-id1379 . -1) (1035 . 1038) (t 25661 22264 673602 990000)) nil (25661 22275 861413 570000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1037) (undo-tree-id1377 . 1)) nil (25661 22275 861409 551000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1036)) nil (25661 22275 861407 971000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1036) (undo-tree-id1376 . -1) 1037 (1035 . 1037)) nil (25661 22275 861406 678000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1036) (undo-tree-id1374 . 1) (undo-tree-id1375 . -1)) nil (25661 22275 861400 898000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1036) (undo-tree-id1381 . -1) 1037 (1035 . 1037) (t 25661 22275 900394 458000)) nil (25661 22627 978041 706000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1036) (undo-tree-id1380 . 1)) nil (25661 22627 978034 281000) 0 nil])
([nil nil ((1004 . 1010) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -1004) (undo-tree-id1405 . -1) 1005 (996 . 1005) (t 25661 22627 987641 688000)) nil (25661 24077 137252 191000) 0 nil])
([nil nil ((#("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 996) (undo-tree-id1382 . -3) (undo-tree-id1383 . -4) (undo-tree-id1384 . -4) (undo-tree-id1385 . -4) (undo-tree-id1386 . -4) (undo-tree-id1387 . -4) (undo-tree-id1388 . -4) (undo-tree-id1389 . -4) (undo-tree-id1390 . -4) (undo-tree-id1391 . -4) (undo-tree-id1392 . -4) (undo-tree-id1393 . -4) (undo-tree-id1394 . -4) (undo-tree-id1395 . -4) (undo-tree-id1396 . -4) (undo-tree-id1397 . -4) (undo-tree-id1398 . -4) (undo-tree-id1399 . -4) (undo-tree-id1400 . -4) (undo-tree-id1401 . -4) (undo-tree-id1402 . -4) (undo-tree-id1403 . -4) (undo-tree-id1404 . -4)) nil (25661 24077 137248 128000) 0 nil])
([nil nil ((875 . 878)) nil (25661 24077 137222 299000) 0 nil])
([nil nil ((878 . 879)) nil (25661 24077 137216 406000) 0 nil])
([nil nil ((apply yas--snippet-revive 1049 1057 #s(yas--snippet nil nil #s(yas--exit 1057 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1057 nil) 74 nil nil nil nil)) (1049 . 1057) (#("unwrap()$0" 0 10 (fontified nil)) . 1049) (1049 . 1059) (#("u" 0 1 (fontified nil)) . 1049) (1049 . 1050) (#("unwrap()" 0 8 (fontified nil)) . -1049) (1049 . 1057) (#("u" 0 1 (fontified t)) . -1049) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) 1050 (1048 . 1050) (t 25661 24077 149359 57000)) nil (25661 24107 610974 288000) 0 nil])
([nil nil ((1087 . 1090) (#("l" 0 1 (fontified nil)) . 1087) (1087 . 1088) (#("lbl" 0 3 (fontified nil)) . -1087) (1087 . 1090) (#("l" 0 1 (fontified t)) . -1087) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 1088 (#("correct_lbl" 0 11 (fontified nil)) . 1088) (1087 . 1088) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1087 1090 nil nil nil t #s(yas--field 2 1092 1099 nil nil nil nil #s(yas--exit 1100 nil))) #s(yas--field 2 1092 1099 nil nil nil nil #s(yas--exit 1100 nil))) #s(yas--exit 1100 nil) 75 nil #s(yas--field 2 1092 1099 nil nil nil nil #s(yas--exit 1100 nil)) nil nil)) (1078 . 1108) (#("backprop(${1:correct_lbl}, ${2:epsilon})$0" 0 42 (fontified nil)) . 1078) (1078 . 1120) (#("ba" 0 2 (fontified nil)) . 1078) (1078 . 1080) (#("backprop(…)" 0 11 (fontified nil)) . -1078) (1078 . 1089) (#("ba" 0 2 (fontified t)) . -1078) (undo-tree-id1431 . -2) (undo-tree-id1432 . -2) 1080 (1077 . 1080) (1070 . 1077) (#("ne" 0 2 (fontified nil)) . 1070) (1070 . 1072) (#("network" 0 7 (fontified nil)) . -1070) (1070 . 1077) (#("ne" 0 2 (fontified t)) . -1070) (undo-tree-id1433 . -2) (undo-tree-id1434 . -2) 1072 (1067 . 1072) (1060 . 1067) (#("ne" 0 2 (fontified nil)) . 1060) (1060 . 1062) (#("network" 0 7 (fontified nil)) . -1060) (1060 . 1067) (#("ne" 0 2 (fontified t)) . -1060) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) 1062 (1060 . 1062) (1058 . 1060) (t 25661 24107 622924 784000)) nil (25661 24162 149643 313000) 0 nil])
([nil nil ((apply yas--snippet-revive 1078 1100 #s(yas--snippet nil (#s(yas--field 1 1087 1090 nil nil nil t #s(yas--field 2 1092 1099 nil nil nil nil #s(yas--exit 1100 nil))) #s(yas--field 2 1092 1099 nil nil nil nil #s(yas--exit 1100 nil))) #s(yas--exit 1100 nil) 75 nil #s(yas--field 2 1092 1099 nil nil nil nil #s(yas--exit 1100 nil)) nil nil))) nil (25661 24162 149631 415000) 0 nil])
([nil nil ((1642 . 1645) (1639 . 1642) (#("f" 0 1 (fontified nil)) . 1639) (1639 . 1640) (#("f64" 0 3 (fontified nil)) . -1639) (1639 . 1642) (#("f" 0 1 (fontified t)) . -1639) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) 1640 (1636 . 1640) (1624 . 1636) (#("E" 0 1 (fontified t face font-lock-type-face)) . -1624) (undo-tree-id1427 . -1) (#("P" 0 1 (fontified t face font-lock-type-face)) . -1625) (undo-tree-id1428 . -1) 1626 (1624 . 1626) (1623 . 1624)) nil (25661 24162 149629 184000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1649 . 1650) (nil fontified nil 1645 . 1650) (1645 . 1650) 1644) nil (25661 24162 149624 123000) 0 nil])
([nil nil ((1650 . 1651)) nil (25661 24162 149622 457000) 0 nil])
([nil nil ((1059 . 1651) (#("	network = network.backprop(lbl, epsilon)
    }
}

fn getputput_matrix(data: u8) -> ArrayBase<OwnedRepr<f64>, Dim<[usize; 2]>> {
    let mut outtest = vec![0.0; 10];
    outtest[data as usize] = 1.0;
    Array::from_shape_vec((1, 10), outtest).unwrap()
}

fn print_image(train_image: &ArrayBase<OwnedRepr<f64>, Dim<[usize; 2]>>) {
    for i in 0..28 {
        for j in 0..28 {
            if train_image[[0, i * 28 + j]] == 0.0 {
                print!(\" \");
            } else {
                print!(\"#\");
            }
        }

        print!(\"\\n\");
    }
}

const EPSILON: f64 = " 0 1 (fontified t) 1 11 (fontified t) 11 19 (fontified t) 19 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 31 (fontified t) 31 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-1-face)) 49 50 (fontified t) 50 51 (fontified t) 51 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 70 (fontified t face font-lock-function-name-face) 70 71 (fontified t face (rainbow-delimiters-depth-1-face)) 71 75 (fontified t face font-lock-variable-name-face) 75 77 (fontified t) 77 79 (fontified t face font-lock-type-face) 79 80 (fontified t face (rainbow-delimiters-depth-1-face)) 80 82 (fontified t) 82 83 (syntax-table (1) fontified t) 83 84 (fontified t) 84 93 (fontified t face font-lock-type-face) 93 94 (fontified t face (rainbow-delimiters-depth-1-face)) 94 103 (fontified t face font-lock-type-face) 103 104 (fontified t face (rainbow-delimiters-depth-2-face)) 104 107 (fontified t face font-lock-type-face) 107 108 (fontified t face (rainbow-delimiters-depth-2-face)) 108 110 (fontified t) 110 113 (fontified t face font-lock-type-face) 113 114 (fontified t face (rainbow-delimiters-depth-2-face)) 114 115 (fontified t face (rainbow-delimiters-depth-3-face)) 115 120 (fontified t face font-lock-type-face) 120 123 (fontified t) 123 124 (fontified t face (rainbow-delimiters-depth-3-face)) 124 125 (fontified t face (rainbow-delimiters-depth-2-face)) 125 126 (fontified t face (rainbow-delimiters-depth-1-face)) 126 127 (fontified t) 127 128 (fontified t face (rainbow-delimiters-depth-1-face)) 128 129 (fontified t) 129 133 (fontified t) 133 136 (fontified t face font-lock-keyword-face) 136 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 148 (fontified t face font-lock-variable-name-face) 148 151 (fontified t) 151 155 (fontified t face font-lock-preprocessor-face) 155 156 (fontified t face (rainbow-delimiters-depth-2-face)) 156 163 (fontified t) 163 164 (fontified t face (rainbow-delimiters-depth-2-face)) 164 177 (fontified t) 177 178 (fontified t face (rainbow-delimiters-depth-2-face)) 178 183 (fontified t) 183 185 (fontified t face font-lock-keyword-face) 185 186 (fontified t) 186 191 (fontified t face font-lock-type-face) 191 192 (fontified t face (rainbow-delimiters-depth-2-face)) 192 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 225 (fontified t) 225 226 (fontified t face (rainbow-delimiters-depth-2-face)) 226 227 (fontified t face (rainbow-delimiters-depth-3-face)) 227 232 (fontified t) 232 233 (fontified t face (rainbow-delimiters-depth-3-face)) 233 242 (fontified t) 242 243 (fontified t face (rainbow-delimiters-depth-2-face)) 243 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-2-face)) 251 252 (fontified t face (rainbow-delimiters-depth-2-face)) 252 253 (fontified t) 253 254 (fontified t face (rainbow-delimiters-depth-1-face)) 254 255 (fontified t) 255 256 (fontified t) 256 258 (fontified t face font-lock-keyword-face) 258 259 (fontified t) 259 270 (fontified t face font-lock-function-name-face) 270 271 (fontified t face (rainbow-delimiters-depth-1-face)) 271 282 (fontified t face font-lock-variable-name-face) 282 284 (fontified t) 284 285 (fontified t face rust-ampersand-face) 285 294 (fontified t face font-lock-type-face) 294 295 (fontified t face (rainbow-delimiters-depth-2-face)) 295 304 (fontified t face font-lock-type-face) 304 305 (fontified t face (rainbow-delimiters-depth-3-face)) 305 308 (fontified t face font-lock-type-face) 308 309 (fontified t face (rainbow-delimiters-depth-3-face)) 309 311 (fontified t) 311 314 (fontified t face font-lock-type-face) 314 315 (fontified t face (rainbow-delimiters-depth-3-face)) 315 316 (fontified t face (rainbow-delimiters-depth-4-face)) 316 321 (fontified t face font-lock-type-face) 321 324 (fontified t) 324 325 (fontified t face (rainbow-delimiters-depth-4-face)) 325 326 (fontified t face (rainbow-delimiters-depth-3-face)) 326 327 (fontified t face (rainbow-delimiters-depth-2-face)) 327 328 (fontified t face (rainbow-delimiters-depth-1-face)) 328 329 (fontified t) 329 330 (fontified t face (rainbow-delimiters-depth-1-face)) 330 335 (fontified t) 335 338 (fontified t face font-lock-keyword-face) 338 339 (fontified t) 339 340 (fontified t face font-lock-variable-name-face) 340 341 (fontified t) 341 343 (fontified t face font-lock-keyword-face) 343 350 (fontified t) 350 351 (fontified t face (rainbow-delimiters-depth-2-face)) 351 360 (fontified t) 360 363 (fontified t face font-lock-keyword-face) 363 364 (fontified t) 364 365 (fontified t face font-lock-variable-name-face) 365 366 (fontified t) 366 368 (fontified t face font-lock-keyword-face) 368 375 (fontified t) 375 376 (fontified t face (rainbow-delimiters-depth-3-face)) 376 389 (fontified t) 389 391 (fontified t face font-lock-keyword-face) 391 403 (fontified t) 403 404 (fontified t face (rainbow-delimiters-depth-4-face)) 404 405 (fontified t face (rainbow-delimiters-depth-5-face)) 405 418 (fontified t) 418 419 (fontified t face (rainbow-delimiters-depth-5-face)) 419 420 (fontified t face (rainbow-delimiters-depth-4-face)) 420 428 (fontified t) 428 429 (fontified t face (rainbow-delimiters-depth-4-face)) 429 446 (fontified t) 446 452 (fontified t face rust-builtin-formatting-macro) 452 453 (fontified t face (rainbow-delimiters-depth-5-face)) 453 456 (fontified t face font-lock-string-face) 456 457 (fontified t face (rainbow-delimiters-depth-5-face)) 457 471 (fontified t) 471 472 (fontified t face (rainbow-delimiters-depth-4-face)) 472 473 (fontified t) 473 477 (fontified t face font-lock-keyword-face) 477 478 (fontified t) 478 479 (fontified t face (rainbow-delimiters-depth-4-face)) 479 496 (fontified t) 496 502 (fontified t face rust-builtin-formatting-macro) 502 503 (fontified t face (rainbow-delimiters-depth-5-face)) 503 506 (fontified t face font-lock-string-face) 506 507 (fontified t face (rainbow-delimiters-depth-5-face)) 507 521 (fontified t) 521 522 (fontified t face (rainbow-delimiters-depth-4-face)) 522 531 (fontified t) 531 532 (fontified t face (rainbow-delimiters-depth-3-face)) 532 542 (fontified t) 542 548 (fontified t face rust-builtin-formatting-macro) 548 549 (fontified t face (rainbow-delimiters-depth-3-face)) 549 553 (fontified t face font-lock-string-face) 553 554 (fontified t face (rainbow-delimiters-depth-3-face)) 554 560 (fontified t) 560 561 (fontified t face (rainbow-delimiters-depth-2-face)) 561 562 (fontified t) 562 563 (fontified t face (rainbow-delimiters-depth-1-face)) 563 564 (rear-nonsticky t fontified t) 564 565 (fontified t) 565 570 (fontified t face font-lock-keyword-face) 570 571 (fontified t) 571 578 (fontified t face font-lock-variable-name-face) 578 580 (fontified t) 580 583 (fontified t face font-lock-type-face) 583 586 (fontified t)) . 1059) (undo-tree-id1408 . -586) (undo-tree-id1409 . -586) (undo-tree-id1410 . -166) (undo-tree-id1411 . -586) (undo-tree-id1412 . -51) (undo-tree-id1413 . -51) (undo-tree-id1414 . -51) (undo-tree-id1415 . -51) (undo-tree-id1416 . -51) (undo-tree-id1417 . -564) (undo-tree-id1418 . -28) (undo-tree-id1419 . -586) (undo-tree-id1420 . -586) (undo-tree-id1421 . -586) (undo-tree-id1422 . -586) (undo-tree-id1423 . -565) (undo-tree-id1424 . -166) (1651 . 1652)) nil (25661 24162 149617 188000) 0 nil])
([nil nil ((#("epsilon" 0 7 (fontified t)) . 1099) (undo-tree-id1465 . -6) (t 25661 24162 163352 738000)) nil (25661 24177 212879 739000) 0 nil])
([nil nil ((1099 . 1106) (#("E" 0 1 (fontified nil)) . 1099) (1099 . 1100) (#("EPSILON" 0 7 (fontified nil)) . -1099) (1099 . 1106) (#("E" 0 1 (fontified t face font-lock-type-face)) . -1099) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) 1100 (1099 . 1100) (#("e" 0 1 (fontified t)) . -1099) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (#("p" 0 1 (fontified t)) . -1100) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (#("r" 0 1 (fontified t)) . -1101) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("i" 0 1 (fontified t)) . -1102) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (#("n" 0 1 (fontified t)) . -1103) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("t" 0 1 (fontified t)) . -1104) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (#("!" 0 1 (fontified t)) . -1105) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) 1106 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -1106) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 1107) (apply yas--snippet-revive 1099 1108 #s(yas--snippet nil nil #s(yas--exit 1107 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1107 nil) 76 nil nil nil nil)) (1099 . 1108) (#("eprint!($0)" 0 11 (fontified nil)) . 1099) (1099 . 1110) (#("ep" 0 2 (fontified nil)) . 1099) (1099 . 1101) (#("eprint!(…)" 0 10 (fontified nil)) . -1099) (1099 . 1109) (#("ep" 0 2 (fontified t)) . -1099) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) 1101 (1100 . 1101) (1099 . 1100)) nil (25661 24177 212871 380000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -1108) (undo-tree-id1600 . -5) (undo-tree-id1601 . -5) (undo-tree-id1602 . -5) (undo-tree-id1603 . -5) (undo-tree-id1604 . -5) (undo-tree-id1605 . -5) (undo-tree-id1606 . -5) (undo-tree-id1607 . -5) (undo-tree-id1608 . -5) (undo-tree-id1609 . -5) (undo-tree-id1610 . -5) (undo-tree-id1611 . -5) (undo-tree-id1612 . -5) (undo-tree-id1613 . -5) (undo-tree-id1614 . -5) (undo-tree-id1615 . -5) (undo-tree-id1616 . -5) (undo-tree-id1617 . -5) (undo-tree-id1618 . -5) (undo-tree-id1619 . -5) (undo-tree-id1620 . -5) (undo-tree-id1621 . -5) (undo-tree-id1622 . -5) (undo-tree-id1623 . -5) (undo-tree-id1624 . -5) (undo-tree-id1625 . -5) (undo-tree-id1626 . -5) (undo-tree-id1627 . -5) (undo-tree-id1628 . -5) (undo-tree-id1629 . -5) (undo-tree-id1630 . -5) (undo-tree-id1631 . -5) (undo-tree-id1632 . -5) (undo-tree-id1633 . -5) (undo-tree-id1634 . -5) (undo-tree-id1635 . -5) (undo-tree-id1636 . -5) (undo-tree-id1637 . -5) (undo-tree-id1638 . -5) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -5) (undo-tree-id1642 . -5) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) (undo-tree-id1645 . -5) (undo-tree-id1646 . -5) (undo-tree-id1647 . -5) (undo-tree-id1648 . -5) (undo-tree-id1649 . -5) (undo-tree-id1650 . -5) (undo-tree-id1651 . -5) (undo-tree-id1652 . -5) (undo-tree-id1653 . -5) (undo-tree-id1654 . -5) (undo-tree-id1655 . -5) (undo-tree-id1656 . -5) (undo-tree-id1657 . -5) (undo-tree-id1658 . -5) (undo-tree-id1659 . -5) (undo-tree-id1660 . -5) (undo-tree-id1661 . -5) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) (undo-tree-id1664 . -5) (undo-tree-id1665 . -5) (undo-tree-id1666 . -5) (undo-tree-id1667 . -5) (undo-tree-id1668 . -5) (undo-tree-id1669 . -5) (undo-tree-id1670 . -5) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -5) (undo-tree-id1674 . -5) (undo-tree-id1675 . -5) (undo-tree-id1676 . -5) (undo-tree-id1677 . -5) (undo-tree-id1678 . -5) (undo-tree-id1679 . -5) (undo-tree-id1680 . -5) (undo-tree-id1681 . -5) (undo-tree-id1682 . -5) (undo-tree-id1683 . -5) (undo-tree-id1684 . -5) (undo-tree-id1685 . -5) (undo-tree-id1686 . -5) (undo-tree-id1687 . -5) (undo-tree-id1688 . -5) (undo-tree-id1689 . -5) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (undo-tree-id1692 . -5) (undo-tree-id1693 . -5) (undo-tree-id1694 . -5) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -5) 1113 (1107 . 1113) (t 25661 24177 226806 811000)) nil (25661 24185 330753 491000) 0 nil])
([nil nil ((1108 . 1113)) nil (25661 24185 330665 749000) 0 nil])
([nil nil ((#("	    
" 0 5 (fontified t) 5 6 (fontified t)) . 1108) (undo-tree-id1466 . 1) (undo-tree-id1467 . -5) (undo-tree-id1468 . -4) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5) (undo-tree-id1472 . -5) (undo-tree-id1473 . -5) (undo-tree-id1474 . -5) (undo-tree-id1475 . -5) (undo-tree-id1476 . -5) (undo-tree-id1477 . -5) (undo-tree-id1478 . -5) (undo-tree-id1479 . -5) (undo-tree-id1480 . -5) (undo-tree-id1481 . -5) (undo-tree-id1482 . -5) (undo-tree-id1483 . -5) (undo-tree-id1484 . -5) (undo-tree-id1485 . -5) (undo-tree-id1486 . -5) (undo-tree-id1487 . -5) (undo-tree-id1488 . -5) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) (undo-tree-id1492 . -5) (undo-tree-id1493 . -5) (undo-tree-id1494 . -5) (undo-tree-id1495 . -5) (undo-tree-id1496 . -5) (undo-tree-id1497 . -5) (undo-tree-id1498 . -5) (undo-tree-id1499 . -5) (undo-tree-id1500 . -5) (undo-tree-id1501 . -5) (undo-tree-id1502 . -5) (undo-tree-id1503 . -5) (undo-tree-id1504 . -5) (undo-tree-id1505 . -5) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) (undo-tree-id1509 . -5) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (undo-tree-id1512 . -5) (undo-tree-id1513 . -5) (undo-tree-id1514 . -5) (undo-tree-id1515 . -5) (undo-tree-id1516 . -5) (undo-tree-id1517 . -5) (undo-tree-id1518 . -5) (undo-tree-id1519 . -5) (undo-tree-id1520 . -5) (undo-tree-id1521 . -5) (undo-tree-id1522 . -5) (undo-tree-id1523 . -5) (undo-tree-id1524 . -5) (undo-tree-id1525 . -5) (undo-tree-id1526 . -5) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -5) (undo-tree-id1534 . -5) (undo-tree-id1535 . -5) (undo-tree-id1536 . -5) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -4) (undo-tree-id1544 . -4) (undo-tree-id1545 . -4) (undo-tree-id1546 . -4) (undo-tree-id1547 . -4) (undo-tree-id1548 . -4) (undo-tree-id1549 . -4) (undo-tree-id1550 . -4) (undo-tree-id1551 . -4) (undo-tree-id1552 . -4) (undo-tree-id1553 . -4) (undo-tree-id1554 . -4) (undo-tree-id1555 . -4) (undo-tree-id1556 . -4) (undo-tree-id1557 . -4) (undo-tree-id1558 . -4) (undo-tree-id1559 . -4) (undo-tree-id1560 . -4) (undo-tree-id1561 . -4) (undo-tree-id1562 . -4) (undo-tree-id1563 . -4) (undo-tree-id1564 . -4) (undo-tree-id1565 . -4) (undo-tree-id1566 . -4) (undo-tree-id1567 . -4) (undo-tree-id1568 . -4) (undo-tree-id1569 . -4) (undo-tree-id1570 . -4) (undo-tree-id1571 . -4) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -4) (undo-tree-id1575 . -4) (undo-tree-id1576 . -4) (undo-tree-id1577 . -4) (undo-tree-id1578 . -4) (undo-tree-id1579 . -4) (undo-tree-id1580 . -4) (undo-tree-id1581 . -4) (undo-tree-id1582 . -4) (undo-tree-id1583 . -4) (undo-tree-id1584 . -4) (undo-tree-id1585 . -4) (undo-tree-id1586 . -4) (undo-tree-id1587 . -4) (undo-tree-id1588 . -4) (undo-tree-id1589 . -4) (undo-tree-id1590 . -4) (undo-tree-id1591 . -4) (undo-tree-id1592 . -4) (undo-tree-id1593 . -4) (undo-tree-id1594 . -4) (undo-tree-id1595 . -4) (undo-tree-id1596 . -4) (undo-tree-id1597 . -4) (undo-tree-id1598 . -4) (undo-tree-id1599 . -6) 1112) nil (25661 24185 330659 953000) 0 nil])
([nil nil ((1107 . 1108)) nil (25661 24185 330537 564000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1116) (undo-tree-id1864 . -4) 1120 (1116 . 1120) (#("    " 0 4 (fontified nil)) . 1115) (undo-tree-id1865 . -4) (1114 . 1120) (t 25661 24185 343538 970000)) nil (25661 24225 618956 951000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1116) (undo-tree-id1863 . 1)) nil (25661 24225 618954 386000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1115)) nil (25661 24225 618953 84000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1118) (undo-tree-id1859 . -4) 1122 (1118 . 1122) (#("    " 0 4 (fontified nil)) . 1117) (undo-tree-id1860 . -4) (1117 . 1122) (#("    " 0 4 (fontified nil)) . 1116) (undo-tree-id1861 . -4) (1116 . 1121) (#("    " 0 4 (fontified nil)) . 1115) (undo-tree-id1862 . -4) (1114 . 1120)) nil (25661 24225 618951 126000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1833 . 1834) (nil fontified nil 1117 . 1834) (1117 . 1834)) nil (25661 24225 618946 992000) 0 nil])
([nil nil ((1116 . 1831) (#("
    let mut test_image = Vec::new();
    for chunks in tst_img.chunks(first) {
        let image_matrix = Array::from_shape_vec((1, first), chunks.to_vec())
            .unwrap()
            .map(|x| *x as f64 / 256.0);
        test_image.push(image_matrix);
    }

    let mut corrects = 0.0;

    for thing in test_image.iter().zip(tst_lbl).take(300) {
        let (img, lbl) = thing;

        match network.predict(img.clone()) {
            Some(i) => {
                if i == lbl {
                    corrects += 1.0;
                }
            }
            None => println!(\"failled\"),
        }
    }

    let percentage = (corrects * 100.0) / 300.0;
    println!(\"works {} % of the time\", percentage);


" 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-variable-name-face) 23 26 (fontified t) 26 29 (fontified t face font-lock-type-face) 29 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 42 (fontified t) 42 45 (fontified t face font-lock-keyword-face) 45 46 (fontified t) 46 52 (fontified t face font-lock-variable-name-face) 52 53 (fontified t) 53 55 (fontified t face font-lock-keyword-face) 55 70 (fontified t) 70 71 (fontified t face (rainbow-delimiters-depth-2-face)) 71 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 88 (fontified t) 88 91 (fontified t face font-lock-keyword-face) 91 92 (fontified t) 92 104 (fontified t face font-lock-variable-name-face) 104 107 (fontified t) 107 112 (fontified t face font-lock-type-face) 112 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 130 (fontified t face (rainbow-delimiters-depth-4-face)) 130 138 (fontified t) 138 139 (fontified t face (rainbow-delimiters-depth-4-face)) 139 154 (fontified t) 154 155 (fontified t face (rainbow-delimiters-depth-4-face)) 155 156 (fontified t face (rainbow-delimiters-depth-4-face)) 156 157 (fontified t face (rainbow-delimiters-depth-3-face)) 157 177 (fontified t) 177 178 (fontified t face (rainbow-delimiters-depth-3-face)) 178 179 (fontified t face (rainbow-delimiters-depth-3-face)) 179 196 (fontified t) 196 197 (fontified t face (rainbow-delimiters-depth-3-face)) 197 204 (fontified t) 204 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 210 (fontified t face font-lock-type-face) 210 218 (fontified t) 218 219 (fontified t face (rainbow-delimiters-depth-3-face)) 219 244 (fontified t) 244 245 (fontified t face (rainbow-delimiters-depth-3-face)) 245 257 (fontified t) 257 258 (fontified t face (rainbow-delimiters-depth-3-face)) 258 264 (fontified t) 264 265 (fontified t face (rainbow-delimiters-depth-2-face)) 265 271 (fontified t) 271 274 (fontified t face font-lock-keyword-face) 274 275 (fontified t) 275 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 287 (fontified t face font-lock-variable-name-face) 287 300 (fontified t) 300 303 (fontified t face font-lock-keyword-face) 303 304 (fontified t) 304 309 (fontified t face font-lock-variable-name-face) 309 310 (fontified t) 310 312 (fontified t face font-lock-keyword-face) 312 328 (fontified t) 328 329 (fontified t face (rainbow-delimiters-depth-2-face)) 329 330 (fontified t face (rainbow-delimiters-depth-2-face)) 330 334 (fontified t) 334 335 (fontified t face (rainbow-delimiters-depth-2-face)) 335 342 (fontified t) 342 343 (fontified t face (rainbow-delimiters-depth-2-face)) 343 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-2-face)) 349 352 (fontified t) 352 353 (fontified t face (rainbow-delimiters-depth-2-face)) 353 354 (fontified t) 354 355 (fontified t face (rainbow-delimiters-depth-2-face)) 355 364 (fontified t) 364 367 (fontified t face font-lock-keyword-face) 367 368 (fontified t) 368 369 (fontified t face (rainbow-delimiters-depth-3-face)) 369 377 (fontified t) 377 378 (fontified t face (rainbow-delimiters-depth-3-face)) 378 397 (fontified t) 397 402 (fontified t face font-lock-keyword-face) 402 418 (fontified t) 418 419 (fontified t face (rainbow-delimiters-depth-3-face)) 419 428 (fontified t) 428 429 (fontified t face (rainbow-delimiters-depth-4-face)) 429 430 (fontified t face (rainbow-delimiters-depth-4-face)) 430 431 (fontified t face (rainbow-delimiters-depth-3-face)) 431 432 (fontified t) 432 433 (fontified t face (rainbow-delimiters-depth-3-face)) 433 446 (fontified t) 446 450 (fontified t face font-lock-type-face) 450 451 (fontified t face (rainbow-delimiters-depth-4-face)) 451 452 (fontified t) 452 453 (fontified t face (rainbow-delimiters-depth-4-face)) 453 455 (fontified t) 455 456 (fontified t syntax-table (1)) 456 457 (fontified t) 457 458 (fontified t face (rainbow-delimiters-depth-4-face)) 458 475 (fontified t) 475 477 (fontified t face font-lock-keyword-face) 477 487 (fontified t) 487 488 (fontified t face (rainbow-delimiters-depth-5-face)) 488 542 (fontified t) 542 543 (fontified t face (rainbow-delimiters-depth-5-face)) 543 556 (fontified t) 556 557 (fontified t face (rainbow-delimiters-depth-4-face)) 557 570 (fontified t) 570 574 (fontified t face font-lock-type-face) 574 576 (fontified t) 576 577 (fontified t syntax-table (1)) 577 578 (fontified t) 578 586 (fontified t face rust-builtin-formatting-macro) 586 587 (fontified t face (rainbow-delimiters-depth-4-face)) 587 596 (fontified t face font-lock-string-face) 596 597 (fontified t face (rainbow-delimiters-depth-4-face)) 597 607 (fontified t) 607 608 (fontified t face (rainbow-delimiters-depth-3-face)) 608 613 (fontified t) 613 614 (fontified t face (rainbow-delimiters-depth-2-face)) 614 620 (fontified t) 620 623 (fontified t face font-lock-keyword-face) 623 624 (fontified t) 624 634 (fontified t face font-lock-variable-name-face) 634 637 (fontified t) 637 638 (fontified t face (rainbow-delimiters-depth-2-face)) 638 654 (fontified t) 654 655 (fontified t face (rainbow-delimiters-depth-2-face)) 655 669 (fontified t) 669 677 (fontified t face rust-builtin-formatting-macro) 677 678 (fontified t face (rainbow-delimiters-depth-2-face)) 678 685 (fontified t face font-lock-string-face) 685 687 (fontified t face rust-string-interpolation) 687 702 (fontified t face font-lock-string-face) 702 714 (fontified t) 714 715 (fontified t face (rainbow-delimiters-depth-2-face)) 715 717 (fontified t) 717 718 (fontified t rear-nonsticky t) 718 719 (fontified t)) . 1116) (undo-tree-id1699 . -1) (undo-tree-id1700 . -717) (undo-tree-id1701 . -1) (undo-tree-id1702 . -719) (undo-tree-id1703 . -719) (undo-tree-id1704 . -719) (undo-tree-id1705 . -719) (undo-tree-id1706 . -719) (undo-tree-id1707 . -719) (undo-tree-id1708 . -719) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -718) (undo-tree-id1749 . -718) (undo-tree-id1750 . -718) (undo-tree-id1751 . -718) (undo-tree-id1752 . -718) (undo-tree-id1753 . -718) (undo-tree-id1754 . -718) (undo-tree-id1755 . -718) (undo-tree-id1756 . -718) (undo-tree-id1757 . -718) (undo-tree-id1758 . -718) (undo-tree-id1759 . -718) (undo-tree-id1760 . -718) (undo-tree-id1761 . -718) (undo-tree-id1762 . -718) (undo-tree-id1763 . -718) (undo-tree-id1764 . -718) (undo-tree-id1765 . -718) (undo-tree-id1766 . -718) (undo-tree-id1767 . -718) (undo-tree-id1768 . -718) (undo-tree-id1769 . -718) (undo-tree-id1770 . -718) (undo-tree-id1771 . -718) (undo-tree-id1772 . -718) (undo-tree-id1773 . -718) (undo-tree-id1774 . -718) (undo-tree-id1775 . -718) (undo-tree-id1776 . -718) (undo-tree-id1777 . -718) (undo-tree-id1778 . -718) (undo-tree-id1779 . -718) (undo-tree-id1780 . -718) (undo-tree-id1781 . -718) (undo-tree-id1782 . -718) (undo-tree-id1783 . -718) (undo-tree-id1784 . -718) (undo-tree-id1785 . -718) (undo-tree-id1786 . -718) (undo-tree-id1787 . -718) (undo-tree-id1788 . -718) (undo-tree-id1789 . -718) (undo-tree-id1790 . -718) (undo-tree-id1791 . -718) (undo-tree-id1792 . -718) (undo-tree-id1793 . -718) (undo-tree-id1794 . -718) (undo-tree-id1795 . -718) (undo-tree-id1796 . -718) (undo-tree-id1797 . -389) (undo-tree-id1798 . -718) (undo-tree-id1799 . -718) (undo-tree-id1800 . -718) (undo-tree-id1801 . -718) (undo-tree-id1802 . -718) (undo-tree-id1803 . -718) (undo-tree-id1804 . -718) (undo-tree-id1805 . -718) (undo-tree-id1806 . -718) (undo-tree-id1807 . -389) (undo-tree-id1808 . -718) (undo-tree-id1809 . -718) (undo-tree-id1810 . -718) (undo-tree-id1811 . -718) (undo-tree-id1812 . -718) (undo-tree-id1813 . -718) (undo-tree-id1814 . -718) (undo-tree-id1815 . -718) (undo-tree-id1816 . -718) (undo-tree-id1817 . -718) (undo-tree-id1818 . -718) (undo-tree-id1819 . -718) (undo-tree-id1820 . -718) (undo-tree-id1821 . -718) (undo-tree-id1822 . -718) (undo-tree-id1823 . -718) (undo-tree-id1824 . -718) (undo-tree-id1825 . -718) (undo-tree-id1826 . -718) (undo-tree-id1827 . -718) (undo-tree-id1828 . -718) (undo-tree-id1829 . -718) (undo-tree-id1830 . -718) (undo-tree-id1831 . -718) (undo-tree-id1832 . -718) (undo-tree-id1833 . -718) (undo-tree-id1834 . -718) (undo-tree-id1835 . -718) (undo-tree-id1836 . -718) (undo-tree-id1837 . -718) (undo-tree-id1838 . -718) (undo-tree-id1839 . -718) (undo-tree-id1840 . -718) (undo-tree-id1841 . -718) (undo-tree-id1842 . -718) (undo-tree-id1843 . -718) (undo-tree-id1844 . -718) (undo-tree-id1845 . -718) (undo-tree-id1846 . -718) (undo-tree-id1847 . -718) (undo-tree-id1848 . -718) (undo-tree-id1849 . -718) (undo-tree-id1850 . -718) (undo-tree-id1851 . -718) (undo-tree-id1852 . -718) (undo-tree-id1853 . -718) (undo-tree-id1854 . -718) (undo-tree-id1855 . -718) (undo-tree-id1856 . -718) (undo-tree-id1857 . -718) (undo-tree-id1858 . -718)) nil (25661 24225 618937 530000) 0 nil])
([nil nil ((#("            }
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 14 (fontified t)) . 1659) (undo-tree-id1989 . -13) (undo-tree-id1990 . -12) (undo-tree-id1991 . 2) (undo-tree-id1992 . -13) 1671 (t 25661 24225 633868 406000)) nil (25661 24544 33193 642000) 0 nil])
([nil nil ((#("                }
" 0 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-5-face)) 17 18 (fontified t)) . 1641) (undo-tree-id1987 . -17) (undo-tree-id1988 . -12) 1653) nil (25661 24544 33190 255000) 0 nil])
([nil nil ((#("            Some(i) => {
" 0 12 (fontified t) 12 16 (fontified t face font-lock-type-face) 16 17 (fontified t face (rainbow-delimiters-depth-4-face)) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-4-face)) 19 21 (fontified t) 21 22 (fontified t syntax-table (1)) 22 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 25 (fontified t)) . 1549) (undo-tree-id1934 . -24) (undo-tree-id1935 . -12) (undo-tree-id1936 . -12) (undo-tree-id1937 . -12) (undo-tree-id1938 . -12) (undo-tree-id1939 . -12) (undo-tree-id1940 . -12) (undo-tree-id1941 . -12) (undo-tree-id1942 . -12) (undo-tree-id1943 . -12) (undo-tree-id1944 . -19) (undo-tree-id1945 . -12) (undo-tree-id1946 . -12) (undo-tree-id1947 . -12) (undo-tree-id1948 . -12) (undo-tree-id1949 . -12) (undo-tree-id1950 . -12) (undo-tree-id1951 . -12) (undo-tree-id1952 . -12) (undo-tree-id1953 . -12) (undo-tree-id1954 . -12) (undo-tree-id1955 . -12) (undo-tree-id1956 . -12) (undo-tree-id1957 . -12) (undo-tree-id1958 . -12) (undo-tree-id1959 . -12) (undo-tree-id1960 . -12) (undo-tree-id1961 . -12) (undo-tree-id1962 . -12) (undo-tree-id1963 . -12) (undo-tree-id1964 . -12) (undo-tree-id1965 . -12) (undo-tree-id1966 . -12) (undo-tree-id1967 . -12) (undo-tree-id1968 . -12) (undo-tree-id1969 . -12) (undo-tree-id1970 . -12) (undo-tree-id1971 . -12) (undo-tree-id1972 . -12) (undo-tree-id1973 . -12) (undo-tree-id1974 . -12) (undo-tree-id1975 . -12) (undo-tree-id1976 . -12) (undo-tree-id1977 . -12) (undo-tree-id1978 . -12) (undo-tree-id1979 . -12) (undo-tree-id1980 . -12) (undo-tree-id1981 . -12) (undo-tree-id1982 . -12) (undo-tree-id1983 . -12) (undo-tree-id1984 . -12) (undo-tree-id1985 . -12) (undo-tree-id1986 . -25) 1561) nil (25661 24544 33186 192000) 0 nil])
([nil nil ((#("            None => println!(\"failled\"),
" 0 12 (fontified t) 12 16 (fontified t face font-lock-type-face) 16 18 (fontified t) 18 19 (fontified t syntax-table (1)) 19 20 (fontified t) 20 28 (fontified t face rust-builtin-formatting-macro) 28 29 (fontified t face (rainbow-delimiters-depth-6-face)) 29 38 (fontified t face font-lock-string-face) 38 39 (fontified t face (rainbow-delimiters-depth-6-face)) 39 40 (fontified t) 40 41 (fontified t)) . 1616) (undo-tree-id1866 . -40) (undo-tree-id1867 . -12) (undo-tree-id1868 . -12) (undo-tree-id1869 . -12) (undo-tree-id1870 . -12) (undo-tree-id1871 . -12) (undo-tree-id1872 . -12) (undo-tree-id1873 . -12) (undo-tree-id1874 . -12) (undo-tree-id1875 . -12) (undo-tree-id1876 . -12) (undo-tree-id1877 . -12) (undo-tree-id1878 . -12) (undo-tree-id1879 . -12) (undo-tree-id1880 . -12) (undo-tree-id1881 . -12) (undo-tree-id1882 . -16) (undo-tree-id1883 . -17) (undo-tree-id1884 . -17) (undo-tree-id1885 . -18) (undo-tree-id1886 . -18) (undo-tree-id1887 . -19) (undo-tree-id1888 . -18) (undo-tree-id1889 . -19) (undo-tree-id1890 . -19) (undo-tree-id1891 . -20) (undo-tree-id1892 . -12) (undo-tree-id1893 . -12) (undo-tree-id1894 . -12) (undo-tree-id1895 . -12) (undo-tree-id1896 . -12) (undo-tree-id1897 . -12) (undo-tree-id1898 . -12) (undo-tree-id1899 . -12) (undo-tree-id1900 . -12) (undo-tree-id1901 . -12) (undo-tree-id1902 . -12) (undo-tree-id1903 . -12) (undo-tree-id1904 . -12) (undo-tree-id1905 . -12) (undo-tree-id1906 . -12) (undo-tree-id1907 . -12) (undo-tree-id1908 . -12) (undo-tree-id1909 . -12) (undo-tree-id1910 . -12) (undo-tree-id1911 . -12) (undo-tree-id1912 . -12) (undo-tree-id1913 . -12) (undo-tree-id1914 . -12) (undo-tree-id1915 . -12) (undo-tree-id1916 . -12) (undo-tree-id1917 . -12) (undo-tree-id1918 . -12) (undo-tree-id1919 . -12) (undo-tree-id1920 . -12) (undo-tree-id1921 . -12) (undo-tree-id1922 . -12) (undo-tree-id1923 . -12) (undo-tree-id1924 . -12) (undo-tree-id1925 . -12) (undo-tree-id1926 . -12) (undo-tree-id1927 . -12) (undo-tree-id1928 . -12) (undo-tree-id1929 . -12) (undo-tree-id1930 . -12) (undo-tree-id1931 . -12) (undo-tree-id1932 . -12) (undo-tree-id1933 . -41) 1628) nil (25661 24544 33148 348000) 0 nil])
([nil nil ((1616 . 1617) (#("}" 0 1 (fontified nil)) . -1616) (1615 . 1617) (t 25661 24544 46673 257000)) nil (25661 24547 824837 37000) 0 nil])
([nil nil ((1616 . 1618) (#(" " 0 1 (fontified nil)) . 1616) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (1615 . 1616) (t 25661 24547 836708 345000)) nil (25661 24571 403182 394000) 0 nil])
([nil nil ((#("match " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) . 1512) (undo-tree-id2248 . -5) (undo-tree-id2249 . -6)) nil (25661 24571 403179 345000) 0 nil])
([nil nil ((1519 . 1520) (1547 . 1548) (1512 . 1512) (1512 . 1519)) nil (25661 24571 403177 394000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1549) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1550) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) 1551) nil (25661 24571 403171 704000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1629) (undo-tree-id2131 . -1) (undo-tree-id2132 . 1) (undo-tree-id2133 . -1) 1630) nil (25661 24571 403086 391000) 0 nil])
([nil nil ((1558 . 1610) (#("        if i == lbl {
                    corrects += 1.0;
		}
        " 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t) 22 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-3-face)) 62 63 (fontified t) 63 71 (fontified t)) . 1558) (undo-tree-id1993 . -59) (undo-tree-id1994 . -71) (undo-tree-id1995 . -59) (undo-tree-id1996 . -71) (undo-tree-id1997 . -71) (undo-tree-id1998 . -71) (undo-tree-id1999 . -71) (undo-tree-id2000 . -71) (undo-tree-id2001 . -71) (undo-tree-id2002 . -71) (undo-tree-id2003 . -71) (undo-tree-id2004 . -71) (undo-tree-id2005 . -71) (undo-tree-id2006 . -71) (undo-tree-id2007 . -71) (undo-tree-id2008 . -71) (undo-tree-id2009 . -71) (undo-tree-id2010 . -71) (undo-tree-id2011 . -71) (undo-tree-id2012 . -71) (undo-tree-id2013 . -71) (undo-tree-id2014 . -71) (undo-tree-id2015 . -71) (undo-tree-id2016 . -71) (undo-tree-id2017 . -71) (undo-tree-id2018 . -71) (undo-tree-id2019 . -70) (undo-tree-id2020 . -70) (undo-tree-id2021 . -70) (undo-tree-id2022 . -70) (undo-tree-id2023 . -70) (undo-tree-id2024 . -70) (undo-tree-id2025 . -70) (undo-tree-id2026 . -70) (undo-tree-id2027 . -70) (undo-tree-id2028 . -63) (undo-tree-id2029 . -70) (undo-tree-id2030 . -70) (undo-tree-id2031 . -70) (undo-tree-id2032 . -70) (undo-tree-id2033 . -70) (undo-tree-id2034 . -70) (undo-tree-id2035 . -70) (undo-tree-id2036 . -70) (undo-tree-id2037 . -70) (undo-tree-id2038 . -70) (undo-tree-id2039 . -70) (undo-tree-id2040 . -70) (undo-tree-id2041 . -70) (undo-tree-id2042 . -70) (undo-tree-id2043 . -70) (undo-tree-id2044 . -70) (undo-tree-id2045 . -70) (undo-tree-id2046 . -70) (undo-tree-id2047 . -70) (undo-tree-id2048 . -70) (undo-tree-id2049 . -70) (undo-tree-id2050 . -70) (undo-tree-id2051 . -70) (undo-tree-id2052 . -70) (undo-tree-id2053 . -70) (undo-tree-id2054 . -70) (undo-tree-id2055 . -70) (undo-tree-id2056 . -70) (undo-tree-id2057 . -70) (undo-tree-id2058 . -70) (undo-tree-id2059 . -70) (undo-tree-id2060 . -70) (undo-tree-id2061 . -70) (undo-tree-id2062 . -70) (undo-tree-id2063 . -70) (undo-tree-id2064 . -70) (undo-tree-id2065 . -70) (undo-tree-id2066 . -70) (undo-tree-id2067 . -70) (undo-tree-id2068 . -70) (undo-tree-id2069 . -70) (undo-tree-id2070 . -70) (undo-tree-id2071 . -70) (undo-tree-id2072 . -70) (undo-tree-id2073 . -70) (undo-tree-id2074 . -70) (undo-tree-id2075 . -70) (undo-tree-id2076 . -70) (undo-tree-id2077 . -70) (undo-tree-id2078 . -70) (undo-tree-id2079 . -70) (undo-tree-id2080 . -70) (undo-tree-id2081 . -70) (undo-tree-id2082 . -70) (undo-tree-id2083 . -70) (undo-tree-id2084 . -70) (undo-tree-id2085 . -70) (undo-tree-id2086 . -70) (undo-tree-id2087 . -70) (undo-tree-id2088 . -70) (undo-tree-id2089 . -70) (undo-tree-id2090 . -70) (undo-tree-id2091 . -70) (undo-tree-id2092 . -70) (undo-tree-id2093 . -70) (undo-tree-id2094 . -70) (undo-tree-id2095 . -70) (undo-tree-id2096 . -70) (undo-tree-id2097 . -70) (undo-tree-id2098 . -70) (undo-tree-id2099 . -70) (undo-tree-id2100 . -70) (undo-tree-id2101 . -70) (undo-tree-id2102 . -70) (undo-tree-id2103 . -70) (undo-tree-id2104 . -70) (undo-tree-id2105 . -70) (undo-tree-id2106 . -70) (undo-tree-id2107 . -70) (undo-tree-id2108 . -70) (undo-tree-id2109 . -70) (undo-tree-id2110 . -70) (undo-tree-id2111 . -70) (undo-tree-id2112 . -70) (undo-tree-id2113 . -70) (undo-tree-id2114 . -70) (undo-tree-id2115 . -70) (undo-tree-id2116 . -70) (undo-tree-id2117 . -70) (undo-tree-id2118 . -70) (undo-tree-id2119 . -70) (undo-tree-id2120 . -70) (undo-tree-id2121 . -70) (undo-tree-id2122 . -70) (undo-tree-id2123 . -70) (undo-tree-id2124 . -70) (undo-tree-id2125 . -70) (undo-tree-id2126 . -70) (undo-tree-id2127 . -70) (undo-tree-id2128 . -70) (undo-tree-id2129 . -70) (undo-tree-id2130 . -70)) nil (25661 24571 403075 391000) 0 nil])
([nil nil ((1573 . 1578) (#("us" 0 2 (fontified nil)) . 1573) (1573 . 1575) (#("usize" 0 5 (fontified nil)) . -1573) (1573 . 1578) (#("us" 0 2 (fontified t)) . -1573) (undo-tree-id2253 . -2) (undo-tree-id2254 . -2) (undo-tree-id2255 . -2) (undo-tree-id2256 . -2) (undo-tree-id2257 . -2) (undo-tree-id2258 . -2) (undo-tree-id2259 . -2) (undo-tree-id2260 . -2) (undo-tree-id2261 . -2) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) 1575 (1569 . 1575) (t 25661 24571 416927 354000)) nil (25661 24580 693784 683000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1060) (undo-tree-id2352 . -1) 1061 (1060 . 1061) (#("	" 0 1 (fontified nil)) . 1059) (undo-tree-id2353 . -1) (1058 . 1061) (t 25661 24580 707013 961000)) nil (25661 24651 4333 470000) 0 nil])
([nil nil ((1071 . 1082) (1070 . 1072) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1070) (1070 . 1071) (apply yas--snippet-revive 1061 1071 #s(yas--snippet nil nil #s(yas--exit 1070 nil) 82 nil nil #s(yas--field 1 1060 1092 nil nil nil t #s(yas--exit 1092 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1070 nil) 82 nil nil #s(yas--field 1 1060 1092 nil nil nil t #s(yas--exit 1092 nil)) nil)) (1061 . 1071) (#("println!($0)" 0 12 (fontified nil)) . 1061) (undo-tree-id2270 . -12) (undo-tree-id2271 . -12) (undo-tree-id2272 . 12) (1061 . 1073) (#("printl" 0 6 (fontified nil)) . 1061) (undo-tree-id2273 . -6) (undo-tree-id2274 . -6) (undo-tree-id2275 . 6) (1061 . 1067) (#("println!(…)" 0 11 (fontified nil)) . -1061) (undo-tree-id2276 . -11) (undo-tree-id2277 . -11) (undo-tree-id2278 . 11) (1061 . 1072) (#("printl" 0 6 (fontified t)) . -1061) (undo-tree-id2279 . -6) (undo-tree-id2280 . -6) (undo-tree-id2281 . -5) (undo-tree-id2282 . -6) (undo-tree-id2283 . -6) (undo-tree-id2284 . 1) (undo-tree-id2285 . -5) (undo-tree-id2286 . -5) (undo-tree-id2287 . -5) 1067 (1066 . 1067) (#("_" 0 1 (fontified t)) . -1066) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (#("i" 0 1 (fontified nil)) . -1067) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (#("m" 0 1 (fontified t)) . -1068) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (#("a" 0 1 (fontified t)) . -1069) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (#("g" 0 1 (fontified t)) . -1070) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (#("e" 0 1 (fontified t)) . -1071) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) 1072 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1072) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1073) (undo-tree-id2344 . -1) (undo-tree-id2345 . 1) (undo-tree-id2346 . -1) (undo-tree-id2347 . 1) (#("train_image" 0 11 (fontified t)) . 1073) (undo-tree-id2348 . -11) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1060 1092 nil nil nil t #s(yas--exit 1092 nil))) #s(yas--exit 1092 nil) 81 nil #s(yas--field 1 1060 1092 nil nil nil t #s(yas--exit 1092 nil)) nil nil)) (1061 . 1085) (#("print_image(${1:train_image})$0" 0 31 (fontified nil)) . 1061) (1061 . 1092) (#("pr" 0 2 (fontified nil)) . 1061) (1061 . 1063) (#("print_image(…)" 0 14 (fontified nil)) . -1061) (1061 . 1075) (#("pr" 0 2 (fontified t)) . -1061) (undo-tree-id2349 . -2) (undo-tree-id2350 . -2) 1063 (1061 . 1063) (1060 . 1061) (#("	" 0 1 (fontified nil)) . 1059) (undo-tree-id2351 . -1) (1060 . 1061) (1059 . 1060)) nil (25661 24651 4324 80000) 0 nil])
([nil nil ((1084 . 1085)) nil (25661 24651 4273 141000) 0 nil])
([nil nil ((1060 . 1068) (#("	" 0 1 (fontified t)) . 1060) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . 1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1)) nil (25661 24651 4268 389000) 0 nil])
([nil nil ((apply yas--snippet-revive 1060 1092 #s(yas--snippet nil (#s(yas--field 1 1060 1092 nil nil nil t #s(yas--exit 1092 nil))) #s(yas--exit 1092 nil) 81 nil #s(yas--field 1 1060 1092 nil nil nil t #s(yas--exit 1092 nil)) nil nil))) nil (25661 24692 857956 357000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -993) (undo-tree-id2358 . -1) 994 (993 . 994) (#("	" 0 1 (fontified nil)) . 992) (undo-tree-id2359 . -1) (991 . 994) (t 25661 24651 14341 705000)) nil (25661 24692 857954 798000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1001 . 1002) (#("
" 0 1 (fontified nil)) . -1026) (993 . 1027)) nil (25661 24692 857951 194000) 0 nil])
([nil nil ((#("backproping" 0 11 (fontified t face font-lock-string-face)) . 1012) (undo-tree-id2357 . -10)) nil (25661 24692 857948 840000) 0 nil])
([nil nil ((1015 . 1024) (#("m" 0 1 (fontified t face font-lock-string-face)) . -1015) (undo-tree-id2355 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1016) (undo-tree-id2356 . -1) 1017 (1012 . 1017)) nil (25661 24692 857945 895000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 992) (undo-tree-id2354 . -2)) nil (25661 24692 857938 132000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 613) (t 25661 24692 868072 923000)) nil (25661 24743 178647 857000) 0 nil])
([nil nil ((613 . 618) (#("fir" 0 3 (fontified nil)) . 613) (613 . 616) (#("first" 0 5 (fontified nil)) . -613) (613 . 618) (#("fir" 0 3 (fontified t)) . -613) (undo-tree-id2448 . -3) (undo-tree-id2449 . -3) 616 (613 . 616)) nil (25661 24743 178641 318000) 0 nil])
([nil nil ((#("first" 0 5 (fontified t)) . 620) (undo-tree-id2447 . -4)) nil (25661 24743 178638 522000) 0 nil])
([nil nil ((620 . 621)) nil (25661 24743 178637 97000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1314) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1)) nil (25661 24743 178635 511000) 0 nil])
([nil nil ((1314 . 1319) (#("fi" 0 2 (fontified nil)) . 1314) (1314 . 1316) (#("first" 0 5 (fontified nil)) . -1314) (1314 . 1319) (#("fi" 0 2 (fontified t)) . -1314) (undo-tree-id2362 . -2) (undo-tree-id2363 . -2) (undo-tree-id2364 . -2) (undo-tree-id2365 . -2) (undo-tree-id2366 . -2) (undo-tree-id2367 . -2) (undo-tree-id2368 . -2) (undo-tree-id2369 . -2) (undo-tree-id2370 . -2) (undo-tree-id2371 . -2) (undo-tree-id2372 . -2) (undo-tree-id2373 . -2) (undo-tree-id2374 . -2) (undo-tree-id2375 . -2) (undo-tree-id2376 . -2) (undo-tree-id2377 . -2) (undo-tree-id2378 . -2) (undo-tree-id2379 . -2) (undo-tree-id2380 . -2) (undo-tree-id2381 . -2) (undo-tree-id2382 . -2) (undo-tree-id2383 . -2) (undo-tree-id2384 . -2) (undo-tree-id2385 . -2) (undo-tree-id2386 . -2) (undo-tree-id2387 . -2) (undo-tree-id2388 . -2) (undo-tree-id2389 . -2) (undo-tree-id2390 . -2) (undo-tree-id2391 . -2) (undo-tree-id2392 . -2) (undo-tree-id2393 . -2) (undo-tree-id2394 . -2) (undo-tree-id2395 . -2) (undo-tree-id2396 . -2) (undo-tree-id2397 . -2) (undo-tree-id2398 . -2) (undo-tree-id2399 . -2) (undo-tree-id2400 . -2) (undo-tree-id2401 . -2) (undo-tree-id2402 . -2) (undo-tree-id2403 . -2) (undo-tree-id2404 . -2) (undo-tree-id2405 . -2) (undo-tree-id2406 . -2) (undo-tree-id2407 . -2) (undo-tree-id2408 . -2) (undo-tree-id2409 . -2) (undo-tree-id2410 . -2) (undo-tree-id2411 . -2) (undo-tree-id2412 . -2) (undo-tree-id2413 . -2) (undo-tree-id2414 . -2) (undo-tree-id2415 . -2) (undo-tree-id2416 . -2) (undo-tree-id2417 . -2) (undo-tree-id2418 . -2) (undo-tree-id2419 . -2) (undo-tree-id2420 . -2) (undo-tree-id2421 . -2) (undo-tree-id2422 . -2) (undo-tree-id2423 . -2) (undo-tree-id2424 . -2) 1316 (1314 . 1316)) nil (25661 24743 178618 466000) 0 nil])
([nil nil ((#("first" 0 5 (fontified t)) . 1321) (undo-tree-id2360 . -4) (undo-tree-id2361 . -5)) nil (25661 24743 178574 182000) 0 nil])
([nil nil ((1321 . 1322)) nil (25661 24743 178559 658000) 0 nil])
([nil nil ((#("20" 0 2 (fontified t)) . 986) (undo-tree-id2450 . -1) (t 25661 24743 191888 524000)) nil (25661 25167 238074 669000) 0 nil])
([nil nil ((987 . 990) (986 . 987)) nil (25661 25167 238063 56000) 0 nil])
([nil nil ((175 . 176)) nil (25661 25167 238057 20000) 0 nil])
([nil nil ((#("        println!(\"frontproping\");
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 16 (fontified t face rust-builtin-formatting-macro) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 31 (fontified t face font-lock-string-face) 31 32 (fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t) 33 34 (fontified t)) . 995) (undo-tree-id2464 . -33) (undo-tree-id2465 . -33) (undo-tree-id2466 . -19) 1014 (t 25661 25167 249408 115000)) nil (25661 25193 710388 530000) 0 nil])
([nil nil ((#("        println!(\"backproping\");
" 0 8 (fontified t) 8 16 (fontified t face rust-builtin-formatting-macro) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 30 (fontified t face font-lock-string-face) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 32 (fontified t) 32 33 (fontified t)) . 1063) (undo-tree-id2462 . -32) (undo-tree-id2463 . -19) 1082) nil (25661 25193 710384 619000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1062) (undo-tree-id2461 . -1)) nil (25661 25193 710382 578000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1062) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1)) nil (25661 25193 710380 539000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1062) (undo-tree-id2451 . -1) 1063 (1061 . 1063)) nil (25661 25193 710371 816000) 0 nil])
([nil nil ((988 . 989)) nil (25661 25193 710358 427000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -991) (undo-tree-id2491 . -1) 992 (991 . 992) (t 25661 25193 723008 26000)) nil (25661 25230 92994 466000) 0 nil])
([nil nil ((987 . 988) (#("1" 0 1 (fontified t)) . 987) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1)) nil (25661 25230 92986 432000) 0 nil])
([nil nil ((#("network " 0 8 (fontified t)) . 1072) (undo-tree-id2497 . -7) (t 25661 25230 106708 438000)) nil (25661 26175 446331 786000) 0 nil])
([nil nil ((#("= " 0 2 (fontified t)) . 1072) (undo-tree-id2496 . -1)) nil (25661 26175 446329 459000) 0 nil])
([nil nil ((1076 . 1078) (1075 . 1076) (1073 . 1075) (#("e" 0 1 (fontified t)) . -1073) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) 1074 (1072 . 1074)) nil (25661 26175 446327 41000) 0 nil])
([nil nil ((2296 . 2299) (2291 . 2296) (2288 . 2291) (#("f" 0 1 (fontified nil)) . 2288) (2288 . 2289) (#("f64" 0 3 (fontified nil)) . -2288) (2288 . 2291) (#("f" 0 1 (fontified t)) . -2288) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) 2289 (2275 . 2289) (1107 . 1109)) nil (25661 26175 446321 629000) 0 nil])
([nil nil ((2299 . 2300)) nil (25661 26175 446303 703000) 0 nil])
([nil nil ((1109 . 1114) (#("V" 0 1 (fontified nil)) . 1109) (1109 . 1110) (#("VALUE" 0 5 (fontified nil)) . -1109) (1109 . 1114) (#("V" 0 1 (fontified t face font-lock-type-face)) . -1109) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) 1110 (1109 . 1110) (t 25661 26175 459799 494000)) nil (25661 26217 25134 746000) 0 nil])
([nil nil ((1128 . 1131) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1128 1131 nil nil nil t #s(yas--exit 1132 nil))) #s(yas--exit 1132 nil) 116 nil #s(yas--field 1 1128 1131 nil nil nil t #s(yas--exit 1132 nil)) nil nil)) (1123 . 1129) (#("Some($1)$0" 0 10 (fontified nil)) . 1123) (1123 . 1133) (#("S" 0 1 (fontified nil)) . 1123) (1123 . 1124) (#("Some(…)" 0 7 (fontified nil)) . -1123) (1123 . 1130) (#("S" 0 1 (fontified t face font-lock-type-face)) . -1123) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) 1124 (1123 . 1124) (1118 . 1123) (1119 . 1120) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1118) (1118 . 1123) (1117 . 1119) (1115 . 1118) (#(";" 0 1 (fontified t)) . -1115) (undo-tree-id2769 . -1) 1116) nil (25661 26217 25072 464000) 0 nil])
([nil nil ((1169 . 1170) (apply yas--snippet-revive 1164 1169 #s(yas--snippet nil nil nil 118 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 118 nil nil nil nil)) (1164 . 1169) (#("break" 0 5 (fontified nil)) . 1164) (1164 . 1169) (#("bre" 0 3 (fontified nil)) . 1164) (1164 . 1167) (#("break" 0 5 (fontified nil)) . -1164) (1164 . 1169) (#("bre" 0 3 (fontified t)) . -1164) (undo-tree-id2747 . -3) (undo-tree-id2748 . -3) 1167 (1160 . 1167) (apply yas--snippet-revive 1156 1160 #s(yas--snippet nil nil #s(yas--exit 1160 nil) 117 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1160 nil) 117 nil nil nil nil)) (1156 . 1160) (#("None$0" 0 6 (fontified nil)) . 1156) (1156 . 1162) (#("No" 0 2 (fontified nil)) . 1156) (1156 . 1158) (#("None" 0 4 (fontified nil)) . -1156) (1156 . 1160) (#("No" 0 2 (fontified t face font-lock-type-face)) . -1156) (undo-tree-id2749 . -2) (undo-tree-id2750 . -2) 1158 (1157 . 1158) (#("e" 0 1 (fontified t face font-lock-type-face)) . -1157) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -1158) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) 1159 (1158 . 1159) (#("w" 0 1 (fontified t face font-lock-type-face)) . -1158) (undo-tree-id2755 . -1) (#("A" 0 1 (fontified t face font-lock-type-face)) . -1159) (undo-tree-id2756 . -1) (#("x" 0 1 (fontified t face font-lock-type-face)) . -1160) (undo-tree-id2757 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -1161) (undo-tree-id2758 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -1162) (undo-tree-id2759 . -1) 1163 (1156 . 1163) (#("N" 0 1 (fontified nil)) . 1156) (1156 . 1157) (#("NewAxis" 0 7 (fontified nil)) . -1156) (1156 . 1163) (#("N" 0 1 (fontified t face font-lock-type-face)) . -1156) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) 1157 (1156 . 1157) (1150 . 1156) (1149 . 1150) (#("," 0 1 (fontified t)) . -1149) (undo-tree-id2762 . -1) 1150 (1149 . 1150) (1146 . 1149) (#("ne" 0 2 (fontified nil)) . 1146) (1146 . 1148) (#("net" 0 3 (fontified nil)) . -1146) (1146 . 1149) (#("ne" 0 2 (fontified t)) . -1146) (undo-tree-id2763 . -2) (undo-tree-id2764 . -2) 1148 (1143 . 1148) (1136 . 1143) (#("ne" 0 2 (fontified nil)) . 1136) (1136 . 1138) (#("network" 0 7 (fontified nil)) . -1136) (1136 . 1143) (#("ne" 0 2 (fontified t)) . -1136) (undo-tree-id2765 . -2) (undo-tree-id2766 . -2) 1138 (1132 . 1138) (apply yas--snippet-revive 1123 1132 #s(yas--snippet nil (#s(yas--field 1 1128 1131 nil nil nil t #s(yas--exit 1132 nil))) #s(yas--exit 1132 nil) 116 nil #s(yas--field 1 1128 1131 nil nil nil t #s(yas--exit 1132 nil)) nil nil))) nil (25661 26217 25062 192000) 0 nil])
([nil nil ((1118 . 1193) (#("	    Some(net) => network = net,
	    None => break,
	" 0 5 (fontified t) 5 9 (fontified t face font-lock-type-face) 9 10 (fontified t face (rainbow-delimiters-depth-4-face)) 10 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-4-face)) 14 16 (fontified t) 16 17 (fontified t syntax-table (1)) 17 18 (fontified t) 18 28 (fontified t) 28 33 (fontified t) 33 38 (fontified t) 38 42 (fontified t face font-lock-type-face) 42 44 (fontified t) 44 45 (fontified t syntax-table (1)) 45 46 (fontified t) 46 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t)) . 1118) (undo-tree-id2498 . 2) (undo-tree-id2499 . -51) (undo-tree-id2500 . -51) (undo-tree-id2501 . -51) (undo-tree-id2502 . -51) (undo-tree-id2503 . -51) (undo-tree-id2504 . -51) (undo-tree-id2505 . -51) (undo-tree-id2506 . -51) (undo-tree-id2507 . -51) (undo-tree-id2508 . -51) (undo-tree-id2509 . -51) (undo-tree-id2510 . -51) (undo-tree-id2511 . -51) (undo-tree-id2512 . -51) (undo-tree-id2513 . -51) (undo-tree-id2514 . -51) (undo-tree-id2515 . -51) (undo-tree-id2516 . -51) (undo-tree-id2517 . -51) (undo-tree-id2518 . -51) (undo-tree-id2519 . -51) (undo-tree-id2520 . -51) (undo-tree-id2521 . -51) (undo-tree-id2522 . -51) (undo-tree-id2523 . -51) (undo-tree-id2524 . -51) (undo-tree-id2525 . -51) (undo-tree-id2526 . -51) (undo-tree-id2527 . -51) (undo-tree-id2528 . -51) (undo-tree-id2529 . -51) (undo-tree-id2530 . -51) (undo-tree-id2531 . -51) (undo-tree-id2532 . -51) (undo-tree-id2533 . -51) (undo-tree-id2534 . -51) (undo-tree-id2535 . -51) (undo-tree-id2536 . -51) (undo-tree-id2537 . -52) (undo-tree-id2538 . -52) (undo-tree-id2539 . -52) (undo-tree-id2540 . -52) (undo-tree-id2541 . -52) (undo-tree-id2542 . -52) (undo-tree-id2543 . -52) (undo-tree-id2544 . -52) (undo-tree-id2545 . -52) (undo-tree-id2546 . -52) (undo-tree-id2547 . -52) (undo-tree-id2548 . -52) (undo-tree-id2549 . -52) (undo-tree-id2550 . -52) (undo-tree-id2551 . -52) (undo-tree-id2552 . -52) (undo-tree-id2553 . -52) (undo-tree-id2554 . -52) (undo-tree-id2555 . -52) (undo-tree-id2556 . -52) (undo-tree-id2557 . -52) (undo-tree-id2558 . -52) (undo-tree-id2559 . -52) (undo-tree-id2560 . -52) (undo-tree-id2561 . -52) (undo-tree-id2562 . -52) (undo-tree-id2563 . -52) (undo-tree-id2564 . -52) (undo-tree-id2565 . -52) (undo-tree-id2566 . -52) (undo-tree-id2567 . -52) (undo-tree-id2568 . -52) (undo-tree-id2569 . -52) (undo-tree-id2570 . -52) (undo-tree-id2571 . -52) (undo-tree-id2572 . -52) (undo-tree-id2573 . -52) (undo-tree-id2574 . -52) (undo-tree-id2575 . -52) (undo-tree-id2576 . -52) (undo-tree-id2577 . -52) (undo-tree-id2578 . -52) (undo-tree-id2579 . -52) (undo-tree-id2580 . -52) (undo-tree-id2581 . -52) (undo-tree-id2582 . -52) (undo-tree-id2583 . -52) (undo-tree-id2584 . -52) (undo-tree-id2585 . -52) (undo-tree-id2586 . -52) (undo-tree-id2587 . -52) (undo-tree-id2588 . -52) (undo-tree-id2589 . -52) (undo-tree-id2590 . -52) (undo-tree-id2591 . -52) (undo-tree-id2592 . -52) (undo-tree-id2593 . -52) (undo-tree-id2594 . -52) (undo-tree-id2595 . -52) (undo-tree-id2596 . -52) (undo-tree-id2597 . -52) (undo-tree-id2598 . -52) (undo-tree-id2599 . -52) (undo-tree-id2600 . -52) (undo-tree-id2601 . -52) (undo-tree-id2602 . -52) (undo-tree-id2603 . -52) (undo-tree-id2604 . -52) (undo-tree-id2605 . -52) (undo-tree-id2606 . -52) (undo-tree-id2607 . -51) (undo-tree-id2608 . -51) (undo-tree-id2609 . -51) (undo-tree-id2610 . -51) (undo-tree-id2611 . -51) (undo-tree-id2612 . -51) (undo-tree-id2613 . -51) (undo-tree-id2614 . -51) (undo-tree-id2615 . -51) (undo-tree-id2616 . -33) (undo-tree-id2617 . -51) (undo-tree-id2618 . -51) (undo-tree-id2619 . -51) (undo-tree-id2620 . -51) (undo-tree-id2621 . -51) (undo-tree-id2622 . -51) (undo-tree-id2623 . -51) (undo-tree-id2624 . -51) (undo-tree-id2625 . -51) (undo-tree-id2626 . -51) (undo-tree-id2627 . -51) (undo-tree-id2628 . -51) (undo-tree-id2629 . -51) (undo-tree-id2630 . -51) (undo-tree-id2631 . -51) (undo-tree-id2632 . -51) (undo-tree-id2633 . -51) (undo-tree-id2634 . -51) (undo-tree-id2635 . -51) (undo-tree-id2636 . -51) (undo-tree-id2637 . -51) (undo-tree-id2638 . -51) (undo-tree-id2639 . -51) (undo-tree-id2640 . -51) (undo-tree-id2641 . -51) (undo-tree-id2642 . -51) (undo-tree-id2643 . -51) (undo-tree-id2644 . -51) (undo-tree-id2645 . -51) (undo-tree-id2646 . -51) (undo-tree-id2647 . -51) (undo-tree-id2648 . -51) (undo-tree-id2649 . -51) (undo-tree-id2650 . -51) (undo-tree-id2651 . -51) (undo-tree-id2652 . -51) (undo-tree-id2653 . -51) (undo-tree-id2654 . -51) (undo-tree-id2655 . -51) (undo-tree-id2656 . -51) (undo-tree-id2657 . -51) (undo-tree-id2658 . -51) (undo-tree-id2659 . -51) (undo-tree-id2660 . -51) (undo-tree-id2661 . -51) (undo-tree-id2662 . -51) (undo-tree-id2663 . -51) (undo-tree-id2664 . -46) (undo-tree-id2665 . -51) (undo-tree-id2666 . -51) (undo-tree-id2667 . -51) (undo-tree-id2668 . -51) (undo-tree-id2669 . -51) (undo-tree-id2670 . -51) (undo-tree-id2671 . -51) (undo-tree-id2672 . -51) (undo-tree-id2673 . -51) (undo-tree-id2674 . -51) (undo-tree-id2675 . -51) (undo-tree-id2676 . -51) (undo-tree-id2677 . -51) (undo-tree-id2678 . -51) (undo-tree-id2679 . -51) (undo-tree-id2680 . -51) (undo-tree-id2681 . -51) (undo-tree-id2682 . -51) (undo-tree-id2683 . -51) (undo-tree-id2684 . -51) (undo-tree-id2685 . -51) (undo-tree-id2686 . -51) (undo-tree-id2687 . -51) (undo-tree-id2688 . -51) (undo-tree-id2689 . -51) (undo-tree-id2690 . -51) (undo-tree-id2691 . -51) (undo-tree-id2692 . -51) (undo-tree-id2693 . -51) (undo-tree-id2694 . -51) (undo-tree-id2695 . -51) (undo-tree-id2696 . -51) (undo-tree-id2697 . -51) (undo-tree-id2698 . -51) (undo-tree-id2699 . -51) (undo-tree-id2700 . -51) (undo-tree-id2701 . -51) (undo-tree-id2702 . -51) (undo-tree-id2703 . -51) (undo-tree-id2704 . -51) (undo-tree-id2705 . -51) (undo-tree-id2706 . -51) (undo-tree-id2707 . -51) (undo-tree-id2708 . -51) (undo-tree-id2709 . -51) (undo-tree-id2710 . -51) (undo-tree-id2711 . -51) (undo-tree-id2712 . -51) (undo-tree-id2713 . -51) (undo-tree-id2714 . -51) (undo-tree-id2715 . -51) (undo-tree-id2716 . -51) (undo-tree-id2717 . -51) (undo-tree-id2718 . -51) (undo-tree-id2719 . -51) (undo-tree-id2720 . -51) (undo-tree-id2721 . -51) (undo-tree-id2722 . -51) (undo-tree-id2723 . -51) (undo-tree-id2724 . -51) (undo-tree-id2725 . -51) (undo-tree-id2726 . -51) (undo-tree-id2727 . -51) (undo-tree-id2728 . -51) (undo-tree-id2729 . -51) (undo-tree-id2730 . -51) (undo-tree-id2731 . -51) (undo-tree-id2732 . -51) (undo-tree-id2733 . -51) (undo-tree-id2734 . -51) (undo-tree-id2735 . -51) (undo-tree-id2736 . -51) (undo-tree-id2737 . -51) (undo-tree-id2738 . -51) (undo-tree-id2739 . -51) (undo-tree-id2740 . -51) (undo-tree-id2741 . -51) (undo-tree-id2742 . -51) (undo-tree-id2743 . -51) (undo-tree-id2744 . -51) (undo-tree-id2745 . -51) (undo-tree-id2746 . -51)) nil (25661 26217 25028 676000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -1173) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) 1174 (1173 . 1174) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -1173) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) 1174 (1157 . 1174) (t 25661 26217 40235 949000)) nil (25661 26229 26370 483000) 0 nil])
([nil nil ((928 . 932) (#("    " 0 4 (fontified nil)) . 927) (undo-tree-id3014 . -4) (927 . 932) (#("    " 0 4 (fontified nil)) . 926) (undo-tree-id3015 . -4) (930 . 931) (926 . 930) (t 25661 26229 40361 861000)) nil (25661 26438 15191 377000) 0 nil])
([nil nil ((nil rear-nonsticky nil 936 . 937) (#("
" 0 1 (fontified nil)) . -960) (932 . 961) 931) nil (25661 26438 15188 711000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -961) (undo-tree-id3013 . -4) 965 (960 . 965)) nil (25661 26438 15187 273000) 0 nil])
([nil nil ((#("break" 0 5 (fontified t face font-lock-keyword-face)) . 1229) (undo-tree-id3012 . -4)) nil (25661 26438 15185 796000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1242) (undo-tree-id3008 . -1) 1243 (1237 . 1243) (#(" " 0 1 (fontified t)) . -1237) (undo-tree-id3009 . -1) 1238 (1237 . 1238) (1229 . 1237) (#("co" 0 2 (fontified nil)) . 1229) (1229 . 1231) (#("corrects" 0 8 (fontified nil)) . -1229) (1229 . 1237) (#("co" 0 2 (fontified t)) . -1229) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) 1231 (1229 . 1231)) nil (25661 26438 15183 685000) 0 nil])
([nil nil ((981 . 982) (#("l" 0 1 (fontified t)) . -981) (undo-tree-id3002 . -1) 982 (965 . 982) (#("t" 0 1 (fontified t)) . -965) (undo-tree-id3003 . -1) (#("a" 0 1 (fontified t)) . -966) (undo-tree-id3004 . -1) (#("k" 0 1 (fontified t)) . -967) (undo-tree-id3005 . -1) (#("e" 0 1 (fontified t)) . -968) (undo-tree-id3006 . -1) (#(" " 0 1 (fontified t)) . -969) (undo-tree-id3007 . -1) 970 (965 . 970) (960 . 965)) nil (25661 26438 15178 330000) 0 nil])
([nil nil ((979 . 983) (#("i" 0 1 (fontified nil)) . 979) (979 . 980) (#("i128" 0 4 (fontified nil)) . -979) (979 . 983) (#("i" 0 1 (fontified t)) . -979) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) 980 (979 . 980) (977 . 979)) nil (25661 26438 15170 235000) 0 nil])
([nil nil ((#("128 " 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t)) . 980) (undo-tree-id2998 . 1) (undo-tree-id2999 . -3)) nil (25661 26438 15167 44000) 0 nil])
([nil nil ((982 . 983) (979 . 982) (#("i6" 0 2 (fontified nil)) . 979) (979 . 981) (#("i64" 0 3 (fontified nil)) . -979) (979 . 982) (#("i6" 0 2 (fontified t)) . -979) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -2) (undo-tree-id2997 . -2) 981 (980 . 981)) nil (25661 26438 15164 731000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -1313) (undo-tree-id2979 . -1) (#("0" 0 1 (fontified t)) . -1314) (undo-tree-id2980 . -1) 1315 (1313 . 1315) (#("t" 0 1 (fontified t)) . -1313) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (#("a" 0 1 (fontified t)) . -1314) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (#("k" 0 1 (fontified t)) . -1315) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) 1316 (1296 . 1316) (#("i" 0 1 (fontified t)) . -1296) (undo-tree-id2987 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1297) (undo-tree-id2988 . -1) (#(" " 0 1 (fontified t)) . -1298) (undo-tree-id2989 . -1) 1299 (1296 . 1299) (1295 . 1296) (#("	" 0 1 (fontified nil)) . 1294) (undo-tree-id2990 . -1) (1293 . 1296) (1292 . 1293) (1287 . 1292) (1283 . 1287) (#("tak" 0 3 (fontified nil)) . 1283) (1283 . 1286) (#("take" 0 4 (fontified nil)) . -1283) (1283 . 1287) (#("tak" 0 3 (fontified t)) . -1283) (undo-tree-id2991 . -3) (undo-tree-id2992 . -3) 1286 (1283 . 1286) (1282 . 1283) (#("	" 0 1 (fontified nil)) . 1281) (undo-tree-id2993 . -1) (1280 . 1283)) nil (25661 26438 15157 389000) 0 nil])
([nil nil ((#("	let percentage = 
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 19 (fontified t)) . 1295) (undo-tree-id2974 . 1) (undo-tree-id2975 . -18) (undo-tree-id2976 . -18) (undo-tree-id2977 . -17) (undo-tree-id2978 . 1) 1312) nil (25661 26438 15144 781000) 0 nil])
([nil nil ((#("	take += 1;
" 0 1 (fontified t) 1 12 (fontified t)) . 1282) (undo-tree-id2972 . -11) (undo-tree-id2973 . -1) 1283) nil (25661 26438 15141 301000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1282) (undo-tree-id2971 . -1)) nil (25661 26438 15139 342000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1281) (undo-tree-id2970 . -1)) nil (25661 26438 15137 595000) 0 nil])
([nil nil ((#("    Some(net) => network = net, // set the next
            None => corrects += 1,
        }" 0 4 (fontified t) 4 8 (fontified t face font-lock-type-face) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 15 (fontified t) 15 16 (syntax-table (1) fontified t) 16 32 (fontified t) 32 35 (fontified t face font-lock-comment-delimiter-face) 35 47 (fontified t face font-lock-comment-face) 47 48 (fontified t face font-lock-comment-face) 48 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 66 (fontified t) 66 67 (syntax-table (1) fontified t) 67 68 (fontified t) 68 81 (fontified t) 81 83 (fontified t) 83 91 (fontified t) 91 92 (fontified t face (rainbow-delimiters-depth-3-face))) . 1188) (undo-tree-id2965 . -91) (undo-tree-id2966 . -91) (undo-tree-id2967 . -91) (undo-tree-id2968 . -46) (undo-tree-id2969 . -91)) nil (25661 26438 15136 175000) 0 nil])
([nil nil ((#("match " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) . 1134) (undo-tree-id2964 . -5)) nil (25661 26438 15132 530000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1171) (undo-tree-id2962 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1172) (undo-tree-id2963 . -1) 1173) nil (25661 26438 15936 261000) 0 nil])
([nil nil ((1134 . 1136)) nil (25661 26447 456559 254000) 0 nil] [nil nil ((1134 . 1141) (#("nenetwork" 0 2 (fontified nil) 2 9 (fontified nil)) . 1134) (undo-tree-id2959 . 7) (1134 . 1136) (#("network" 0 7 (fontified nil)) . -1134) (1134 . 1141) (#("ne" 0 2 (fontified t)) . -1134) (undo-tree-id2960 . -2) (undo-tree-id2961 . -2) 1136 (1134 . 1136)) ((#("ne" 0 2 (fontified nil)) . 1134) (undo-tree-id3016 . -2) (undo-tree-id3017 . -2) (1134 . 1136) (#("network" 0 7 (fontified nil)) . 1134) (1134 . 1141) (#("ne" 0 2 (fontified nil)) . 1134) (1134 . 1143) (#("network" 0 7 (fontified t)) . 1134) (undo-tree-id3018 . -6) (undo-tree-id3019 . -6)) (25661 26438 15123 650000) 0 nil])
([nil nil ((1181 . 1182) (1142 . 1142) (1142 . 1143) (1135 . 1142) (#("ne" 0 2 (fontified nil)) . 1135) (1135 . 1137) (#("network" 0 7 (fontified nil)) . -1135) (1135 . 1142) (#("ne" 0 2 (fontified t)) . -1135) (undo-tree-id3445 . -2) (undo-tree-id3446 . -2) 1137 (1135 . 1137)) nil (25661 26447 456557 781000) 0 nil])
nil
([nil nil ((1142 . 1143)) nil (25661 26447 456554 328000) 0 nil])
([nil nil ((#("    let mut corrects = 0.0;
    let mut take: i64 = 0;

" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 20 (fontified t face font-lock-variable-name-face) 20 28 (fontified t) 28 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 44 (fontified t face font-lock-variable-name-face) 44 46 (fontified t) 46 49 (fontified t face font-lock-type-face) 49 50 (fontified t) 50 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t)) . 933) (undo-tree-id3365 . -55) (undo-tree-id3366 . -55) (undo-tree-id3367 . -55) (undo-tree-id3368 . -56) (undo-tree-id3369 . -56) (undo-tree-id3370 . -55) (undo-tree-id3371 . -55) (undo-tree-id3372 . -55) (undo-tree-id3373 . -55) (undo-tree-id3374 . -55) (undo-tree-id3375 . -55) (undo-tree-id3376 . -55) (undo-tree-id3377 . -55) (undo-tree-id3378 . -55) (undo-tree-id3379 . -55) (undo-tree-id3380 . -55) (undo-tree-id3381 . -55) (undo-tree-id3382 . -55) (undo-tree-id3383 . -55) (undo-tree-id3384 . -55) (undo-tree-id3385 . -55) (undo-tree-id3386 . -55) (undo-tree-id3387 . -55) (undo-tree-id3388 . -55) (undo-tree-id3389 . -55) (undo-tree-id3390 . -55) (undo-tree-id3391 . -55) (undo-tree-id3392 . -55) (undo-tree-id3393 . -55) (undo-tree-id3394 . -55) (undo-tree-id3395 . -55) (undo-tree-id3396 . -55) (undo-tree-id3397 . -55) (undo-tree-id3398 . -56) (undo-tree-id3399 . -55) (undo-tree-id3400 . -55) (undo-tree-id3401 . -55) (undo-tree-id3402 . -55) (undo-tree-id3403 . -55) (undo-tree-id3404 . -55) (undo-tree-id3405 . -55) (undo-tree-id3406 . -55) (undo-tree-id3407 . -55) (undo-tree-id3408 . -55) (undo-tree-id3409 . -55) (undo-tree-id3410 . -55) (undo-tree-id3411 . -55) (undo-tree-id3412 . -55) (undo-tree-id3413 . -55) (undo-tree-id3414 . -55) (undo-tree-id3415 . -55) (undo-tree-id3416 . -28) (undo-tree-id3417 . -28) (undo-tree-id3418 . -28) (undo-tree-id3419 . -28) (undo-tree-id3420 . -28) (undo-tree-id3421 . -28) (undo-tree-id3422 . -28) (undo-tree-id3423 . -28) (undo-tree-id3424 . -28) (undo-tree-id3425 . -28) (undo-tree-id3426 . -28) (undo-tree-id3427 . -28) (undo-tree-id3428 . -28) (undo-tree-id3429 . -28) (undo-tree-id3430 . -28) (undo-tree-id3431 . -28) (undo-tree-id3432 . -28) (undo-tree-id3433 . -28) (undo-tree-id3434 . -28) (undo-tree-id3435 . -28) (undo-tree-id3436 . -28) (undo-tree-id3437 . -28) (undo-tree-id3438 . -28) (undo-tree-id3439 . -28) (undo-tree-id3440 . -28) (undo-tree-id3441 . -28) (undo-tree-id3442 . -28) (undo-tree-id3443 . -28) (undo-tree-id3444 . -56)) nil (25661 26447 456550 441000) 0 nil])
([nil nil ((927 . 1120) (#("
    
    for (img, lbl) in train_images.iter().zip(trn_lbl).take(50000) {
        network = network.forward_propagate(img.clone()).unwrap();

         network = network.backprop(lbl, EPSILON, VALUE);
        " 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t) 6 10 (fontified t) 10 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (fontified t) 25 27 (fontified t face font-lock-keyword-face) 27 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 61 (fontified t) 61 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t) 67 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-2-face)) 72 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t) 75 83 (fontified t) 83 90 (fontified t) 90 93 (fontified t) 93 100 (fontified t) 100 118 (fontified t) 118 119 (fontified t face (rainbow-delimiters-depth-3-face)) 119 123 (fontified t) 123 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-4-face)) 129 130 (fontified t face (rainbow-delimiters-depth-4-face)) 130 131 (fontified t face (rainbow-delimiters-depth-3-face)) 131 132 (fontified t) 132 138 (fontified t) 138 139 (fontified t face (rainbow-delimiters-depth-3-face)) 139 140 (fontified t face (rainbow-delimiters-depth-3-face)) 140 142 (fontified t) 142 143 (fontified t) 143 152 (fontified t) 152 161 (fontified t) 161 162 (fontified t) 162 169 (fontified t) 169 178 (fontified t) 178 179 (fontified t face (rainbow-delimiters-depth-3-face)) 179 184 (fontified t) 184 191 (fontified t face font-lock-type-face) 191 193 (fontified t) 193 198 (fontified t face font-lock-type-face) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 200 (fontified t) 200 201 (fontified t) 201 209 (fontified t)) . 927) (undo-tree-id3020 . 49) (undo-tree-id3021 . -6) (undo-tree-id3022 . -6) (undo-tree-id3023 . -6) (undo-tree-id3024 . -6) (undo-tree-id3025 . 203) (undo-tree-id3026 . -6) (undo-tree-id3027 . -6) (undo-tree-id3028 . -143) (undo-tree-id3029 . -143) (undo-tree-id3030 . -143) (undo-tree-id3031 . -143) (undo-tree-id3032 . -6) (undo-tree-id3033 . -6) (undo-tree-id3034 . -97) (undo-tree-id3035 . -97) (undo-tree-id3036 . -143) (undo-tree-id3037 . -143) (undo-tree-id3038 . -75) (undo-tree-id3039 . -143) (undo-tree-id3040 . -143) (undo-tree-id3041 . -143) (undo-tree-id3042 . -192) (undo-tree-id3043 . -209) (undo-tree-id3044 . -159) (undo-tree-id3045 . -159) (undo-tree-id3046 . -159) (undo-tree-id3047 . -159) (undo-tree-id3048 . -159) (undo-tree-id3049 . -159) (undo-tree-id3050 . -159) (undo-tree-id3051 . -159) (undo-tree-id3052 . -159) (undo-tree-id3053 . -159) (undo-tree-id3054 . -159) (undo-tree-id3055 . -159) (undo-tree-id3056 . -159) (undo-tree-id3057 . -159) (undo-tree-id3058 . -159) (undo-tree-id3059 . -159) (undo-tree-id3060 . -159) (undo-tree-id3061 . -159) (undo-tree-id3062 . -159) (undo-tree-id3063 . -159) (undo-tree-id3064 . -159) (undo-tree-id3065 . -159) (undo-tree-id3066 . -159) (undo-tree-id3067 . -159) (undo-tree-id3068 . -159) (undo-tree-id3069 . -159) (undo-tree-id3070 . -159) (undo-tree-id3071 . -159) (undo-tree-id3072 . -159) (undo-tree-id3073 . -159) (undo-tree-id3074 . -159) (undo-tree-id3075 . -159) (undo-tree-id3076 . -159) (undo-tree-id3077 . -159) (undo-tree-id3078 . -159) (undo-tree-id3079 . -159) (undo-tree-id3080 . -159) (undo-tree-id3081 . -159) (undo-tree-id3082 . -159) (undo-tree-id3083 . -159) (undo-tree-id3084 . -159) (undo-tree-id3085 . -159) (undo-tree-id3086 . -142) (undo-tree-id3087 . -142) (undo-tree-id3088 . -142) (undo-tree-id3089 . -142) (undo-tree-id3090 . -142) (undo-tree-id3091 . -142) (undo-tree-id3092 . -142) (undo-tree-id3093 . -142) (undo-tree-id3094 . -142) (undo-tree-id3095 . -142) (undo-tree-id3096 . -142) (undo-tree-id3097 . -142) (undo-tree-id3098 . -142) (undo-tree-id3099 . -142) (undo-tree-id3100 . -142) (undo-tree-id3101 . -142) (undo-tree-id3102 . -142) (undo-tree-id3103 . -142) (undo-tree-id3104 . -142) (undo-tree-id3105 . -142) (undo-tree-id3106 . -142) (undo-tree-id3107 . -91) (undo-tree-id3108 . -91) (undo-tree-id3109 . -91) (undo-tree-id3110 . -91) (undo-tree-id3111 . -91) (undo-tree-id3112 . -91) (undo-tree-id3113 . -91) (undo-tree-id3114 . -91) (undo-tree-id3115 . -91) (undo-tree-id3116 . -91) (undo-tree-id3117 . -91) (undo-tree-id3118 . -91) (undo-tree-id3119 . -91) (undo-tree-id3120 . -91) (undo-tree-id3121 . -91) (undo-tree-id3122 . -91) (undo-tree-id3123 . -91) (undo-tree-id3124 . -91) (undo-tree-id3125 . -91) (undo-tree-id3126 . -91) (undo-tree-id3127 . -91) (undo-tree-id3128 . -22) (undo-tree-id3129 . -22) (undo-tree-id3130 . -22) (undo-tree-id3131 . -22) (undo-tree-id3132 . -22) (undo-tree-id3133 . -22) (undo-tree-id3134 . -22) (undo-tree-id3135 . -22) (undo-tree-id3136 . -22) (undo-tree-id3137 . -22) (undo-tree-id3138 . -22) (undo-tree-id3139 . -22) (undo-tree-id3140 . -22) (undo-tree-id3141 . -22) (undo-tree-id3142 . -22) (undo-tree-id3143 . -22) (undo-tree-id3144 . -22) (undo-tree-id3145 . -22) (undo-tree-id3146 . -22) (undo-tree-id3147 . -22) (undo-tree-id3148 . -22) (undo-tree-id3149 . -6) (undo-tree-id3150 . -6) (undo-tree-id3151 . -6) (undo-tree-id3152 . -6) (undo-tree-id3153 . -6) (undo-tree-id3154 . -6) (undo-tree-id3155 . -6) (undo-tree-id3156 . -6) (undo-tree-id3157 . -6) (undo-tree-id3158 . -6) (undo-tree-id3159 . -6) (undo-tree-id3160 . -6) (undo-tree-id3161 . -6) (undo-tree-id3162 . -6) (undo-tree-id3163 . -6) (undo-tree-id3164 . -6) (undo-tree-id3165 . -6) (undo-tree-id3166 . -6) (undo-tree-id3167 . -6) (undo-tree-id3168 . -6) (undo-tree-id3169 . -6) (undo-tree-id3170 . -6) (undo-tree-id3171 . -6) (undo-tree-id3172 . -6) (undo-tree-id3173 . -6) (undo-tree-id3174 . -6) (undo-tree-id3175 . -6) (undo-tree-id3176 . -6) (undo-tree-id3177 . -6) (undo-tree-id3178 . -6) (undo-tree-id3179 . -6) (undo-tree-id3180 . -6) (undo-tree-id3181 . -6) (undo-tree-id3182 . -6) (undo-tree-id3183 . -6) (undo-tree-id3184 . -6) (undo-tree-id3185 . -6) (undo-tree-id3186 . -6) (undo-tree-id3187 . -6) (undo-tree-id3188 . -6) (undo-tree-id3189 . -6) (undo-tree-id3190 . -6) (undo-tree-id3191 . -6) (undo-tree-id3192 . -6) (undo-tree-id3193 . -6) (undo-tree-id3194 . -6) (undo-tree-id3195 . -6) (undo-tree-id3196 . -6) (undo-tree-id3197 . -6) (undo-tree-id3198 . -6) (undo-tree-id3199 . -6) (undo-tree-id3200 . -6) (undo-tree-id3201 . -6) (undo-tree-id3202 . -6) (undo-tree-id3203 . -6) (undo-tree-id3204 . -6) (undo-tree-id3205 . -6) (undo-tree-id3206 . -6) (undo-tree-id3207 . -6) (undo-tree-id3208 . -6) (undo-tree-id3209 . -6) (undo-tree-id3210 . -6) (undo-tree-id3211 . -6) (undo-tree-id3212 . -6) (undo-tree-id3213 . -6) (undo-tree-id3214 . -6) (undo-tree-id3215 . -6) (undo-tree-id3216 . -6) (undo-tree-id3217 . -6) (undo-tree-id3218 . -6) (undo-tree-id3219 . -6) (undo-tree-id3220 . -6) (undo-tree-id3221 . -6) (undo-tree-id3222 . -6) (undo-tree-id3223 . -6) (undo-tree-id3224 . -6) (undo-tree-id3225 . -6) (undo-tree-id3226 . -6) (undo-tree-id3227 . -6) (undo-tree-id3228 . -6) (undo-tree-id3229 . -6) (undo-tree-id3230 . -6) (undo-tree-id3231 . -6) (undo-tree-id3232 . -6) (undo-tree-id3233 . -6) (undo-tree-id3234 . -6) (undo-tree-id3235 . -6) (undo-tree-id3236 . -6) (undo-tree-id3237 . -6) (undo-tree-id3238 . -6) (undo-tree-id3239 . -6) (undo-tree-id3240 . -6) (undo-tree-id3241 . -6) (undo-tree-id3242 . -6) (undo-tree-id3243 . -6) (undo-tree-id3244 . -6) (undo-tree-id3245 . -6) (undo-tree-id3246 . -6) (undo-tree-id3247 . -6) (undo-tree-id3248 . -6) (undo-tree-id3249 . -6) (undo-tree-id3250 . -6) (undo-tree-id3251 . -6) (undo-tree-id3252 . -6) (undo-tree-id3253 . -6) (undo-tree-id3254 . -6) (undo-tree-id3255 . -6) (undo-tree-id3256 . -6) (undo-tree-id3257 . -6) (undo-tree-id3258 . -6) (undo-tree-id3259 . -6) (undo-tree-id3260 . -6) (undo-tree-id3261 . -6) (undo-tree-id3262 . -6) (undo-tree-id3263 . -6) (undo-tree-id3264 . -6) (undo-tree-id3265 . -6) (undo-tree-id3266 . -6) (undo-tree-id3267 . -6) (undo-tree-id3268 . -6) (undo-tree-id3269 . -6) (undo-tree-id3270 . -6) (undo-tree-id3271 . -6) (undo-tree-id3272 . -6) (undo-tree-id3273 . -6) (undo-tree-id3274 . -6) (undo-tree-id3275 . -6) (undo-tree-id3276 . -6) (undo-tree-id3277 . -6) (undo-tree-id3278 . -6) (undo-tree-id3279 . -6) (undo-tree-id3280 . -6) (undo-tree-id3281 . -6) (undo-tree-id3282 . -6) (undo-tree-id3283 . -6) (undo-tree-id3284 . -6) (undo-tree-id3285 . -6) (undo-tree-id3286 . -6) (undo-tree-id3287 . -6) (undo-tree-id3288 . -6) (undo-tree-id3289 . -6) (undo-tree-id3290 . -6) (undo-tree-id3291 . -6) (undo-tree-id3292 . -6) (undo-tree-id3293 . -6) (undo-tree-id3294 . -6) (undo-tree-id3295 . -6) (undo-tree-id3296 . -6) (undo-tree-id3297 . -6) (undo-tree-id3298 . -6) (undo-tree-id3299 . -6) (undo-tree-id3300 . -6) (undo-tree-id3301 . -6) (undo-tree-id3302 . -6) (undo-tree-id3303 . -6) (undo-tree-id3304 . -6) (undo-tree-id3305 . -6) (undo-tree-id3306 . -6) (undo-tree-id3307 . -6) (undo-tree-id3308 . -6) (undo-tree-id3309 . -6) (undo-tree-id3310 . -6) (undo-tree-id3311 . -6) (undo-tree-id3312 . -6) (undo-tree-id3313 . -6) (undo-tree-id3314 . -6) (undo-tree-id3315 . -6) (undo-tree-id3316 . -6) (undo-tree-id3317 . -6) (undo-tree-id3318 . -6) (undo-tree-id3319 . -6) (undo-tree-id3320 . -6) (undo-tree-id3321 . -6) (undo-tree-id3322 . -6) (undo-tree-id3323 . -6) (undo-tree-id3324 . -6) (undo-tree-id3325 . -6) (undo-tree-id3326 . -6) (undo-tree-id3327 . -6) (undo-tree-id3328 . -6) (undo-tree-id3329 . -6) (undo-tree-id3330 . -6) (undo-tree-id3331 . -6) (undo-tree-id3332 . -6) (undo-tree-id3333 . -6) (undo-tree-id3334 . -6) (undo-tree-id3335 . -6) (undo-tree-id3336 . -6) (undo-tree-id3337 . -6) (undo-tree-id3338 . -6) (undo-tree-id3339 . -6) (undo-tree-id3340 . -6) (undo-tree-id3341 . -6) (undo-tree-id3342 . -6) (undo-tree-id3343 . -6) (undo-tree-id3344 . -6) (undo-tree-id3345 . -6) (undo-tree-id3346 . -6) (undo-tree-id3347 . -6) (undo-tree-id3348 . -6) (undo-tree-id3349 . -6) (undo-tree-id3350 . -6) (undo-tree-id3351 . -6) (undo-tree-id3352 . -6) (undo-tree-id3353 . -6) (undo-tree-id3354 . -6) (undo-tree-id3355 . -6) (undo-tree-id3356 . -6) (undo-tree-id3357 . -6) (undo-tree-id3358 . -6) (undo-tree-id3359 . -6) (undo-tree-id3360 . -6) (undo-tree-id3361 . -6) (undo-tree-id3362 . -6) (undo-tree-id3363 . -6) (undo-tree-id3364 . -6)) nil (25661 26447 456490 524000) 0 nil])
([nil nil ((#("VALUE" 0 5 (fontified t face font-lock-type-face)) . 1113) (undo-tree-id3693 . -4) (undo-tree-id3694 . -5) (t 25661 26447 469317 636000)) nil (25661 26487 11873 573000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t)) . -1111) (undo-tree-id3447 . -2) (undo-tree-id3448 . -2) (undo-tree-id3449 . -2) (undo-tree-id3450 . -2) (undo-tree-id3451 . -2) (undo-tree-id3452 . -2) (undo-tree-id3453 . -2) (undo-tree-id3454 . -2) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2) (undo-tree-id3457 . -2) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) (undo-tree-id3460 . -2) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -2) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) (undo-tree-id3470 . -2) (undo-tree-id3471 . -2) (undo-tree-id3472 . -2) (undo-tree-id3473 . -2) (undo-tree-id3474 . -2) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2) (undo-tree-id3477 . -2) (undo-tree-id3478 . -2) (undo-tree-id3479 . -2) (undo-tree-id3480 . -2) (undo-tree-id3481 . -2) (undo-tree-id3482 . -2) (undo-tree-id3483 . -2) (undo-tree-id3484 . -2) (undo-tree-id3485 . -2) (undo-tree-id3486 . -2) (undo-tree-id3487 . -2) (undo-tree-id3488 . -2) (undo-tree-id3489 . -2) (undo-tree-id3490 . -2) (undo-tree-id3491 . -2) (undo-tree-id3492 . -2) (undo-tree-id3493 . -2) (undo-tree-id3494 . -2) (undo-tree-id3495 . -2) (undo-tree-id3496 . -2) (undo-tree-id3497 . -2) (undo-tree-id3498 . -2) (undo-tree-id3499 . -2) (undo-tree-id3500 . -2) (undo-tree-id3501 . -2) (undo-tree-id3502 . -2) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) (undo-tree-id3505 . -2) (undo-tree-id3506 . -2) (undo-tree-id3507 . -2) (undo-tree-id3508 . -2) (undo-tree-id3509 . -2) (undo-tree-id3510 . -2) (undo-tree-id3511 . -2) (undo-tree-id3512 . -2) (undo-tree-id3513 . -2) (undo-tree-id3514 . -2) (undo-tree-id3515 . -2) (undo-tree-id3516 . -2) (undo-tree-id3517 . -2) (undo-tree-id3518 . -2) (undo-tree-id3519 . -2) (undo-tree-id3520 . -2) (undo-tree-id3521 . -2) (undo-tree-id3522 . -2) (undo-tree-id3523 . -2) (undo-tree-id3524 . -2) (undo-tree-id3525 . -2) (undo-tree-id3526 . -2) (undo-tree-id3527 . -2) (undo-tree-id3528 . -2) (undo-tree-id3529 . -2) (undo-tree-id3530 . -2) (undo-tree-id3531 . -2) (undo-tree-id3532 . -2) (undo-tree-id3533 . -2) (undo-tree-id3534 . -2) (undo-tree-id3535 . -2) (undo-tree-id3536 . -2) (undo-tree-id3537 . -2) (undo-tree-id3538 . -2) (undo-tree-id3539 . -2) (undo-tree-id3540 . -2) (undo-tree-id3541 . -2) (undo-tree-id3542 . -2) (undo-tree-id3543 . -2) (undo-tree-id3544 . -2) (undo-tree-id3545 . -2) (undo-tree-id3546 . -2) (undo-tree-id3547 . -2) (undo-tree-id3548 . -2) (undo-tree-id3549 . -2) (undo-tree-id3550 . -2) (undo-tree-id3551 . -2) (undo-tree-id3552 . -2) (undo-tree-id3553 . -2) (undo-tree-id3554 . -2) (undo-tree-id3555 . -2) (undo-tree-id3556 . -2) (undo-tree-id3557 . -2) (undo-tree-id3558 . -2) (undo-tree-id3559 . -2) (undo-tree-id3560 . -2) (undo-tree-id3561 . -2) (undo-tree-id3562 . -2) (undo-tree-id3563 . -2) (undo-tree-id3564 . -2) (undo-tree-id3565 . -2) (undo-tree-id3566 . -2) (undo-tree-id3567 . -2) (undo-tree-id3568 . -2) (undo-tree-id3569 . -2) (undo-tree-id3570 . -2) (undo-tree-id3571 . -2) (undo-tree-id3572 . -2) (undo-tree-id3573 . -2) (undo-tree-id3574 . -2) (undo-tree-id3575 . -2) (undo-tree-id3576 . -2) (undo-tree-id3577 . -2) (undo-tree-id3578 . -2) (undo-tree-id3579 . -2) (undo-tree-id3580 . -2) (undo-tree-id3581 . -2) (undo-tree-id3582 . -2) (undo-tree-id3583 . -2) (undo-tree-id3584 . -2) (undo-tree-id3585 . -2) (undo-tree-id3586 . -2) (undo-tree-id3587 . -2) (undo-tree-id3588 . -2) (undo-tree-id3589 . -2) (undo-tree-id3590 . -2) (undo-tree-id3591 . -2) (undo-tree-id3592 . -2) (undo-tree-id3593 . -2) (undo-tree-id3594 . -2) (undo-tree-id3595 . -2) (undo-tree-id3596 . -2) (undo-tree-id3597 . -2) (undo-tree-id3598 . -2) (undo-tree-id3599 . -2) (undo-tree-id3600 . -2) (undo-tree-id3601 . -2) (undo-tree-id3602 . -2) (undo-tree-id3603 . -2) (undo-tree-id3604 . -2) (undo-tree-id3605 . -2) (undo-tree-id3606 . -2) (undo-tree-id3607 . -2) (undo-tree-id3608 . -2) (undo-tree-id3609 . -2) (undo-tree-id3610 . -2) (undo-tree-id3611 . -2) (undo-tree-id3612 . -2) (undo-tree-id3613 . -2) (undo-tree-id3614 . -2) (undo-tree-id3615 . -2) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) (undo-tree-id3619 . -2) (undo-tree-id3620 . -2) (undo-tree-id3621 . -2) (undo-tree-id3622 . -2) (undo-tree-id3623 . -2) (undo-tree-id3624 . -2) (undo-tree-id3625 . -2) (undo-tree-id3626 . -2) (undo-tree-id3627 . -2) (undo-tree-id3628 . -2) (undo-tree-id3629 . -2) (undo-tree-id3630 . -2) (undo-tree-id3631 . -2) (undo-tree-id3632 . -2) (undo-tree-id3633 . -2) (undo-tree-id3634 . -2) (undo-tree-id3635 . -2) (undo-tree-id3636 . -2) (undo-tree-id3637 . -2) (undo-tree-id3638 . -2) (undo-tree-id3639 . -2) (undo-tree-id3640 . -2) (undo-tree-id3641 . -2) (undo-tree-id3642 . -2) (undo-tree-id3643 . -2) (undo-tree-id3644 . -2) (undo-tree-id3645 . -2) (undo-tree-id3646 . -2) (undo-tree-id3647 . -2) (undo-tree-id3648 . -2) (undo-tree-id3649 . -2) (undo-tree-id3650 . -2) (undo-tree-id3651 . -2) (undo-tree-id3652 . -2) (undo-tree-id3653 . -2) (undo-tree-id3654 . -2) (undo-tree-id3655 . -2) (undo-tree-id3656 . -2) (undo-tree-id3657 . -2) (undo-tree-id3658 . -2) (undo-tree-id3659 . -2) (undo-tree-id3660 . -2) (undo-tree-id3661 . -2) (undo-tree-id3662 . -2) (undo-tree-id3663 . -2) (undo-tree-id3664 . -2) (undo-tree-id3665 . -2) (undo-tree-id3666 . -2) (undo-tree-id3667 . -2) (undo-tree-id3668 . -2) (undo-tree-id3669 . -2) (undo-tree-id3670 . -2) (undo-tree-id3671 . -2) (undo-tree-id3672 . -2) (undo-tree-id3673 . -2) (undo-tree-id3674 . -2) (undo-tree-id3675 . -2) (undo-tree-id3676 . -2) (undo-tree-id3677 . -2) (undo-tree-id3678 . -2) (undo-tree-id3679 . -2) (undo-tree-id3680 . -2) (undo-tree-id3681 . -2) (undo-tree-id3682 . -2) (undo-tree-id3683 . -2) (undo-tree-id3684 . -2) (undo-tree-id3685 . -2) (undo-tree-id3686 . -2) (undo-tree-id3687 . -2) (undo-tree-id3688 . -2) (undo-tree-id3689 . -2) (undo-tree-id3690 . -2) (undo-tree-id3691 . -2) (undo-tree-id3692 . -2)) nil (25661 26487 11859 533000) 0 nil])
([nil nil ((#("const VALUE: f64 = 1e-3;
" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-variable-name-face) 11 13 (fontified t) 13 16 (fontified t face font-lock-type-face) 16 24 (fontified t) 24 25 (fontified t)) . 2277) (undo-tree-id3695 . -24) (undo-tree-id3696 . -23) (undo-tree-id3697 . -6) (undo-tree-id3698 . -11) (undo-tree-id3699 . -25) (undo-tree-id3700 . -25) (undo-tree-id3701 . -25) (undo-tree-id3702 . -25) (undo-tree-id3703 . -25) (undo-tree-id3704 . -25) (undo-tree-id3705 . -25) (undo-tree-id3706 . -25) (undo-tree-id3707 . -25) (undo-tree-id3708 . -25) (undo-tree-id3709 . -25) (undo-tree-id3710 . -25) (undo-tree-id3711 . -23) (undo-tree-id3712 . -23) (undo-tree-id3713 . -23) (undo-tree-id3714 . -23) (undo-tree-id3715 . -23) (undo-tree-id3716 . -23) (undo-tree-id3717 . -23) (undo-tree-id3718 . -23) (undo-tree-id3719 . -23) (undo-tree-id3720 . -23) (undo-tree-id3721 . -23) (undo-tree-id3722 . -23) (undo-tree-id3723 . -23) (undo-tree-id3724 . -23) (undo-tree-id3725 . -23) (undo-tree-id3726 . -23) (undo-tree-id3727 . -23) (undo-tree-id3728 . -23) (undo-tree-id3729 . -23) (undo-tree-id3730 . -23) (undo-tree-id3731 . -23) (undo-tree-id3732 . -23) (undo-tree-id3733 . -23) (undo-tree-id3734 . -23) (undo-tree-id3735 . -23) (undo-tree-id3736 . -23) (undo-tree-id3737 . -23) (undo-tree-id3738 . -23) (undo-tree-id3739 . -23) (undo-tree-id3740 . -23) (undo-tree-id3741 . -23) (undo-tree-id3742 . -23) (undo-tree-id3743 . -23) (undo-tree-id3744 . -23) (undo-tree-id3745 . -23) (undo-tree-id3746 . -23) (undo-tree-id3747 . -23) (undo-tree-id3748 . -23) (undo-tree-id3749 . -23) (undo-tree-id3750 . -23) (undo-tree-id3751 . -23) (undo-tree-id3752 . -23) (undo-tree-id3753 . -25) (undo-tree-id3754 . -25) (undo-tree-id3755 . -25) (undo-tree-id3756 . -25) (undo-tree-id3757 . -25) (undo-tree-id3758 . -25) (undo-tree-id3759 . -25) (undo-tree-id3760 . -25) (undo-tree-id3761 . -25) (undo-tree-id3762 . -25) (undo-tree-id3763 . -25) (undo-tree-id3764 . -25) (undo-tree-id3765 . -25) (undo-tree-id3766 . -25) (undo-tree-id3767 . -25) (undo-tree-id3768 . -25) (undo-tree-id3769 . -25) (undo-tree-id3770 . -25) (undo-tree-id3771 . -25) (undo-tree-id3772 . -25) (undo-tree-id3773 . -25) (undo-tree-id3774 . -25) (undo-tree-id3775 . -25) (undo-tree-id3776 . -25) (undo-tree-id3777 . -25) (undo-tree-id3778 . -25) (undo-tree-id3779 . -25) (undo-tree-id3780 . -25) (undo-tree-id3781 . -23) (undo-tree-id3782 . -23) (undo-tree-id3783 . -23) (undo-tree-id3784 . -23) (undo-tree-id3785 . -23) (undo-tree-id3786 . -23) (undo-tree-id3787 . -23) (undo-tree-id3788 . -23) (undo-tree-id3789 . -23) (undo-tree-id3790 . -23) (undo-tree-id3791 . -23) (undo-tree-id3792 . -23) (undo-tree-id3793 . -23) (undo-tree-id3794 . -23) (undo-tree-id3795 . -23) (undo-tree-id3796 . -23) (undo-tree-id3797 . -23) (undo-tree-id3798 . -23) (undo-tree-id3799 . -23) (undo-tree-id3800 . -23) (undo-tree-id3801 . -23) (undo-tree-id3802 . -23) (undo-tree-id3803 . -23) (undo-tree-id3804 . -23) (undo-tree-id3805 . -23) (undo-tree-id3806 . -23) (undo-tree-id3807 . -23) (undo-tree-id3808 . -23) (undo-tree-id3809 . -23) (undo-tree-id3810 . -23) (undo-tree-id3811 . -23) (undo-tree-id3812 . -23) (undo-tree-id3813 . -23) (undo-tree-id3814 . -23) (undo-tree-id3815 . -23) (undo-tree-id3816 . -23) (undo-tree-id3817 . -23) (undo-tree-id3818 . -23) (undo-tree-id3819 . -23) (undo-tree-id3820 . -23) (undo-tree-id3821 . -23) (undo-tree-id3822 . -23) (undo-tree-id3823 . -23) (undo-tree-id3824 . -23) (undo-tree-id3825 . -23) (undo-tree-id3826 . -23) (undo-tree-id3827 . -23) (undo-tree-id3828 . -23) (undo-tree-id3829 . -23) (undo-tree-id3830 . -23) (undo-tree-id3831 . -23) (undo-tree-id3832 . -23) (undo-tree-id3833 . -23) (undo-tree-id3834 . -23) (undo-tree-id3835 . -23) (undo-tree-id3836 . -23) (undo-tree-id3837 . -23) (undo-tree-id3838 . -23) (undo-tree-id3839 . -23) (undo-tree-id3840 . -23) (undo-tree-id3841 . -23) (undo-tree-id3842 . -23) (undo-tree-id3843 . -23) (undo-tree-id3844 . -23) (undo-tree-id3845 . -23) (undo-tree-id3846 . -23) (undo-tree-id3847 . -23) (undo-tree-id3848 . -23) (undo-tree-id3849 . -23) (undo-tree-id3850 . -23) (undo-tree-id3851 . -23) (undo-tree-id3852 . -23) (undo-tree-id3853 . -23) (undo-tree-id3854 . -23) (undo-tree-id3855 . -23) (undo-tree-id3856 . -23) (undo-tree-id3857 . -23) (undo-tree-id3858 . -23) (undo-tree-id3859 . -23) (undo-tree-id3860 . -23) (undo-tree-id3861 . -23) (undo-tree-id3862 . -23) (undo-tree-id3863 . -23) (undo-tree-id3864 . -23) (undo-tree-id3865 . -25) 2300 (t 25661 26487 26398 356000)) nil (25661 26499 923717 941000) 0 nil])
([nil nil ((1759 . 1768) (1750 . 1759) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1750) (undo-tree-id3868 . -1) 1751 (1748 . 1751) (1747 . 1749) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1747) (1747 . 1748) (apply yas--snippet-revive 1738 1748 #s(yas--snippet nil nil #s(yas--exit 1747 nil) 120 nil nil #s(yas--field 1 1738 1776 nil nil nil t #s(yas--exit 1776 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1747 nil) 120 nil nil #s(yas--field 1 1738 1776 nil nil nil t #s(yas--exit 1776 nil)) nil)) (1738 . 1748) (#("println!($0)" 0 12 (fontified nil)) . 1738) (undo-tree-id3869 . 12) (1738 . 1750) (#("print" 0 5 (fontified nil)) . 1738) (undo-tree-id3870 . 5) (1738 . 1743) (#("println!(…)" 0 11 (fontified nil)) . -1738) (undo-tree-id3871 . 11) (1738 . 1749) (#("print" 0 5 (fontified t)) . -1738) (undo-tree-id3872 . -5) (undo-tree-id3873 . -5) (undo-tree-id3874 . 1) (undo-tree-id3875 . -4) (undo-tree-id3876 . -4) (undo-tree-id3877 . -4) 1743 (1742 . 1743) (#("t" 0 1 (fontified t)) . -1742) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (#("_" 0 1 (fontified t)) . -1743) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (#("i" 0 1 (fontified t)) . -1744) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (#("m" 0 1 (fontified t)) . -1745) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (#("a" 0 1 (fontified t)) . -1746) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (#("g" 0 1 (fontified t)) . -1747) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (#("e" 0 1 (fontified t)) . -1748) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) 1749 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1749) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1750) (undo-tree-id3918 . 1) (undo-tree-id3919 . -1) (undo-tree-id3920 . 1) (#("train_image" 0 11 (fontified t)) . 1750) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1738 1776 nil nil nil t #s(yas--exit 1776 nil))) #s(yas--exit 1776 nil) 119 nil #s(yas--field 1 1738 1776 nil nil nil t #s(yas--exit 1776 nil)) nil nil)) (1738 . 1762) (#("print_image(${1:train_image})$0" 0 31 (fontified nil)) . 1738) (1738 . 1769) (#("pr" 0 2 (fontified nil)) . 1738) (1738 . 1740) (#("print_image(…)" 0 14 (fontified nil)) . -1738) (1738 . 1752) (#("pr" 0 2 (fontified t)) . -1738) (undo-tree-id3921 . -2) (undo-tree-id3922 . -2) 1740 (1738 . 1740) (1734 . 1738) (#("    " 0 4 (fontified nil)) . 1733) (undo-tree-id3923 . -4) (1732 . 1738) (t 25661 26499 939866 834000)) nil (25661 27073 585787 888000) 0 nil])
([nil nil ((1771 . 1776) (1770 . 1771) (#(" " 0 1 (fontified t)) . -1770) (undo-tree-id3867 . -1) 1771 (1770 . 1771)) nil (25661 27073 585747 587000) 0 nil])
([nil nil ((apply yas--snippet-revive 1738 1776 #s(yas--snippet nil (#s(yas--field 1 1738 1776 nil nil nil t #s(yas--exit 1776 nil))) #s(yas--exit 1776 nil) 119 nil #s(yas--field 1 1738 1776 nil nil nil t #s(yas--exit 1776 nil)) nil nil))) nil (25661 27073 585744 460000) 0 nil])
([nil nil ((1773 . 1777) (#("    " 0 4 (fontified nil)) . 1772) (undo-tree-id3866 . -4) (1776 . 1777)) nil (25661 27073 585739 880000) 0 nil])
([nil nil ((#("
    
" 0 5 (fontified t) 5 6 (fontified t)) . 1772) (undo-tree-id3944 . 1) (t 25661 27073 625861 91000)) nil (25661 27854 107507 891000) 0 nil])
([nil nil ((1796 . 1800) (1794 . 1796) (#(";" 0 1 (fontified t face font-lock-string-face)) . -1794) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) 1795 (1790 . 1795) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1790) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1791) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) 1792 (1790 . 1792) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1790) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1791) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1792) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -1793) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1794) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) 1795 (1790 . 1795) (1789 . 1791) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1789) (#("filename" 0 8 (fontified nil)) . 1790) (1789 . 1790) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1789 1801 nil nil nil t #s(yas--exit 1802 nil))) #s(yas--exit 1802 nil) 132 nil #s(yas--field 1 1789 1801 nil nil nil t #s(yas--exit 1802 nil)) nil nil)) (1784 . 1798) (#("save(${1:filename})$0" 0 21 (fontified nil)) . 1784) (1784 . 1805) (#("sa" 0 2 (fontified nil)) . 1784) (1784 . 1786) (#("save(…)" 0 7 (fontified nil)) . -1784) (1784 . 1791) (#("sa" 0 2 (fontified t)) . -1784) (undo-tree-id3940 . -2) (undo-tree-id3941 . -2) 1786 (1783 . 1786) (1776 . 1783) (#("ne" 0 2 (fontified nil)) . 1776) (1776 . 1778) (#("network" 0 7 (fontified nil)) . -1776) (1776 . 1783) (#("ne" 0 2 (fontified t)) . -1776) (undo-tree-id3942 . -2) (undo-tree-id3943 . -2) 1778 (1776 . 1778) (1771 . 1776) (t 25661 27073 702528 557000)) nil (25661 27854 107501 984000) 0 nil])
([nil nil ((1802 . 1803) (apply yas--snippet-revive 1784 1802 #s(yas--snippet nil (#s(yas--field 1 1789 1801 nil nil nil t #s(yas--exit 1802 nil))) #s(yas--exit 1802 nil) 132 nil #s(yas--field 1 1789 1801 nil nil nil t #s(yas--exit 1802 nil)) nil nil))) nil (25661 27854 107467 656000) 0 nil])
([nil nil ((apply yas--snippet-revive 1803 1811 #s(yas--snippet nil nil #s(yas--exit 1811 nil) 133 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1811 nil) 133 nil nil nil nil)) (1803 . 1811) (#("unwrap()$0" 0 10 (fontified nil)) . 1803) (1803 . 1813) (#("un" 0 2 (fontified nil)) . 1803) (1803 . 1805) (#("unwrap()" 0 8 (fontified nil)) . -1803) (1803 . 1811) (#("un" 0 2 (fontified t)) . -1803) (undo-tree-id3945 . -2) (undo-tree-id3946 . -2) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -2) (undo-tree-id3971 . -2) (undo-tree-id3972 . -2) (undo-tree-id3973 . -2) (undo-tree-id3974 . -2) (undo-tree-id3975 . -2) (undo-tree-id3976 . -2) (undo-tree-id3977 . -2) (undo-tree-id3978 . -2) (undo-tree-id3979 . -2) (undo-tree-id3980 . -2) (undo-tree-id3981 . -2) (undo-tree-id3982 . -2) (undo-tree-id3983 . -2) (undo-tree-id3984 . -2) (undo-tree-id3985 . -2) (undo-tree-id3986 . -2) (undo-tree-id3987 . -2) (undo-tree-id3988 . -2) (undo-tree-id3989 . -2) (undo-tree-id3990 . -2) (undo-tree-id3991 . -2) (undo-tree-id3992 . -2) (undo-tree-id3993 . -2) (undo-tree-id3994 . -2) (undo-tree-id3995 . -2) (undo-tree-id3996 . -2) (undo-tree-id3997 . -2) (undo-tree-id3998 . -2) (undo-tree-id3999 . -2) (undo-tree-id4000 . -2) (undo-tree-id4001 . -2) (undo-tree-id4002 . -2) (undo-tree-id4003 . -2) (undo-tree-id4004 . -2) (undo-tree-id4005 . -2) (undo-tree-id4006 . -2) (undo-tree-id4007 . -2) (undo-tree-id4008 . -2) (undo-tree-id4009 . -2) (undo-tree-id4010 . -2) (undo-tree-id4011 . -2) (undo-tree-id4012 . -2) (undo-tree-id4013 . -2) (undo-tree-id4014 . -2) (undo-tree-id4015 . -2) (undo-tree-id4016 . -2) (undo-tree-id4017 . -2) (undo-tree-id4018 . -2) (undo-tree-id4019 . -2) (undo-tree-id4020 . -2) (undo-tree-id4021 . -2) (undo-tree-id4022 . -2) (undo-tree-id4023 . -2) (undo-tree-id4024 . -2) (undo-tree-id4025 . -2) (undo-tree-id4026 . -2) (undo-tree-id4027 . -2) (undo-tree-id4028 . -2) (undo-tree-id4029 . -2) (undo-tree-id4030 . -2) (undo-tree-id4031 . -2) (undo-tree-id4032 . -2) (undo-tree-id4033 . -2) (undo-tree-id4034 . -2) (undo-tree-id4035 . -2) (undo-tree-id4036 . -2) (undo-tree-id4037 . -2) (undo-tree-id4038 . -2) 1805 (1803 . 1805) (1802 . 1803) (t 25661 27854 120669 461000)) nil (25661 27859 711780 703000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 991) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (t 25661 27859 724061 227000)) nil (25661 27875 598334 386000) 0 nil])
([nil nil ((1071 . 1073) (t 25661 27875 610893 560000)) nil (25661 28030 905593 264000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1072) (undo-tree-id4041 . 1) (undo-tree-id4042 . 1) (undo-tree-id4043 . 1) (undo-tree-id4044 . -1)) nil (25661 28030 905591 514000) 0 nil])
([nil nil ((1085 . 1086) (#(")" 0 1 (fontified nil)) . -1085) (1084 . 1086) (1081 . 1084) (1079 . 1081)) nil (25661 28030 905572 801000) 0 nil])
([nil nil ((#("work" 0 4 (fontified t)) . 1075) (undo-tree-id4048 . -3) (t 25661 28030 922513 8000)) nil (25661 28048 26454 450000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1075) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) 1076 (1075 . 1076)) nil (25661 28048 26451 507000) 0 nil])
([nil nil ((1071 . 1075)) nil (25661 28048 26385 986000) 0 nil])
([nil nil ((1136 . 1137) (1133 . 1136) (#("net" 0 3 (fontified nil)) . 1133) (1133 . 1136) (#("net" 0 3 (fontified t)) . -1133) (undo-tree-id4380 . -3) (undo-tree-id4381 . -3) 1136 (1135 . 1136) (1133 . 1135) (1132 . 1133) (1130 . 1132) (1123 . 1130) (#("net" 0 3 (fontified nil)) . 1123) (1123 . 1126) (#("network" 0 7 (fontified nil)) . -1123) (1123 . 1130) (#("net" 0 3 (fontified t)) . -1123) (undo-tree-id4382 . -3) (undo-tree-id4383 . -3) 1126 (1123 . 1126) (#("l" 0 1 (fontified t)) . -1123) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (#("e" 0 1 (fontified t)) . -1124) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -1125) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) 1126 (1123 . 1126) (1122 . 1123) (#("	" 0 1 (fontified nil)) . 1121) (undo-tree-id4390 . -1) (1120 . 1123) (t 25661 28048 39358 152000)) nil (25661 28113 853466 108000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1139) (undo-tree-id4378 . -1) 1140 (1139 . 1140) (#("	" 0 1 (fontified nil)) . 1138) (undo-tree-id4379 . -1) (1137 . 1140)) nil (25661 28113 853455 522000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1139) (undo-tree-id4376 . 1) (undo-tree-id4377 . 1)) nil (25661 28113 853453 201000) 0 nil])
([nil nil ((947 . 949) (946 . 947) (940 . 946) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -940) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) 941 (937 . 941) (936 . 937) (935 . 936) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -935) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) 936 (931 . 936) (927 . 931) (#("    " 0 4 (fontified nil)) . 926) (undo-tree-id4375 . -4) (925 . 931)) nil (25661 28113 853450 389000) 0 nil])
([nil nil ((#("train_image" 0 11 (fontified t)) . 1203) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1203 1203 nil nil nil t #s(yas--exit 1204 nil))) #s(yas--exit 1204 nil) 135 nil #s(yas--field 1 1203 1203 nil nil nil t #s(yas--exit 1204 nil)) nil nil)) (1191 . 1215) (#("print_image(${1:train_image})$0" 0 31 (fontified nil)) . 1191) (1191 . 1222) (#("pr" 0 2 (fontified nil)) . 1191) (1191 . 1193) (#("print_image(…)" 0 14 (fontified nil)) . -1191) (1191 . 1205) (#("pr" 0 2 (fontified t)) . -1191) (undo-tree-id4364 . -2) (undo-tree-id4365 . -2) 1193 (1191 . 1193) (1186 . 1191) (1187 . 1188) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1186) (1186 . 1191) (1185 . 1187) (1176 . 1186) (1175 . 1176) (#("3" 0 1 (fontified t)) . -1175) (undo-tree-id4366 . -1) (#("0" 0 1 (fontified t)) . -1176) (undo-tree-id4367 . -1) 1177 (1172 . 1177) (1167 . 1172) (#("cou" 0 3 (fontified nil)) . 1167) (1167 . 1170) (#("count" 0 5 (fontified nil)) . -1167) (1167 . 1172) (#("cou" 0 3 (fontified t)) . -1167) (undo-tree-id4368 . -3) (undo-tree-id4369 . -3) 1170 (1164 . 1170) (1163 . 1164) (#("	" 0 1 (fontified nil)) . 1162) (undo-tree-id4370 . -1) (1161 . 1164)) nil (25661 28113 853442 749000) 0 nil])
([nil nil ((apply yas--snippet-revive 1191 1204 #s(yas--snippet nil (#s(yas--field 1 1203 1203 nil nil nil t #s(yas--exit 1204 nil))) #s(yas--exit 1204 nil) 135 nil #s(yas--field 1 1203 1203 nil nil nil t #s(yas--exit 1204 nil)) nil nil))) nil (25661 28113 853434 117000) 0 nil])
([nil nil ((#("	    print_image()
" 0 5 (fontified t) 5 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-4-face)) 17 18 (fontified t face (rainbow-delimiters-depth-4-face)) 18 19 (fontified t)) . 1186) (undo-tree-id4353 . 2) (undo-tree-id4354 . -18) (undo-tree-id4355 . -17) (undo-tree-id4356 . -16) (undo-tree-id4357 . -17) (undo-tree-id4358 . -16) (undo-tree-id4359 . -18) (undo-tree-id4360 . 3) (undo-tree-id4361 . -17) (undo-tree-id4362 . 2) (undo-tree-id4363 . -18) 1202) nil (25661 28113 853432 809000) 0 nil])
([nil nil ((1208 . 1212) (#("lo" 0 2 (fontified nil)) . 1208) (1208 . 1210) (#("loss" 0 4 (fontified nil)) . -1208) (1208 . 1212) (#("lo" 0 2 (fontified t face rust-string-interpolation)) . -1208) (undo-tree-id4340 . -2) (undo-tree-id4341 . -2) 1210 (1208 . 1210) (1207 . 1209) (1201 . 1207) (#("l" 0 1 (fontified t face font-lock-string-face)) . -1201) (undo-tree-id4342 . -1) 1202 (1201 . 1202) (1200 . 1202) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -1200) (1200 . 1201) (apply yas--snippet-revive 1191 1201 #s(yas--snippet nil nil #s(yas--exit 1200 nil) 136 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1200 nil) 136 nil nil nil nil)) (1191 . 1201) (#("println!($0)" 0 12 (fontified nil)) . 1191) (1191 . 1203) (#("pr" 0 2 (fontified nil)) . 1191) (1191 . 1193) (#("println!(…)" 0 11 (fontified nil)) . -1191) (1191 . 1202) (#("pr" 0 2 (fontified t)) . -1191) (undo-tree-id4343 . -2) (undo-tree-id4344 . -2) 1193 (1191 . 1193) (#("r" 0 1 (fontified t)) . -1191) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) 1192 (1191 . 1192) (#("l" 0 1 (fontified t)) . -1191) (undo-tree-id4347 . -1) (#("o" 0 1 (fontified t)) . -1192) (undo-tree-id4348 . -1) (#("s" 0 1 (fontified t)) . -1193) (undo-tree-id4349 . -1) (#("s" 0 1 (fontified t)) . -1194) (undo-tree-id4350 . -1) 1195 (1191 . 1195) (#("lo" 0 2 (fontified nil)) . 1191) (1191 . 1193) (#("loss" 0 4 (fontified nil)) . -1191) (1191 . 1195) (#("lo" 0 2 (fontified t)) . -1191) (undo-tree-id4351 . -2) (undo-tree-id4352 . -2) 1193 (1191 . 1193) (1185 . 1191)) nil (25661 28113 853422 874000) 0 nil])
([nil nil ((1215 . 1216)) nil (25661 28113 853408 671000) 0 nil])
([nil nil ((1227 . 1233) (1222 . 1227) (#("cou" 0 3 (fontified nil)) . 1222) (1222 . 1225) (#("count" 0 5 (fontified nil)) . -1222) (1222 . 1227) (#("cou" 0 3 (fontified t)) . -1222) (undo-tree-id4337 . -3) (undo-tree-id4338 . -3) 1225 (1222 . 1225) (1221 . 1222) (#("	" 0 1 (fontified nil)) . 1220) (undo-tree-id4339 . -1) (1219 . 1222)) nil (25661 28113 853406 839000) 0 nil])
([nil nil ((1146 . 1268) (#("	network = net;

	if count % 100 == 0 {
	    println!(\"loss: {loss}\");
	}

	count += 1;
" 0 1 (fontified t) 1 11 (fontified t) 11 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-3-face)) 39 40 (fontified t) 40 45 (fontified t) 45 53 (fontified t face rust-builtin-formatting-macro) 53 54 (fontified t face (rainbow-delimiters-depth-4-face)) 54 61 (fontified t face font-lock-string-face) 61 62 (fontified t face rust-string-interpolation) 62 66 (fontified t face rust-string-interpolation) 66 67 (fontified t face rust-string-interpolation) 67 68 (fontified t face font-lock-string-face) 68 69 (fontified t face (rainbow-delimiters-depth-4-face)) 69 70 (fontified t) 70 71 (fontified t) 71 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-3-face)) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 87 (fontified t) 87 88 (fontified t)) . 1146) (undo-tree-id4049 . 1) (undo-tree-id4050 . -71) (undo-tree-id4051 . -71) (undo-tree-id4052 . -71) (undo-tree-id4053 . -85) (undo-tree-id4054 . -85) (undo-tree-id4055 . -85) (undo-tree-id4056 . -85) (undo-tree-id4057 . -85) (undo-tree-id4058 . -85) (undo-tree-id4059 . -85) (undo-tree-id4060 . -85) (undo-tree-id4061 . -85) (undo-tree-id4062 . -85) (undo-tree-id4063 . -85) (undo-tree-id4064 . -85) (undo-tree-id4065 . -85) (undo-tree-id4066 . -85) (undo-tree-id4067 . -85) (undo-tree-id4068 . -85) (undo-tree-id4069 . -85) (undo-tree-id4070 . -85) (undo-tree-id4071 . -85) (undo-tree-id4072 . -85) (undo-tree-id4073 . -85) (undo-tree-id4074 . -85) (undo-tree-id4075 . -85) (undo-tree-id4076 . -85) (undo-tree-id4077 . -85) (undo-tree-id4078 . -85) (undo-tree-id4079 . -85) (undo-tree-id4080 . -85) (undo-tree-id4081 . -85) (undo-tree-id4082 . -85) (undo-tree-id4083 . -85) (undo-tree-id4084 . -85) (undo-tree-id4085 . -85) (undo-tree-id4086 . -85) (undo-tree-id4087 . -85) (undo-tree-id4088 . -85) (undo-tree-id4089 . -85) (undo-tree-id4090 . -85) (undo-tree-id4091 . -85) (undo-tree-id4092 . -85) (undo-tree-id4093 . -85) (undo-tree-id4094 . -85) (undo-tree-id4095 . -85) (undo-tree-id4096 . -85) (undo-tree-id4097 . -85) (undo-tree-id4098 . -85) (undo-tree-id4099 . -85) (undo-tree-id4100 . -85) (undo-tree-id4101 . -85) (undo-tree-id4102 . -85) (undo-tree-id4103 . -85) (undo-tree-id4104 . -85) (undo-tree-id4105 . -85) (undo-tree-id4106 . -85) (undo-tree-id4107 . -85) (undo-tree-id4108 . -85) (undo-tree-id4109 . -85) (undo-tree-id4110 . -85) (undo-tree-id4111 . -85) (undo-tree-id4112 . -85) (undo-tree-id4113 . -85) (undo-tree-id4114 . -85) (undo-tree-id4115 . -85) (undo-tree-id4116 . -85) (undo-tree-id4117 . -86) (undo-tree-id4118 . -86) (undo-tree-id4119 . -86) (undo-tree-id4120 . -86) (undo-tree-id4121 . -86) (undo-tree-id4122 . -86) (undo-tree-id4123 . -86) (undo-tree-id4124 . -86) (undo-tree-id4125 . -86) (undo-tree-id4126 . -86) (undo-tree-id4127 . -86) (undo-tree-id4128 . -86) (undo-tree-id4129 . -86) (undo-tree-id4130 . -86) (undo-tree-id4131 . -86) (undo-tree-id4132 . -86) (undo-tree-id4133 . -86) (undo-tree-id4134 . -86) (undo-tree-id4135 . -86) (undo-tree-id4136 . -86) (undo-tree-id4137 . -86) (undo-tree-id4138 . -86) (undo-tree-id4139 . -86) (undo-tree-id4140 . -86) (undo-tree-id4141 . -86) (undo-tree-id4142 . -86) (undo-tree-id4143 . -86) (undo-tree-id4144 . -86) (undo-tree-id4145 . -86) (undo-tree-id4146 . -86) (undo-tree-id4147 . -86) (undo-tree-id4148 . -86) (undo-tree-id4149 . -86) (undo-tree-id4150 . -86) (undo-tree-id4151 . -86) (undo-tree-id4152 . -86) (undo-tree-id4153 . -86) (undo-tree-id4154 . -86) (undo-tree-id4155 . -86) (undo-tree-id4156 . -86) (undo-tree-id4157 . -86) (undo-tree-id4158 . -86) (undo-tree-id4159 . -86) (undo-tree-id4160 . 1) (undo-tree-id4161 . -86) (undo-tree-id4162 . -86) (undo-tree-id4163 . -86) (undo-tree-id4164 . -86) (undo-tree-id4165 . -86) (undo-tree-id4166 . -86) (undo-tree-id4167 . -86) (undo-tree-id4168 . -86) (undo-tree-id4169 . -86) (undo-tree-id4170 . -86) (undo-tree-id4171 . -86) (undo-tree-id4172 . -86) (undo-tree-id4173 . -86) (undo-tree-id4174 . -86) (undo-tree-id4175 . -87) (undo-tree-id4176 . -87) (undo-tree-id4177 . -87) (undo-tree-id4178 . -87) (undo-tree-id4179 . -87) (undo-tree-id4180 . -87) (undo-tree-id4181 . -87) (undo-tree-id4182 . -87) (undo-tree-id4183 . -87) (undo-tree-id4184 . -87) (undo-tree-id4185 . -87) (undo-tree-id4186 . -87) (undo-tree-id4187 . -87) (undo-tree-id4188 . -87) (undo-tree-id4189 . -87) (undo-tree-id4190 . -87) (undo-tree-id4191 . -87) (undo-tree-id4192 . -87) (undo-tree-id4193 . -87) (undo-tree-id4194 . -87) (undo-tree-id4195 . -87) (undo-tree-id4196 . -87) (undo-tree-id4197 . -87) (undo-tree-id4198 . -87) (undo-tree-id4199 . -87) (undo-tree-id4200 . -87) (undo-tree-id4201 . -87) (undo-tree-id4202 . -87) (undo-tree-id4203 . -87) (undo-tree-id4204 . -87) (undo-tree-id4205 . -87) (undo-tree-id4206 . -87) (undo-tree-id4207 . -87) (undo-tree-id4208 . -87) (undo-tree-id4209 . -87) (undo-tree-id4210 . -87) (undo-tree-id4211 . -87) (undo-tree-id4212 . -87) (undo-tree-id4213 . -87) (undo-tree-id4214 . -87) (undo-tree-id4215 . -87) (undo-tree-id4216 . -87) (undo-tree-id4217 . -87) (undo-tree-id4218 . -87) (undo-tree-id4219 . -87) (undo-tree-id4220 . -87) (undo-tree-id4221 . -87) (undo-tree-id4222 . -87) (undo-tree-id4223 . -87) (undo-tree-id4224 . -87) (undo-tree-id4225 . -86) (undo-tree-id4226 . -86) (undo-tree-id4227 . -86) (undo-tree-id4228 . -86) (undo-tree-id4229 . -86) (undo-tree-id4230 . -86) (undo-tree-id4231 . -86) (undo-tree-id4232 . -86) (undo-tree-id4233 . -86) (undo-tree-id4234 . -75) (undo-tree-id4235 . -86) (undo-tree-id4236 . -86) (undo-tree-id4237 . -86) (undo-tree-id4238 . -86) (undo-tree-id4239 . -86) (undo-tree-id4240 . -86) (undo-tree-id4241 . -86) (undo-tree-id4242 . -86) (undo-tree-id4243 . -86) (undo-tree-id4244 . -86) (undo-tree-id4245 . -86) (undo-tree-id4246 . -86) (undo-tree-id4247 . -86) (undo-tree-id4248 . -86) (undo-tree-id4249 . -86) (undo-tree-id4250 . -86) (undo-tree-id4251 . -86) (undo-tree-id4252 . -86) (undo-tree-id4253 . -86) (undo-tree-id4254 . -86) (undo-tree-id4255 . -86) (undo-tree-id4256 . -86) (undo-tree-id4257 . -86) (undo-tree-id4258 . -86) (undo-tree-id4259 . -86) (undo-tree-id4260 . -86) (undo-tree-id4261 . -86) (undo-tree-id4262 . -86) (undo-tree-id4263 . -86) (undo-tree-id4264 . -86) (undo-tree-id4265 . -86) (undo-tree-id4266 . -86) (undo-tree-id4267 . -86) (undo-tree-id4268 . -86) (undo-tree-id4269 . -86) (undo-tree-id4270 . -86) (undo-tree-id4271 . -86) (undo-tree-id4272 . -86) (undo-tree-id4273 . -86) (undo-tree-id4274 . -86) (undo-tree-id4275 . -86) (undo-tree-id4276 . -86) (undo-tree-id4277 . -86) (undo-tree-id4278 . -86) (undo-tree-id4279 . -86) (undo-tree-id4280 . -86) (undo-tree-id4281 . -86) (undo-tree-id4282 . -86) (undo-tree-id4283 . -86) (undo-tree-id4284 . -86) (undo-tree-id4285 . -86) (undo-tree-id4286 . -86) (undo-tree-id4287 . -86) (undo-tree-id4288 . -86) (undo-tree-id4289 . -86) (undo-tree-id4290 . -86) (undo-tree-id4291 . -86) (undo-tree-id4292 . -86) (undo-tree-id4293 . -86) (undo-tree-id4294 . -86) (undo-tree-id4295 . -86) (undo-tree-id4296 . -86) (undo-tree-id4297 . -86) (undo-tree-id4298 . -86) (undo-tree-id4299 . -86) (undo-tree-id4300 . -86) (undo-tree-id4301 . -86) (undo-tree-id4302 . -86) (undo-tree-id4303 . -86) (undo-tree-id4304 . -86) (undo-tree-id4305 . -86) (undo-tree-id4306 . -86) (undo-tree-id4307 . -86) (undo-tree-id4308 . -86) (undo-tree-id4309 . -86) (undo-tree-id4310 . -86) (undo-tree-id4311 . -86) (undo-tree-id4312 . -86) (undo-tree-id4313 . -86) (undo-tree-id4314 . -86) (undo-tree-id4315 . -86) (undo-tree-id4316 . -86) (undo-tree-id4317 . -86) (undo-tree-id4318 . -86) (undo-tree-id4319 . -86) (undo-tree-id4320 . -86) (undo-tree-id4321 . -86) (undo-tree-id4322 . -86) (undo-tree-id4323 . -86) (undo-tree-id4324 . -86) (undo-tree-id4325 . -86) (undo-tree-id4326 . -86) (undo-tree-id4327 . -86) (undo-tree-id4328 . -86) (undo-tree-id4329 . -86) (undo-tree-id4330 . -86) (undo-tree-id4331 . -86) (undo-tree-id4332 . -86) (undo-tree-id4333 . -86) (undo-tree-id4334 . -86) (undo-tree-id4335 . -86) (undo-tree-id4336 . -86)) nil (25661 28113 853380 705000) 0 nil])
([nil nil ((946 . 949) (#("u" 0 1 (fontified nil)) . 946) (946 . 947) (#("u64" 0 3 (fontified nil)) . -946) (946 . 949) (#("u" 0 1 (fontified t)) . -946) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) 947 (944 . 947) (t 25661 28113 870044 555000)) nil (25661 28124 905424 737000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1010) (t 25661 28124 920159 770000)) nil (25661 28176 91364 778000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1010)) nil (25661 28176 91363 595000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 1010)) nil (25661 28176 91362 251000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . 1010)) nil (25661 28176 91361 356000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1010)) nil (25661 28176 91360 392000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1010) (undo-tree-id4504 . 1) (undo-tree-id4505 . -1)) nil (25661 28176 91359 182000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 1010)) nil (25661 28176 91357 76000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1010)) nil (25661 28176 91356 197000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1010)) nil (25661 28176 91355 180000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1010) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1)) nil (25661 28176 91353 503000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1010) (undo-tree-id4498 . 1) (undo-tree-id4499 . -1)) nil (25661 28176 91346 458000) 0 nil])
([nil nil ((1002 . 1019) (#("k" 0 1 (fontified t face font-lock-string-face)) . -1002) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) 1003 (988 . 1003) (#(" " 0 1 (fontified t face font-lock-string-face)) . -988) (undo-tree-id4508 . -1) 989 (972 . 989) (970 . 972) (969 . 971) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -969) (969 . 970) (apply yas--snippet-revive 960 970 #s(yas--snippet nil nil #s(yas--exit 969 nil) 137 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 969 nil) 137 nil nil nil nil)) (960 . 970) (#("println!($0)" 0 12 (fontified nil)) . 960) (960 . 972) (#("pr" 0 2 (fontified nil)) . 960) (960 . 962) (#("println!(…)" 0 11 (fontified nil)) . -960) (960 . 971) (#("pr" 0 2 (fontified t)) . -960) (undo-tree-id4509 . -2) (undo-tree-id4510 . -2) 962 (960 . 962) (956 . 960) (#("    " 0 4 (fontified nil)) . 955) (undo-tree-id4511 . -4) (954 . 960) (t 25661 28176 104026 767000)) nil (25661 28200 958130 879000) 0 nil])
([nil nil ((1021 . 1022)) nil (25661 28200 958110 407000) 0 nil])
([nil nil ((2031 . 2034) (t 25661 28200 970952 701000)) nil (25661 28370 737151 722000) 0 nil])
([nil nil ((2045 . 2047) (#(" " 0 1 (fontified t)) . -2045) (undo-tree-id4615 . -1) 2046 (2033 . 2046) (2032 . 2033) (#("
" 0 1 (fontified t)) . -2032) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (#("r" 0 1 (fontified t)) . -2033) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (#("u" 0 1 (fontified t)) . -2034) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (#("n" 0 1 (fontified t)) . -2035) (undo-tree-id4622 . -1) (#(" " 0 1 (fontified t)) . -2036) (undo-tree-id4623 . -1) (#("t" 0 1 (fontified t)) . -2037) (undo-tree-id4624 . -1) (#("h" 0 1 (fontified t)) . -2038) (undo-tree-id4625 . -1) (#("e" 0 1 (fontified t)) . -2039) (undo-tree-id4626 . -1) (#(" " 0 1 (fontified t)) . -2040) (undo-tree-id4627 . -1) (#("m" 0 1 (fontified t)) . -2041) (undo-tree-id4628 . -1) (#("o" 0 1 (fontified t)) . -2042) (undo-tree-id4629 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -2043) (undo-tree-id4630 . -1) (#("e" 0 1 (fontified t)) . -2044) (undo-tree-id4631 . -1) 2045 (#(" " 0 1 (fontified t)) . -2045) (undo-tree-id4632 . -1) 2046 (2033 . 2046)) nil (25661 28370 737146 970000) 0 nil])
([nil nil ((2050 . 2054) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2050) (2050 . 2054) (2049 . 2051) (2047 . 2050)) nil (25661 28370 737125 821000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -2056) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) 2057 (2056 . 2057) (2052 . 2056) (#("    " 0 4 (fontified nil)) . 2051) (undo-tree-id4614 . -4) (2055 . 2056) (#("    " 0 4 (fontified nil)) . 2050) (2050 . 2054) (2050 . 2051)) nil (25661 28370 737123 110000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2603 . 2604) (nil fontified nil 2050 . 2604) (2050 . 2604)) nil (25661 28370 737117 686000) 0 nil])
([nil nil ((2603 . 2604) (#("


    
}
" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t)) . 2603) (undo-tree-id4512 . 3) (undo-tree-id4513 . 3) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1)) nil (25661 28370 737107 188000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2051) (undo-tree-id4676 . -4) (undo-tree-id4677 . -4) (undo-tree-id4678 . -4) (undo-tree-id4679 . -4) (undo-tree-id4680 . -4) (undo-tree-id4681 . -4) (undo-tree-id4682 . -4) (undo-tree-id4683 . -4) (undo-tree-id4684 . -4) (undo-tree-id4685 . -4) (undo-tree-id4686 . -4) (undo-tree-id4687 . -4) 2055 (2051 . 2055) (#("    " 0 4 (fontified nil)) . 2050) (undo-tree-id4688 . -4) (undo-tree-id4689 . -4) (2049 . 2055) (t 25661 28370 756056 223000)) nil (25661 28398 699315 947000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2055 . 2056) (#("
" 0 1 (fontified nil)) . -2076) (2051 . 2077)) nil (25661 28398 699305 539000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 2050) (undo-tree-id4633 . -2) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -2)) nil (25661 28398 699299 701000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2629) (undo-tree-id4699 . -4) 2633 (2629 . 2633) (#("    " 0 4 (fontified nil)) . 2628) (undo-tree-id4700 . -4) (undo-tree-id4701 . -4) (2627 . 2633) (t 25661 28398 713014 369000)) nil (25661 28430 757022 530000) 0 nil])
([nil nil ((2629 . 2633)) nil (25661 28430 757016 539000) 0 nil])
([nil nil ((2666 . 2667) (apply yas--snippet-revive 2661 2666 #s(yas--snippet nil nil #s(yas--exit 2666 nil) 138 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2666 nil) 138 nil nil nil nil)) (2661 . 2666) (#("new()$0" 0 7 (fontified nil)) . 2661) (2661 . 2668) (#("ne" 0 2 (fontified nil)) . 2661) (2661 . 2663) (#("new()" 0 5 (fontified nil)) . -2661) (2661 . 2666) (#("ne" 0 2 (fontified t)) . -2661) (undo-tree-id4694 . -2) (undo-tree-id4695 . -2) 2663 (2660 . 2663) (2659 . 2660) (2653 . 2659) (#("St" 0 2 (fontified nil)) . 2653) (2653 . 2655) (#("String" 0 6 (fontified nil)) . -2653) (2653 . 2659) (#("St" 0 2 (fontified t face font-lock-type-face)) . -2653) (undo-tree-id4696 . -2) (undo-tree-id4697 . -2) 2655 (2635 . 2655) (#(" " 0 1 (fontified t)) . -2635) (undo-tree-id4698 . -1) 2636 (2633 . 2636)) nil (25661 28430 757011 981000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t)) . 2642) (undo-tree-id4692 . -1) (undo-tree-id4693 . -2)) nil (25661 28430 756994 295000) 0 nil])
([nil nil ((#("String " 0 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t)) . 2642) (undo-tree-id4690 . -6) (undo-tree-id4691 . -7)) nil (25661 28430 756987 908000) 0 nil])
([nil nil ((2642 . 2643)) nil (25661 28430 756968 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 2673 2683 #s(yas--snippet nil nil #s(yas--exit 2682 nil) 140 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2682 nil) 140 nil nil nil nil)) (2673 . 2683) (#("println!($0)" 0 12 (fontified nil)) . 2673) (2673 . 2685) (#("pr" 0 2 (fontified nil)) . 2673) (2673 . 2675) (#("println!(…)" 0 11 (fontified nil)) . -2673) (2673 . 2684) (#("pr" 0 2 (fontified t)) . -2673) (undo-tree-id4847 . -2) (undo-tree-id4848 . -2) 2675 (2673 . 2675) (apply yas--snippet-revive 2665 2679 #s(yas--snippet nil nil #s(yas--exit 2673 nil) 139 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2673 nil) 139 nil nil nil nil)) (2665 . 2679) (#("loop {
	$0
    }" 0 16 (fontified nil)) . 2665) (2676 . 2680) (2672 . 2673) (#("    " 0 4 (fontified nil)) . 2672) (2665 . 2680) (#("loo" 0 3 (fontified nil)) . 2665) (2665 . 2668) (#("loop" 0 4 (fontified nil)) . -2665) (2665 . 2669) (#("loo" 0 3 (fontified t)) . -2665) (undo-tree-id4849 . -3) (undo-tree-id4850 . -3) 2668 (2665 . 2668) (2661 . 2665) (#("    " 0 4 (fontified nil)) . 2660) (undo-tree-id4851 . -4) (undo-tree-id4852 . -4) (2659 . 2665) (t 25661 28430 773348 630000)) nil (25661 28467 440525 815000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2629) (undo-tree-id4845 . -4) 2633 (2629 . 2633) (#("    " 0 4 (fontified nil)) . 2628) (undo-tree-id4846 . -4) (2627 . 2633)) nil (25661 28467 440516 714000) 0 nil])
([nil nil ((#("	println!()
" 0 1 (fontified t) 1 9 (fontified t face rust-builtin-formatting-macro) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 12 (fontified t)) . 2674) (undo-tree-id4842 . -11) (undo-tree-id4843 . -1) (undo-tree-id4844 . -12)) nil (25661 28467 440513 330000) 0 nil])
([nil nil ((2629 . 2671) (#("

    let input = String::new();

    loop {
    " 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t) 16 18 (fontified t) 18 24 (fontified t face font-lock-type-face) 24 26 (fontified t) 26 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-2-face)) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 33 (fontified t) 33 34 (fontified t) 34 38 (fontified t) 38 42 (fontified t face font-lock-keyword-face) 42 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 49 (fontified t)) . 2629) (undo-tree-id4702 . 49) (undo-tree-id4703 . -45) (undo-tree-id4704 . -45) (undo-tree-id4705 . -15) (undo-tree-id4706 . -45) (undo-tree-id4707 . -45) (undo-tree-id4708 . -45) (undo-tree-id4709 . -45) (undo-tree-id4710 . -45) (undo-tree-id4711 . -45) (undo-tree-id4712 . -45) (undo-tree-id4713 . -45) (undo-tree-id4714 . -45) (undo-tree-id4715 . -45) (undo-tree-id4716 . -45) (undo-tree-id4717 . -45) (undo-tree-id4718 . -45) (undo-tree-id4719 . -45) (undo-tree-id4720 . -45) (undo-tree-id4721 . -45) (undo-tree-id4722 . -45) (undo-tree-id4723 . -45) (undo-tree-id4724 . -45) (undo-tree-id4725 . -45) (undo-tree-id4726 . -45) (undo-tree-id4727 . -45) (undo-tree-id4728 . -45) (undo-tree-id4729 . -45) (undo-tree-id4730 . -45) (undo-tree-id4731 . -45) (undo-tree-id4732 . -45) (undo-tree-id4733 . -45) (undo-tree-id4734 . -45) (undo-tree-id4735 . -45) (undo-tree-id4736 . -45) (undo-tree-id4737 . -45) (undo-tree-id4738 . -45) (undo-tree-id4739 . -45) (undo-tree-id4740 . -45) (undo-tree-id4741 . -45) (undo-tree-id4742 . -45) (undo-tree-id4743 . -45) (undo-tree-id4744 . -45) (undo-tree-id4745 . -45) (undo-tree-id4746 . -45) (undo-tree-id4747 . -45) (undo-tree-id4748 . -45) (undo-tree-id4749 . -45) (undo-tree-id4750 . -45) (undo-tree-id4751 . -45) (undo-tree-id4752 . -45) (undo-tree-id4753 . -45) (undo-tree-id4754 . -45) (undo-tree-id4755 . -45) (undo-tree-id4756 . -45) (undo-tree-id4757 . -45) (undo-tree-id4758 . -45) (undo-tree-id4759 . -45) (undo-tree-id4760 . -34) (undo-tree-id4761 . -34) (undo-tree-id4762 . -34) (undo-tree-id4763 . -34) (undo-tree-id4764 . -34) (undo-tree-id4765 . -34) (undo-tree-id4766 . -34) (undo-tree-id4767 . -34) (undo-tree-id4768 . -34) (undo-tree-id4769 . -34) (undo-tree-id4770 . -34) (undo-tree-id4771 . -34) (undo-tree-id4772 . -34) (undo-tree-id4773 . -34) (undo-tree-id4774 . -34) (undo-tree-id4775 . -34) (undo-tree-id4776 . -34) (undo-tree-id4777 . -34) (undo-tree-id4778 . -34) (undo-tree-id4779 . -34) (undo-tree-id4780 . -34) (undo-tree-id4781 . -34) (undo-tree-id4782 . -34) (undo-tree-id4783 . -34) (undo-tree-id4784 . -34) (undo-tree-id4785 . -34) (undo-tree-id4786 . -34) (undo-tree-id4787 . -34) (undo-tree-id4788 . -34) (undo-tree-id4789 . -34) (undo-tree-id4790 . -34) (undo-tree-id4791 . -34) (undo-tree-id4792 . -34) (undo-tree-id4793 . -34) (undo-tree-id4794 . -34) (undo-tree-id4795 . -34) (undo-tree-id4796 . -34) (undo-tree-id4797 . -34) (undo-tree-id4798 . -34) (undo-tree-id4799 . -34) (undo-tree-id4800 . -34) (undo-tree-id4801 . -34) (undo-tree-id4802 . -34) (undo-tree-id4803 . -34) (undo-tree-id4804 . -34) (undo-tree-id4805 . -34) (undo-tree-id4806 . -34) (undo-tree-id4807 . -34) (undo-tree-id4808 . -34) (undo-tree-id4809 . -34) (undo-tree-id4810 . -34) (undo-tree-id4811 . -34) (undo-tree-id4812 . -34) (undo-tree-id4813 . -34) (undo-tree-id4814 . -34) (undo-tree-id4815 . -34) (undo-tree-id4816 . -34) (undo-tree-id4817 . -34) (undo-tree-id4818 . -34) (undo-tree-id4819 . -34) (undo-tree-id4820 . -34) (undo-tree-id4821 . -34) (undo-tree-id4822 . -34) (undo-tree-id4823 . -34) (undo-tree-id4824 . -34) (undo-tree-id4825 . -34) (undo-tree-id4826 . -34) (undo-tree-id4827 . -34) (undo-tree-id4828 . -34) (undo-tree-id4829 . -34) (undo-tree-id4830 . -34) (undo-tree-id4831 . -34) (undo-tree-id4832 . -34) (undo-tree-id4833 . -34) (undo-tree-id4834 . -34) (undo-tree-id4835 . -34) (undo-tree-id4836 . -34) (undo-tree-id4837 . -34) (undo-tree-id4838 . -34) (undo-tree-id4839 . -34) (undo-tree-id4840 . -34) (undo-tree-id4841 . -34)) nil (25661 28467 440503 434000) 0 nil])
([nil nil ((#("    loop {}
" 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t)) . 2661) (undo-tree-id4983 . 2) (undo-tree-id4984 . -11) (t 25661 28467 453731 50000)) nil (25661 28646 664469 105000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2630) (undo-tree-id4981 . -4) 2634 (2630 . 2634) (#("    " 0 4 (fontified nil)) . 2629) (undo-tree-id4982 . -4) (2629 . 2634) (#("    " 0 4 (fontified nil)) . 2628) (2628 . 2632) (2628 . 2629)) nil (25661 28646 664466 631000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2633) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (#("e" 0 1 (fontified nil face font-lock-keyword-face)) . -2634) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -2635) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (#(" " 0 1 (fontified t)) . -2636) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -2637) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) 2638 (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -2638) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -2639) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -2640) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -2641) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -2642) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -2643) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (#(" " 0 1 (fontified t)) . -2644) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (#("=" 0 1 (fontified t)) . -2645) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (#(" " 0 1 (fontified nil)) . -2646) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (#("s" 0 1 (fontified t)) . -2647) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (#("e" 0 1 (fontified t)) . -2648) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (#("r" 0 1 (fontified t)) . -2649) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (#("d" 0 1 (fontified t)) . -2650) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (#("e" 0 1 (fontified t)) . -2651) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (#("_" 0 1 (fontified t)) . -2652) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (#("c" 0 1 (fontified t)) . -2653) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (#("b" 0 1 (fontified t)) . -2654) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (#("o" 0 1 (fontified t)) . -2655) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (#("r" 0 1 (fontified t)) . -2656) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (#(":" 0 1 (fontified t)) . -2657) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (#(":" 0 1 (fontified t)) . -2658) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) 2659 (#("s" 0 1 (fontified t)) . -2659) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) 2660 (2657 . 2660) (2647 . 2657) (#("se" 0 2 (fontified nil)) . 2647) (2647 . 2649) (#("serde_cbor" 0 10 (fontified nil)) . -2647) (2647 . 2657) (#("se" 0 2 (fontified t)) . -2647) (undo-tree-id4977 . -2) (undo-tree-id4978 . -2) 2649 (2643 . 2649) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -2643) (undo-tree-id4979 . -1) (#(" " 0 1 (fontified t)) . -2644) (undo-tree-id4980 . -1) 2645 (2636 . 2645) (2633 . 2636) (2629 . 2633)) nil (25661 28646 664458 143000) 0 nil])
([nil nil ((2669 . 2679) (2668 . 2670) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2668) (2668 . 2669) (#("m" 0 1 (fontified t)) . -2668) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (#("o" 0 1 (fontified t)) . -2669) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) 2670 (2669 . 2670) (#("filename" 0 8 (fontified nil)) . 2669) (2668 . 2669) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2668 2680 nil nil nil t #s(yas--exit 2681 nil))) #s(yas--exit 2681 nil) 144 nil #s(yas--field 1 2668 2680 nil nil nil t #s(yas--exit 2681 nil)) nil nil)) (2663 . 2677) (#("load(${1:filename})$0" 0 21 (fontified nil)) . 2663) (2663 . 2684) (#("lo" 0 2 (fontified nil)) . 2663) (2663 . 2665) (#("load(…)" 0 7 (fontified nil)) . -2663) (2663 . 2670) (#("lo" 0 2 (fontified t)) . -2663) (undo-tree-id4914 . -2) (undo-tree-id4915 . -2) 2665 (2664 . 2665) (2663 . 2664) (2661 . 2663) (#("::" 0 2 (fontified t)) . -24) (#("init_network" 0 12 (fontified t)) . -26) (38 . 40) (38 . 61) (2643 . 2643) (2643 . 2650) (#("Net" 0 3 (fontified nil)) . 2643) (2643 . 2646) (#("Network (use image_recognizer_nn::Network)" 0 42 (fontified nil)) . -2643) (2643 . 2685) (#("Net" 0 3 (fontified t face font-lock-type-face)) . -2643) (undo-tree-id4916 . -3) (undo-tree-id4917 . -3) 2646 (2644 . 2646) (#("o" 0 1 (fontified t face font-lock-type-face)) . -2644) (undo-tree-id4918 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -2645) (undo-tree-id4919 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -2646) (undo-tree-id4920 . -1) 2647 (apply yas--snippet-revive 2643 2647 #s(yas--snippet nil nil #s(yas--exit 2647 nil) 143 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2647 nil) 143 nil nil nil nil)) (2643 . 2647) (#("None$0" 0 6 (fontified nil)) . 2643) (2643 . 2649) (#("N" 0 1 (fontified nil)) . 2643) (2643 . 2644) (#("None" 0 4 (fontified nil)) . -2643) (2643 . 2647) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2643) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) 2644 (2643 . 2644) (2642 . 2643) (2639 . 2642) (2638 . 2639) (2633 . 2638)) nil (25661 28646 664416 123000) 0 nil])
([nil nil ((apply yas--snippet-revive 2663 2681 #s(yas--snippet nil (#s(yas--field 1 2668 2680 nil nil nil t #s(yas--exit 2681 nil))) #s(yas--exit 2681 nil) 144 nil #s(yas--field 1 2668 2680 nil nil nil t #s(yas--exit 2681 nil)) nil nil))) nil (25661 28646 664401 351000) 0 nil])
([nil nil ((2693 . 2697) (#("    " 0 4 (fontified nil)) . 2692) (undo-tree-id4854 . -4) (undo-tree-id4855 . -4) (undo-tree-id4856 . -4) (undo-tree-id4857 . -4) (undo-tree-id4858 . -4) (undo-tree-id4859 . -4) (undo-tree-id4860 . -4) (undo-tree-id4861 . -4) (undo-tree-id4862 . -4) (undo-tree-id4863 . -4) (undo-tree-id4864 . -4) (undo-tree-id4865 . -4) (undo-tree-id4866 . -4) (undo-tree-id4867 . -4) (undo-tree-id4868 . -4) (undo-tree-id4869 . -4) (undo-tree-id4870 . -4) (undo-tree-id4871 . -4) (undo-tree-id4872 . -4) (undo-tree-id4873 . -4) (undo-tree-id4874 . -4) (undo-tree-id4875 . -4) (undo-tree-id4876 . -4) (undo-tree-id4877 . -4) (undo-tree-id4878 . -4) (undo-tree-id4879 . -4) (undo-tree-id4880 . -4) (undo-tree-id4881 . -4) (undo-tree-id4882 . -4) (undo-tree-id4883 . -4) (undo-tree-id4884 . -4) (undo-tree-id4885 . -4) (undo-tree-id4886 . -4) (undo-tree-id4887 . -4) (undo-tree-id4888 . -4) (undo-tree-id4889 . -4) (undo-tree-id4890 . -4) (undo-tree-id4891 . -4) (undo-tree-id4892 . -4) (undo-tree-id4893 . -4) (undo-tree-id4894 . -4) (undo-tree-id4895 . -4) (undo-tree-id4896 . -4) (undo-tree-id4897 . -4) (undo-tree-id4898 . -4) (undo-tree-id4899 . -4) (undo-tree-id4900 . -4) (undo-tree-id4901 . -4) (undo-tree-id4902 . -4) (undo-tree-id4903 . -4) (undo-tree-id4904 . -4) (undo-tree-id4905 . -4) (undo-tree-id4906 . -4) (undo-tree-id4907 . -4) (2691 . 2697) (2690 . 2691) (apply yas--snippet-revive 2682 2690 #s(yas--snippet nil nil #s(yas--exit 2690 nil) 145 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2690 nil) 145 nil nil nil nil)) (2682 . 2690) (#("unwrap()$0" 0 10 (fontified nil)) . 2682) (2682 . 2692) (#("un" 0 2 (fontified nil)) . 2682) (2682 . 2684) (#("unwrap()" 0 8 (fontified nil)) . -2682) (2682 . 2690) (#("un" 0 2 (fontified t)) . -2682) (undo-tree-id4908 . -2) (undo-tree-id4909 . -2) 2684 (2681 . 2684)) nil (25661 28646 664397 245000) 0 nil])
([nil nil ((2697 . 2723) (#("

    let input = String::new();
" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 24 (fontified t face font-lock-type-face) 24 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-2-face)) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 33 (fontified t)) . 2697) (undo-tree-id4853 . 33)) nil (25661 28646 664352 897000) 0 nil])
([nil nil ((apply yas--snippet-revive 2729 2743 #s(yas--snippet nil nil #s(yas--exit 2737 nil) 146 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2737 nil) 146 nil nil nil nil)) (2729 . 2743) (#("loop {
	$0
    }" 0 16 (fontified nil)) . 2729) (2740 . 2744) (2736 . 2737) (#("    " 0 4 (fontified nil)) . 2736) (2729 . 2744) (#("lo" 0 2 (fontified nil)) . 2729) (2729 . 2731) (#("loop" 0 4 (fontified nil)) . -2729) (2729 . 2733) (#("lo" 0 2 (fontified t)) . -2729) (undo-tree-id5367 . -2) (undo-tree-id5368 . -2) 2731 (2729 . 2731) (2725 . 2729) (#("    " 0 4 (fontified nil)) . 2724) (undo-tree-id5369 . -4) (undo-tree-id5370 . -4) (2723 . 2729) (t 25661 28646 678932 877000)) nil (25661 28726 201024 420000) 0 nil])
([nil nil ((2797 . 2798) (2776 . 2797) (2773 . 2776) (#("5" 0 1 (fontified t face font-lock-string-face)) . -2773) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -2774) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -2775) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) 2776 (#("0" 0 1 (fontified nil face font-lock-string-face)) . -2776) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -2777) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -2778) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2779) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2780) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2781) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2782) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -2783) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2784) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2785) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -2786) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -2787) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2788) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2789) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2790) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2791) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2792) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -2793) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2794) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -2795) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2796) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) 2797 (2781 . 2797) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2781) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2782) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -2783) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2784) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (#("t" 0 1 (fontified nil face font-lock-string-face)) . -2785) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2786) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2787) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2788) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2789) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) 2790 (#(" " 0 1 (fontified t face font-lock-string-face)) . -2790) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) 2791 (2779 . 2791) (#("," 0 1 (fontified t face font-lock-string-face)) . -2779) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2780) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) 2781 (2779 . 2781) (2768 . 2769) (#("0" 0 1 (fontified t face font-lock-string-face)) . -2768) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) 2769 (2775 . 2776) (2773 . 2778) (#("4" 0 1 (fontified t face font-lock-string-face)) . -2773) (undo-tree-id5343 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -2774) (undo-tree-id5344 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -2775) (undo-tree-id5345 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -2776) (undo-tree-id5346 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -2777) (undo-tree-id5347 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -2778) (undo-tree-id5348 . -1) 2779 (2778 . 2779) (2777 . 2778) (2756 . 2777) (#("n" 0 1 (fontified t face font-lock-string-face)) . -2756) (undo-tree-id5349 . -1) 2757 (#("u" 0 1 (fontified t face font-lock-string-face)) . -2757) (undo-tree-id5350 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -2758) (undo-tree-id5351 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -2759) (undo-tree-id5352 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2760) (undo-tree-id5353 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2761) (undo-tree-id5354 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2762) (undo-tree-id5355 . -1) 2763 (2756 . 2763) (#("m" 0 1 (fontified t face font-lock-string-face)) . -2756) (undo-tree-id5356 . -1) 2757 (2749 . 2757) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2749) (undo-tree-id5357 . -1) 2750 (2745 . 2750) (2744 . 2746) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2744) (2744 . 2745) (#("|" 0 1 (fontified t)) . -2744) (undo-tree-id5358 . -1) 2745 (2744 . 2745) (#("s" 0 1 (fontified t)) . -2744) (undo-tree-id5359 . -1) (#("e" 0 1 (fontified t)) . -2745) (undo-tree-id5360 . -1) (#("l" 0 1 (fontified t)) . -2746) (undo-tree-id5361 . -1) (#("e" 0 1 (fontified t)) . -2747) (undo-tree-id5362 . -1) (#("c" 0 1 (fontified t)) . -2748) (undo-tree-id5363 . -1) (#("t" 0 1 (fontified t)) . -2749) (undo-tree-id5364 . -1) 2750 (2744 . 2750) (apply yas--snippet-revive 2737 2745 #s(yas--snippet nil nil #s(yas--exit 2744 nil) 147 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2744 nil) 147 nil nil nil nil)) (2737 . 2745) (#("print!($0)" 0 10 (fontified nil)) . 2737) (2737 . 2747) (#("pr" 0 2 (fontified nil)) . 2737) (2737 . 2739) (#("print!(…)" 0 9 (fontified nil)) . -2737) (2737 . 2746) (#("pr" 0 2 (fontified t)) . -2737) (undo-tree-id5365 . -2) (undo-tree-id5366 . -2) 2739 (2737 . 2739)) nil (25661 28726 201007 144000) 0 nil])
([nil nil ((2801 . 2803) (2800 . 2801)) nil (25661 28726 200936 622000) 0 nil])
([nil nil ((2736 . 2808) (#("	print!(\"select the number from 1 to 10,000 to check the model\");
	" 0 1 (fontified t) 1 7 (fontified t face rust-builtin-formatting-macro) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 63 (fontified t face font-lock-string-face) 63 64 (fontified t face (rainbow-delimiters-depth-3-face)) 64 67 (fontified t)) . 2736) (undo-tree-id4985 . -37) (undo-tree-id4986 . 5) (undo-tree-id4987 . -62) (undo-tree-id4988 . -62) (undo-tree-id4989 . -62) (undo-tree-id4990 . -62) (undo-tree-id4991 . -62) (undo-tree-id4992 . -62) (undo-tree-id4993 . -62) (undo-tree-id4994 . -62) (undo-tree-id4995 . -62) (undo-tree-id4996 . -62) (undo-tree-id4997 . -62) (undo-tree-id4998 . -62) (undo-tree-id4999 . -62) (undo-tree-id5000 . -62) (undo-tree-id5001 . -62) (undo-tree-id5002 . -62) (undo-tree-id5003 . -62) (undo-tree-id5004 . -62) (undo-tree-id5005 . -62) (undo-tree-id5006 . -62) (undo-tree-id5007 . -62) (undo-tree-id5008 . -62) (undo-tree-id5009 . -62) (undo-tree-id5010 . -62) (undo-tree-id5011 . -62) (undo-tree-id5012 . -62) (undo-tree-id5013 . -62) (undo-tree-id5014 . -62) (undo-tree-id5015 . -62) (undo-tree-id5016 . -62) (undo-tree-id5017 . -62) (undo-tree-id5018 . -62) (undo-tree-id5019 . -63) (undo-tree-id5020 . -63) (undo-tree-id5021 . -63) (undo-tree-id5022 . -63) (undo-tree-id5023 . -63) (undo-tree-id5024 . -63) (undo-tree-id5025 . -63) (undo-tree-id5026 . -63) (undo-tree-id5027 . -63) (undo-tree-id5028 . -63) (undo-tree-id5029 . -63) (undo-tree-id5030 . -63) (undo-tree-id5031 . -63) (undo-tree-id5032 . -63) (undo-tree-id5033 . -63) (undo-tree-id5034 . -63) (undo-tree-id5035 . -63) (undo-tree-id5036 . -63) (undo-tree-id5037 . -63) (undo-tree-id5038 . -63) (undo-tree-id5039 . -63) (undo-tree-id5040 . -63) (undo-tree-id5041 . -63) (undo-tree-id5042 . -63) (undo-tree-id5043 . -63) (undo-tree-id5044 . -63) (undo-tree-id5045 . -63) (undo-tree-id5046 . -63) (undo-tree-id5047 . -63) (undo-tree-id5048 . -63) (undo-tree-id5049 . -64) (undo-tree-id5050 . -64) (undo-tree-id5051 . -64) (undo-tree-id5052 . -64) (undo-tree-id5053 . -64) (undo-tree-id5054 . -64) (undo-tree-id5055 . -64) (undo-tree-id5056 . -64) (undo-tree-id5057 . -64) (undo-tree-id5058 . -64) (undo-tree-id5059 . -64) (undo-tree-id5060 . -64) (undo-tree-id5061 . -64) (undo-tree-id5062 . -64) (undo-tree-id5063 . -64) (undo-tree-id5064 . -64) (undo-tree-id5065 . -64) (undo-tree-id5066 . -64) (undo-tree-id5067 . -64) (undo-tree-id5068 . -64) (undo-tree-id5069 . -64) (undo-tree-id5070 . -64) (undo-tree-id5071 . -64) (undo-tree-id5072 . -64) (undo-tree-id5073 . -64) (undo-tree-id5074 . -64) (undo-tree-id5075 . -64) (undo-tree-id5076 . -64) (undo-tree-id5077 . -64) (undo-tree-id5078 . -64) (undo-tree-id5079 . -64) (undo-tree-id5080 . -64) (undo-tree-id5081 . -64) (undo-tree-id5082 . -64) (undo-tree-id5083 . -64) (undo-tree-id5084 . -64) (undo-tree-id5085 . -64) (undo-tree-id5086 . -64) (undo-tree-id5087 . -64) (undo-tree-id5088 . -64) (undo-tree-id5089 . -64) (undo-tree-id5090 . -64) (undo-tree-id5091 . -64) (undo-tree-id5092 . -64) (undo-tree-id5093 . -64) (undo-tree-id5094 . -64) (undo-tree-id5095 . -64) (undo-tree-id5096 . -64) (undo-tree-id5097 . -64) (undo-tree-id5098 . -65) (undo-tree-id5099 . -65) (undo-tree-id5100 . -65) (undo-tree-id5101 . -65) (undo-tree-id5102 . -65) (undo-tree-id5103 . -65) (undo-tree-id5104 . -65) (undo-tree-id5105 . -65) (undo-tree-id5106 . -65) (undo-tree-id5107 . -65) (undo-tree-id5108 . -65) (undo-tree-id5109 . -65) (undo-tree-id5110 . -65) (undo-tree-id5111 . -65) (undo-tree-id5112 . -65) (undo-tree-id5113 . -65) (undo-tree-id5114 . -65) (undo-tree-id5115 . -65) (undo-tree-id5116 . -65) (undo-tree-id5117 . -65) (undo-tree-id5118 . -65) (undo-tree-id5119 . -65) (undo-tree-id5120 . -65) (undo-tree-id5121 . -65) (undo-tree-id5122 . -65) (undo-tree-id5123 . -65) (undo-tree-id5124 . -65) (undo-tree-id5125 . -65) (undo-tree-id5126 . -65) (undo-tree-id5127 . -65) (undo-tree-id5128 . -65) (undo-tree-id5129 . -65) (undo-tree-id5130 . -65) (undo-tree-id5131 . -65) (undo-tree-id5132 . -65) (undo-tree-id5133 . -65) (undo-tree-id5134 . 2) (undo-tree-id5135 . -67) (undo-tree-id5136 . -67) (undo-tree-id5137 . -67) (undo-tree-id5138 . -67) (undo-tree-id5139 . -67) (undo-tree-id5140 . -67) (undo-tree-id5141 . -67) (undo-tree-id5142 . -67) (undo-tree-id5143 . -67) (undo-tree-id5144 . -67) (undo-tree-id5145 . -67) (undo-tree-id5146 . -67) (undo-tree-id5147 . -67) (undo-tree-id5148 . -67) (undo-tree-id5149 . -67) (undo-tree-id5150 . -67) (undo-tree-id5151 . -67) (undo-tree-id5152 . -67) (undo-tree-id5153 . -67) (undo-tree-id5154 . -67) (undo-tree-id5155 . -67) (undo-tree-id5156 . -67) (undo-tree-id5157 . -67) (undo-tree-id5158 . -67) (undo-tree-id5159 . -67) (undo-tree-id5160 . -67) (undo-tree-id5161 . -67) (undo-tree-id5162 . -67) (undo-tree-id5163 . -67) (undo-tree-id5164 . -67) (undo-tree-id5165 . -67) (undo-tree-id5166 . -67) (undo-tree-id5167 . -67) (undo-tree-id5168 . -67) (undo-tree-id5169 . -67) (undo-tree-id5170 . -67) (undo-tree-id5171 . -67) (undo-tree-id5172 . -67) (undo-tree-id5173 . -67) (undo-tree-id5174 . -67) (undo-tree-id5175 . -67) (undo-tree-id5176 . -67) (undo-tree-id5177 . -67) (undo-tree-id5178 . -67) (undo-tree-id5179 . -67) (undo-tree-id5180 . -67) (undo-tree-id5181 . -67) (undo-tree-id5182 . -67) (undo-tree-id5183 . -67) (undo-tree-id5184 . -67) (undo-tree-id5185 . -67) (undo-tree-id5186 . -67) (undo-tree-id5187 . -66) (undo-tree-id5188 . -66) (undo-tree-id5189 . -66) (undo-tree-id5190 . -66) (undo-tree-id5191 . -66) (undo-tree-id5192 . -66) (undo-tree-id5193 . -66) (undo-tree-id5194 . -66) (undo-tree-id5195 . -66) (undo-tree-id5196 . -66) (undo-tree-id5197 . -66) (undo-tree-id5198 . -66) (undo-tree-id5199 . -66) (undo-tree-id5200 . -66) (undo-tree-id5201 . -66) (undo-tree-id5202 . -66) (undo-tree-id5203 . -66) (undo-tree-id5204 . -66) (undo-tree-id5205 . -66) (undo-tree-id5206 . -66) (undo-tree-id5207 . -66) (undo-tree-id5208 . -66) (undo-tree-id5209 . -66) (undo-tree-id5210 . -66) (undo-tree-id5211 . -66) (undo-tree-id5212 . -66) (undo-tree-id5213 . -66) (undo-tree-id5214 . -66) (undo-tree-id5215 . -66) (undo-tree-id5216 . -66) (undo-tree-id5217 . -66) (undo-tree-id5218 . -66) (undo-tree-id5219 . -66) (undo-tree-id5220 . -66) (undo-tree-id5221 . -66) (undo-tree-id5222 . -66) (undo-tree-id5223 . -66) (undo-tree-id5224 . -66) (undo-tree-id5225 . -66) (undo-tree-id5226 . -66) (undo-tree-id5227 . -66) (undo-tree-id5228 . -66) (undo-tree-id5229 . -66) (undo-tree-id5230 . -66) (undo-tree-id5231 . -66) (undo-tree-id5232 . -66) (undo-tree-id5233 . -66) (undo-tree-id5234 . -66) (undo-tree-id5235 . -66) (undo-tree-id5236 . -66) (undo-tree-id5237 . -66) (undo-tree-id5238 . -66) (undo-tree-id5239 . -66) (undo-tree-id5240 . -66) (undo-tree-id5241 . -66) (undo-tree-id5242 . -66) (undo-tree-id5243 . -66) (undo-tree-id5244 . -66) (undo-tree-id5245 . -66) (undo-tree-id5246 . -66) (undo-tree-id5247 . -66) (undo-tree-id5248 . -66) (undo-tree-id5249 . -66) (undo-tree-id5250 . -66) (undo-tree-id5251 . -66) (undo-tree-id5252 . -66) (undo-tree-id5253 . -66) (undo-tree-id5254 . -66) (undo-tree-id5255 . -66) (undo-tree-id5256 . -66) (undo-tree-id5257 . -66) (undo-tree-id5258 . -66) (undo-tree-id5259 . -66) (undo-tree-id5260 . -66) (undo-tree-id5261 . -66) (undo-tree-id5262 . -66) (undo-tree-id5263 . -66) (undo-tree-id5264 . -66) (undo-tree-id5265 . -66)) nil (25661 28726 200923 692000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2810) (undo-tree-id5774 . -1) 2811 (2810 . 2811) (#("	" 0 1 (fontified nil)) . 2809) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (2808 . 2811) (t 25661 28726 216428 756000)) nil (25661 28811 514133 6000) 0 nil])
([nil nil ((2811 . 2812) (#("i" 0 1 (fontified t)) . -2811) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2812) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (#(" " 0 1 (fontified t)) . -2813) (undo-tree-id5765 . -1) 2814 (2811 . 2814) (#("i" 0 1 (fontified t)) . -2811) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2812) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) 2813 (2811 . 2813) (#("i" 0 1 (fontified t)) . -2811) (undo-tree-id5770 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2812) (undo-tree-id5771 . -1) (#(" " 0 1 (fontified t)) . -2813) (undo-tree-id5772 . -1) 2814 (2811 . 2814) (2810 . 2811) (#("	" 0 1 (fontified nil)) . 2809) (undo-tree-id5773 . -1) (2810 . 2811) (2809 . 2810)) nil (25661 28811 514128 684000) 0 nil])
([nil nil ((2703 . 2705) (2702 . 2703) (2701 . 2702)) nil (25661 28811 514118 13000) 0 nil])
([nil nil ((2847 . 2852) (#("in" 0 2 (fontified nil)) . 2847) (undo-tree-id5680 . -2) (2847 . 2849) (#("input" 0 5 (fontified nil)) . -2847) (undo-tree-id5681 . -5) (2847 . 2852) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -2847) (undo-tree-id5682 . -2) (undo-tree-id5683 . -2) (undo-tree-id5684 . -2) (undo-tree-id5685 . -2) (undo-tree-id5686 . -2) (undo-tree-id5687 . -2) (undo-tree-id5688 . -2) (undo-tree-id5689 . -2) (undo-tree-id5690 . -2) (undo-tree-id5691 . -2) (undo-tree-id5692 . -2) (undo-tree-id5693 . -2) (undo-tree-id5694 . -2) (undo-tree-id5695 . -2) (undo-tree-id5696 . -2) (undo-tree-id5697 . -2) (undo-tree-id5698 . -2) (undo-tree-id5699 . -2) (undo-tree-id5700 . -2) (undo-tree-id5701 . -2) (undo-tree-id5702 . -2) (undo-tree-id5703 . -2) (undo-tree-id5704 . -2) (undo-tree-id5705 . -2) (undo-tree-id5706 . -2) (undo-tree-id5707 . -2) (undo-tree-id5708 . -2) (undo-tree-id5709 . -2) (undo-tree-id5710 . -2) (undo-tree-id5711 . -2) (undo-tree-id5712 . -2) (undo-tree-id5713 . -2) (undo-tree-id5714 . -2) (undo-tree-id5715 . -2) (undo-tree-id5716 . -2) (undo-tree-id5717 . -2) (undo-tree-id5718 . -2) (undo-tree-id5719 . -1) (undo-tree-id5720 . -2) (undo-tree-id5721 . -2) (undo-tree-id5722 . -2) (undo-tree-id5723 . -2) (undo-tree-id5724 . -2) (undo-tree-id5725 . -2) (undo-tree-id5726 . -2) (undo-tree-id5727 . -2) (undo-tree-id5728 . -2) (undo-tree-id5729 . -2) (undo-tree-id5730 . -2) (undo-tree-id5731 . -2) (undo-tree-id5732 . -2) (undo-tree-id5733 . -2) (undo-tree-id5734 . -2) (undo-tree-id5735 . -2) (undo-tree-id5736 . -2) (undo-tree-id5737 . -2) (undo-tree-id5738 . -2) 2849 (2845 . 2849) (2843 . 2845) (#("buf" 0 3 (fontified nil)) . 2843) (undo-tree-id5739 . -3) (2842 . 2843) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2842 2852 nil nil nil t #s(yas--exit 2853 nil))) #s(yas--exit 2853 nil) 149 nil #s(yas--field 1 2842 2852 nil nil nil t #s(yas--exit 2853 nil)) nil nil)) (2832 . 2846) (#("read_line(${1:buf})$0" 0 21 (fontified nil)) . 2832) (2832 . 2853) (#("re" 0 2 (fontified nil)) . 2832) (2832 . 2834) (#("read_line(…)" 0 12 (fontified nil)) . -2832) (2832 . 2844) (#("re" 0 2 (fontified t)) . -2832) (undo-tree-id5740 . -2) (undo-tree-id5741 . -2) 2834 (2831 . 2834) (#("r" 0 1 (fontified t)) . -2831) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) 2832 (2831 . 2832) (#(":" 0 1 (fontified t)) . -2831) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (#(":" 0 1 (fontified t)) . -2832) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (#("r" 0 1 (fontified t)) . -2833) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (#("e" 0 1 (fontified t)) . -2834) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (#("a" 0 1 (fontified t)) . -2835) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) 2836 (2831 . 2836) (apply yas--snippet-revive 2824 2831 #s(yas--snippet nil nil #s(yas--exit 2831 nil) 148 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2831 nil) 148 nil nil nil nil)) (2824 . 2831) (#("stdin()$0" 0 9 (fontified nil)) . 2824) (2824 . 2833) (#("st" 0 2 (fontified nil)) . 2824) (2824 . 2826) (#("stdin()" 0 7 (fontified nil)) . -2824) (2824 . 2831) (#("st" 0 2 (fontified t)) . -2824) (undo-tree-id5754 . -2) (undo-tree-id5755 . -2) 2826 (2822 . 2826) (2820 . 2822) (#("io" 0 2 (fontified nil)) . 2820) (2820 . 2822) (#("io" 0 2 (fontified t)) . -2820) (undo-tree-id5756 . -2) (undo-tree-id5757 . -2) 2822 (2821 . 2822) (2818 . 2821) (2815 . 2818) (#("st" 0 2 (fontified nil)) . 2815) (2815 . 2817) (#("std" 0 3 (fontified nil)) . -2815) (2815 . 2818) (#("st" 0 2 (fontified t)) . -2815) (undo-tree-id5758 . -2) (undo-tree-id5759 . -2) 2817 (2815 . 2817) (#("i" 0 1 (fontified t)) . -2815) (undo-tree-id5760 . -1) 2816) nil (25661 28811 514110 363000) 0 nil])
([nil nil ((2856 . 2857) (#("	" 0 1 (fontified nil)) . 2855) (undo-tree-id5679 . -1) (2854 . 2857) (2853 . 2854) (apply yas--snippet-revive 2832 2853 #s(yas--snippet nil (#s(yas--field 1 2842 2852 nil nil nil t #s(yas--exit 2853 nil))) #s(yas--exit 2853 nil) 149 nil #s(yas--field 1 2842 2852 nil nil nil t #s(yas--exit 2853 nil)) nil nil))) nil (25661 28811 514062 10000) 0 nil])
([nil nil ((2875 . 2876) (2874 . 2875) (2869 . 2874) (#("in" 0 2 (fontified nil)) . 2869) (2869 . 2871) (#("input" 0 5 (fontified nil)) . -2869) (2869 . 2874) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -2869) (undo-tree-id5671 . -2) (undo-tree-id5672 . -2) (undo-tree-id5673 . -2) 2871 (2866 . 2871) (2864 . 2866) (2863 . 2864) (2862 . 2863) (2861 . 2862) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -2861) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) 2862 (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -2862) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) 2863 (2862 . 2863) (2857 . 2862) (2856 . 2857) (#("	" 0 1 (fontified nil)) . 2855) (undo-tree-id5678 . -1) (2856 . 2857) (2855 . 2856)) nil (25661 28811 514058 503000) 0 nil])
([nil nil ((2868 . 2873) (#("us" 0 2 (fontified nil)) . 2868) (2868 . 2870) (#("usize" 0 5 (fontified nil)) . -2868) (2868 . 2873) (#("us" 0 2 (fontified t)) . -2868) (undo-tree-id5605 . -2) (undo-tree-id5606 . -2) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -2) (undo-tree-id5629 . -2) (undo-tree-id5630 . -2) (undo-tree-id5631 . -2) (undo-tree-id5632 . -2) (undo-tree-id5633 . -2) (undo-tree-id5634 . -2) (undo-tree-id5635 . -2) (undo-tree-id5636 . -2) (undo-tree-id5637 . -2) (undo-tree-id5638 . -2) (undo-tree-id5639 . -2) (undo-tree-id5640 . -2) (undo-tree-id5641 . -2) (undo-tree-id5642 . -2) (undo-tree-id5643 . -2) (undo-tree-id5644 . -2) (undo-tree-id5645 . -2) (undo-tree-id5646 . -2) (undo-tree-id5647 . -2) (undo-tree-id5648 . -2) (undo-tree-id5649 . -2) (undo-tree-id5650 . -2) (undo-tree-id5651 . -2) (undo-tree-id5652 . -2) (undo-tree-id5653 . -2) (undo-tree-id5654 . -2) (undo-tree-id5655 . -2) (undo-tree-id5656 . -2) (undo-tree-id5657 . -2) (undo-tree-id5658 . -2) (undo-tree-id5659 . -2) (undo-tree-id5660 . -2) (undo-tree-id5661 . -2) (undo-tree-id5662 . -2) (undo-tree-id5663 . -2) (undo-tree-id5664 . -2) (undo-tree-id5665 . -2) (undo-tree-id5666 . -2) (undo-tree-id5667 . -2) (undo-tree-id5668 . -2) 2870 (2868 . 2870) (#("u" 0 1 (fontified t)) . -2868) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) 2869 (2866 . 2869)) nil (25661 28811 514048 567000) 0 nil])
([nil nil ((2911 . 2914) (2910 . 2911) (2906 . 2910) (2904 . 2906) (2901 . 2904) (2898 . 2901) (2896 . 2898) (2892 . 2896) (2890 . 2892) (2889 . 2890) (#(" " 0 1 (fontified t)) . -2889) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (#("-" 0 1 (fontified t)) . -2890) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (#(" " 0 1 (fontified t)) . -2891) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (#("u" 0 1 (fontified t)) . -2892) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (#("s" 0 1 (fontified t)) . -2893) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) 2894 (2889 . 2894) (apply yas--snippet-revive 2882 2889 #s(yas--snippet nil nil #s(yas--exit 2889 nil) 150 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2889 nil) 150 nil nil nil nil)) (2882 . 2889) (#("parse()$0" 0 9 (fontified nil)) . 2882) (2882 . 2891) (#("pa" 0 2 (fontified nil)) . 2882) (2882 . 2884) (#("parse()" 0 7 (fontified nil)) . -2882) (2882 . 2889) (#("par" 0 3 (fontified t)) . -2882) (undo-tree-id5603 . -3) (undo-tree-id5604 . -3) 2885 (2883 . 2885)) nil (25661 28811 514013 14000) 0 nil])
([nil nil ((2814 . 2935) (#("	std::io::stdin().read_line(&mut input);

	let index: usize = input.parse();
	let index = index - 1;
	
" 0 1 (fontified t) 1 4 (fontified t face font-lock-constant-face) 4 6 (fontified t) 6 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 18 (fontified t) 18 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t face rust-ampersand-face) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-3-face)) 39 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 52 (fontified t face font-lock-variable-name-face) 52 54 (fontified t) 54 59 (fontified t face font-lock-type-face) 59 62 (fontified t) 62 68 (fontified t) 68 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-3-face)) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 77 (fontified t) 77 78 (fontified t) 78 81 (fontified t face font-lock-keyword-face) 81 82 (fontified t) 82 87 (fontified t face font-lock-variable-name-face) 87 90 (fontified t) 90 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t)) . 2814) (undo-tree-id5371 . 3) (undo-tree-id5372 . -28) (undo-tree-id5373 . -33) (undo-tree-id5374 . -33) (undo-tree-id5375 . -33) (undo-tree-id5376 . -33) (undo-tree-id5377 . -33) (undo-tree-id5378 . -33) (undo-tree-id5379 . -33) (undo-tree-id5380 . -33) (undo-tree-id5381 . -33) (undo-tree-id5382 . -33) (undo-tree-id5383 . -33) (undo-tree-id5384 . -33) (undo-tree-id5385 . -33) (undo-tree-id5386 . -33) (undo-tree-id5387 . -33) (undo-tree-id5388 . -33) (undo-tree-id5389 . -33) (undo-tree-id5390 . -33) (undo-tree-id5391 . -33) (undo-tree-id5392 . -33) (undo-tree-id5393 . -33) (undo-tree-id5394 . -33) (undo-tree-id5395 . -33) (undo-tree-id5396 . -33) (undo-tree-id5397 . -33) (undo-tree-id5398 . -33) (undo-tree-id5399 . -33) (undo-tree-id5400 . -33) (undo-tree-id5401 . -33) (undo-tree-id5402 . -33) (undo-tree-id5403 . -33) (undo-tree-id5404 . -33) (undo-tree-id5405 . -33) (undo-tree-id5406 . -33) (undo-tree-id5407 . -33) (undo-tree-id5408 . -33) (undo-tree-id5409 . -33) (undo-tree-id5410 . -33) (undo-tree-id5411 . -33) (undo-tree-id5412 . -33) (undo-tree-id5413 . -33) (undo-tree-id5414 . -33) (undo-tree-id5415 . -33) (undo-tree-id5416 . -33) (undo-tree-id5417 . -33) (undo-tree-id5418 . -33) (undo-tree-id5419 . -33) (undo-tree-id5420 . -33) (undo-tree-id5421 . -33) (undo-tree-id5422 . -33) (undo-tree-id5423 . -33) (undo-tree-id5424 . -33) (undo-tree-id5425 . -54) (undo-tree-id5426 . -54) (undo-tree-id5427 . -54) (undo-tree-id5428 . -54) (undo-tree-id5429 . -54) (undo-tree-id5430 . -54) (undo-tree-id5431 . -54) (undo-tree-id5432 . -54) (undo-tree-id5433 . -54) (undo-tree-id5434 . -54) (undo-tree-id5435 . -54) (undo-tree-id5436 . -54) (undo-tree-id5437 . -54) (undo-tree-id5438 . -54) (undo-tree-id5439 . -54) (undo-tree-id5440 . -54) (undo-tree-id5441 . -54) (undo-tree-id5442 . -54) (undo-tree-id5443 . -54) (undo-tree-id5444 . -54) (undo-tree-id5445 . -54) (undo-tree-id5446 . -54) (undo-tree-id5447 . -54) (undo-tree-id5448 . -54) (undo-tree-id5449 . -54) (undo-tree-id5450 . -54) (undo-tree-id5451 . -54) (undo-tree-id5452 . -54) (undo-tree-id5453 . -54) (undo-tree-id5454 . -54) (undo-tree-id5455 . -54) (undo-tree-id5456 . -54) (undo-tree-id5457 . -54) (undo-tree-id5458 . -54) (undo-tree-id5459 . -54) (undo-tree-id5460 . -54) (undo-tree-id5461 . -54) (undo-tree-id5462 . -54) (undo-tree-id5463 . -54) (undo-tree-id5464 . -54) (undo-tree-id5465 . -54) (undo-tree-id5466 . -54) (undo-tree-id5467 . -54) (undo-tree-id5468 . -54) (undo-tree-id5469 . -54) (undo-tree-id5470 . -54) (undo-tree-id5471 . -54) (undo-tree-id5472 . -54) (undo-tree-id5473 . -54) (undo-tree-id5474 . -54) (undo-tree-id5475 . -54) (undo-tree-id5476 . -54) (undo-tree-id5477 . -54) (undo-tree-id5478 . -54) (undo-tree-id5479 . -54) (undo-tree-id5480 . -54) (undo-tree-id5481 . -54) (undo-tree-id5482 . -54) (undo-tree-id5483 . -54) (undo-tree-id5484 . -54) (undo-tree-id5485 . -54) (undo-tree-id5486 . 3) (undo-tree-id5487 . -100) (undo-tree-id5488 . -100) (undo-tree-id5489 . -100) (undo-tree-id5490 . -100) (undo-tree-id5491 . -100) (undo-tree-id5492 . -100) (undo-tree-id5493 . -100) (undo-tree-id5494 . -100) (undo-tree-id5495 . -100) (undo-tree-id5496 . -100) (undo-tree-id5497 . -100) (undo-tree-id5498 . -100) (undo-tree-id5499 . -100) (undo-tree-id5500 . -100) (undo-tree-id5501 . -100) (undo-tree-id5502 . -100) (undo-tree-id5503 . -100) (undo-tree-id5504 . -100) (undo-tree-id5505 . -100) (undo-tree-id5506 . -100) (undo-tree-id5507 . -99) (undo-tree-id5508 . -99) (undo-tree-id5509 . -99) (undo-tree-id5510 . -99) (undo-tree-id5511 . -99) (undo-tree-id5512 . -99) (undo-tree-id5513 . -99) (undo-tree-id5514 . -77) (undo-tree-id5515 . -99) (undo-tree-id5516 . -99) (undo-tree-id5517 . -99) (undo-tree-id5518 . -99) (undo-tree-id5519 . -99) (undo-tree-id5520 . -99) (undo-tree-id5521 . -99) (undo-tree-id5522 . -99) (undo-tree-id5523 . -99) (undo-tree-id5524 . -99) (undo-tree-id5525 . -99) (undo-tree-id5526 . -99) (undo-tree-id5527 . -99) (undo-tree-id5528 . -99) (undo-tree-id5529 . -99) (undo-tree-id5530 . -99) (undo-tree-id5531 . -99) (undo-tree-id5532 . -99) (undo-tree-id5533 . -99) (undo-tree-id5534 . -99) (undo-tree-id5535 . -99) (undo-tree-id5536 . -99) (undo-tree-id5537 . -99) (undo-tree-id5538 . -99) (undo-tree-id5539 . -99) (undo-tree-id5540 . -99) (undo-tree-id5541 . -99) (undo-tree-id5542 . -99) (undo-tree-id5543 . -99) (undo-tree-id5544 . -99) (undo-tree-id5545 . -99) (undo-tree-id5546 . -99) (undo-tree-id5547 . -99) (undo-tree-id5548 . -99) (undo-tree-id5549 . -99) (undo-tree-id5550 . -99) (undo-tree-id5551 . -99) (undo-tree-id5552 . -99) (undo-tree-id5553 . -99) (undo-tree-id5554 . -99) (undo-tree-id5555 . -99) (undo-tree-id5556 . -99) (undo-tree-id5557 . -99) (undo-tree-id5558 . -99) (undo-tree-id5559 . -99) (undo-tree-id5560 . -99) (undo-tree-id5561 . -99) (undo-tree-id5562 . -99) (undo-tree-id5563 . -99) (undo-tree-id5564 . -99) (undo-tree-id5565 . -99) (undo-tree-id5566 . -99) (undo-tree-id5567 . -99) (undo-tree-id5568 . -99) (undo-tree-id5569 . -99) (undo-tree-id5570 . -99) (undo-tree-id5571 . -99) (undo-tree-id5572 . -99) (undo-tree-id5573 . -99) (undo-tree-id5574 . -99) (undo-tree-id5575 . -99) (undo-tree-id5576 . -99) (undo-tree-id5577 . -99) (undo-tree-id5578 . -99) (undo-tree-id5579 . -99) (undo-tree-id5580 . -99) (undo-tree-id5581 . -99) (undo-tree-id5582 . -99) (undo-tree-id5583 . -99) (undo-tree-id5584 . -99) (undo-tree-id5585 . -99) (undo-tree-id5586 . -99) (undo-tree-id5587 . -99) (undo-tree-id5588 . -99) (undo-tree-id5589 . -99) (undo-tree-id5590 . -99) (undo-tree-id5591 . -99) (undo-tree-id5592 . -99)) nil (25661 28811 513992 709000) 0 nil])
([nil nil ((2917 . 2925) (#("a" 0 1 (fontified t face font-lock-string-face)) . -2917) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2918) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (#("p" 0 1 (fontified nil face font-lock-string-face)) . -2919) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (#("r" 0 1 (fontified nil face font-lock-string-face)) . -2920) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2921) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -2922) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2923) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2924) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2925) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) 2926 (#("l" 0 1 (fontified t face font-lock-string-face)) . -2926) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -2927) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -2928) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2929) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -2930) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) 2931 (2912 . 2931) (2911 . 2913) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2911) (undo-tree-id5805 . -1) (#("msg" 0 3 (fontified nil)) . 2912) (undo-tree-id5806 . -3) (2911 . 2912) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2911 2926 nil nil nil t #s(yas--exit 2927 nil))) #s(yas--exit 2927 nil) 151 nil #s(yas--field 1 2911 2926 nil nil nil t #s(yas--exit 2927 nil)) nil nil)) (2904 . 2915) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 2904) (2904 . 2922) (#("ex" 0 2 (fontified nil)) . 2904) (2904 . 2906) (#("expect(…)" 0 9 (fontified nil)) . -2904) (2904 . 2913) (#("ex" 0 2 (fontified t)) . -2904) (undo-tree-id5807 . -2) (undo-tree-id5808 . -2) 2906 (2904 . 2906) (2903 . 2904) (t 25661 28811 527318 142000)) nil (25661 28831 826528 97000) 0 nil])
([nil nil ((apply yas--snippet-revive 2904 2927 #s(yas--snippet nil (#s(yas--field 1 2911 2926 nil nil nil t #s(yas--exit 2927 nil))) #s(yas--exit 2927 nil) 151 nil #s(yas--field 1 2911 2926 nil nil nil t #s(yas--exit 2927 nil)) nil nil))) nil (25661 28902 412575 392000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2974) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (#("r" 0 1 (fontified t)) . -2975) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (#("a" 0 1 (fontified t)) . -2976) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (#("i" 0 1 (fontified t)) . -2977) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (#("n" 0 1 (fontified t)) . -2978) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (#("_" 0 1 (fontified t)) . -2979) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (#("i" 0 1 (fontified nil)) . -2980) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (#("m" 0 1 (fontified t)) . -2981) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (#("a" 0 1 (fontified t)) . -2982) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (#("g" 0 1 (fontified t)) . -2983) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (#("e" 0 1 (fontified t)) . -2984) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (#("s" 0 1 (fontified t)) . -2985) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) 2986 (2974 . 2986) (#("tr" 0 2 (fontified nil)) . 2974) (2974 . 2976) (#("train_images" 0 12 (fontified nil)) . -2974) (2974 . 2986) (#("tr" 0 2 (fontified t)) . -2974) (undo-tree-id5844 . -2) (undo-tree-id5845 . -2) 2976 (2975 . 2976) (#("train_image" 0 11 (fontified nil)) . 2975) (2974 . 2975) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2974 2974 nil nil nil t #s(yas--exit 2975 nil))) #s(yas--exit 2975 nil) 152 nil #s(yas--field 1 2974 2974 nil nil nil t #s(yas--exit 2975 nil)) nil nil)) (2962 . 2986) (#("print_image(${1:train_image})$0" 0 31 (fontified nil)) . 2962) (2962 . 2993) (#("pr" 0 2 (fontified nil)) . 2962) (2962 . 2964) (#("print_image(…)" 0 14 (fontified nil)) . -2962) (2962 . 2976) (#("pr" 0 2 (fontified t)) . -2962) (undo-tree-id5846 . -2) (undo-tree-id5847 . -2) 2964 (2962 . 2964) (#("p" 0 1 (fontified t)) . -2962) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (#("r" 0 1 (fontified t)) . -2963) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) 2964 (2962 . 2964) (2961 . 2962) (#("	" 0 1 (fontified nil)) . 2960) (undo-tree-id5852 . -1) (2961 . 2962) (2960 . 2961) (#("
" 0 1 (fontified t)) . -2960) (undo-tree-id5853 . -1) (#("	" 0 1 (fontified t)) . -2961) (undo-tree-id5854 . -1) 2962 (2961 . 2962) (#("	" 0 1 (fontified nil)) . 2960) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (2961 . 2962) (2959 . 2961) (t 25661 28831 840863 245000)) nil (25661 28902 412569 607000) 0 nil])
([nil nil ((apply yas--snippet-revive 2962 2975 #s(yas--snippet nil (#s(yas--field 1 2974 2974 nil nil nil t #s(yas--exit 2975 nil))) #s(yas--exit 2975 nil) 152 nil #s(yas--field 1 2974 2974 nil nil nil t #s(yas--exit 2975 nil)) nil nil))) nil (25661 28902 412541 59000) 0 nil])
([nil nil ((#("train" 0 5 (fontified t face font-lock-variable-name-face)) . 2382) (undo-tree-id5819 . -4)) nil (25661 28902 412540 342000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 2382)) nil (25661 28902 412539 49000) 0 nil])
([nil nil ((#("images " 0 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t)) . 2382) (undo-tree-id5818 . -6)) nil (25661 28902 412538 245000) 0 nil])
([nil nil ((2382 . 2387)) nil (25661 28902 412536 993000) 0 nil])
([nil nil ((#("trn" 0 3 (fontified t)) . 2419) (undo-tree-id5817 . -2)) nil (25661 28902 412536 74000) 0 nil])
([nil nil ((2419 . 2423) (#("t_img" 0 1 (fontified nil) 1 5 (fontified nil)) . 2419) (undo-tree-id5814 . 4) (2419 . 2420) (#("test" 0 4 (fontified nil)) . -2419) (2419 . 2423) (#("t" 0 1 (fontified t)) . -2419) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) 2420 (2419 . 2420)) nil (25661 28902 412533 782000) 0 nil])
([nil nil ((#("train" 0 5 (fontified t)) . 2589) (undo-tree-id5812 . -4) (undo-tree-id5813 . -5)) nil (25661 28902 412529 971000) 0 nil])
([nil nil ((2589 . 2593) (#("te_images" 0 2 (fontified nil) 2 9 (fontified nil)) . 2589) (undo-tree-id5809 . 7) (2589 . 2591) (#("test" 0 4 (fontified nil)) . -2589) (2589 . 2593) (#("te" 0 2 (fontified t)) . -2589) (undo-tree-id5810 . -2) (undo-tree-id5811 . -2) 2591 (2589 . 2591)) nil (25661 28902 412525 797000) 0 nil])
([nil nil ((2942 . 2950) (#("	" 0 1 (fontified t)) . 2942)) nil (25661 28902 412509 653000) 0 nil])
([nil nil ((2942 . 2944) (t 25661 28902 428265 796000)) nil (25661 28917 403767 200000) 0 nil])
([nil nil ((2942 . 2950)) nil (25661 28917 403760 690000) 0 nil])
([nil nil ((#("    let mut test = Vec::new();
    for chunks in test.chunks(first) {
        let image_matrix = Array::from_shape_vec((first, 1), chunks.to_vec())
            .unwrap()
            .map(|x| *x as f64 / 256.0);
        test.push(image_matrix);
    }

" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 19 (fontified t) 19 22 (fontified t face font-lock-type-face) 22 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 31 (fontified t) 31 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 45 (fontified t face font-lock-variable-name-face) 45 46 (fontified t) 46 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 53 (fontified t) 53 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-2-face)) 61 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-2-face)) 67 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-2-face)) 69 70 (fontified t) 70 78 (fontified t) 78 81 (fontified t face font-lock-keyword-face) 81 82 (fontified t) 82 94 (fontified t face font-lock-variable-name-face) 94 97 (fontified t) 97 102 (fontified t face font-lock-type-face) 102 118 (fontified t) 118 119 (fontified t face (rainbow-delimiters-depth-3-face)) 119 120 (fontified t face (rainbow-delimiters-depth-4-face)) 120 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-4-face)) 129 144 (fontified t) 144 145 (fontified t face (rainbow-delimiters-depth-4-face)) 145 146 (fontified t face (rainbow-delimiters-depth-4-face)) 146 147 (fontified t face (rainbow-delimiters-depth-3-face)) 147 167 (fontified t) 167 168 (fontified t face (rainbow-delimiters-depth-3-face)) 168 169 (fontified t face (rainbow-delimiters-depth-3-face)) 169 186 (fontified t) 186 187 (fontified t face (rainbow-delimiters-depth-3-face)) 187 194 (fontified t) 194 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 200 (fontified t face font-lock-type-face) 200 208 (fontified t) 208 209 (fontified t face (rainbow-delimiters-depth-3-face)) 209 211 (fontified t) 211 219 (fontified t) 219 223 (fontified t) 223 228 (fontified t) 228 229 (fontified t face (rainbow-delimiters-depth-3-face)) 229 241 (fontified t) 241 242 (fontified t face (rainbow-delimiters-depth-3-face)) 242 244 (fontified t) 244 248 (fontified t) 248 249 (fontified t face (rainbow-delimiters-depth-2-face)) 249 250 (fontified t) 250 251 (fontified t)) . 2370) (undo-tree-id5897 . -250) (undo-tree-id5898 . -250) (undo-tree-id5899 . -250) (undo-tree-id5900 . -251) (undo-tree-id5901 . -179) (undo-tree-id5902 . -191) (undo-tree-id5903 . -200) (undo-tree-id5904 . -250) (t 25661 28917 418422 73000)) nil (25661 28979 21972 234000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2691) (undo-tree-id5895 . -1) 2692 (2691 . 2692) (#("	" 0 1 (fontified nil)) . 2690) (undo-tree-id5896 . -1) (2689 . 2692)) nil (25661 28979 21966 750000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2372) (undo-tree-id5892 . -4) 2376 (2372 . 2376) (#("    " 0 4 (fontified nil)) . 2371) (undo-tree-id5893 . -4) (2371 . 2376) (#("    " 0 4 (fontified nil)) . 2370) (undo-tree-id5894 . -4) (2370 . 2375) (#("    " 0 4 (fontified nil)) . 2369) (2369 . 2373) (2369 . 2370)) nil (25661 28979 21962 978000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2636 . 2637) (nil fontified nil 2371 . 2637) (2371 . 2637)) nil (25661 28979 21958 321000) 0 nil])
([nil nil ((2370 . 2955) (#("
    let mut test_image = Vec::new();
    for chunks in tst_img.chunks(first) {
        let image_matrix = Array::from_shape_vec((first, 1), chunks.to_vec())
            .unwrap()
            .map(|x| *x as f64 / 256.0);
        test_image.push(image_matrix);
    }



    let net = Network::load(\"model.cbor\").unwrap();

    let mut input = String::new();

    loop {
        print!(\"select the number from 1 to 10,000 to check the model\");

        std::io::stdin().read_line(&mut input);

        let index: usize = input.parse().expect(\"give a number\");
        let index = index - 1;

" 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-variable-name-face) 23 26 (fontified t) 26 29 (fontified t face font-lock-type-face) 29 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 42 (fontified t) 42 45 (fontified t face font-lock-keyword-face) 45 46 (fontified t) 46 52 (fontified t face font-lock-variable-name-face) 52 53 (fontified t) 53 55 (fontified t face font-lock-keyword-face) 55 70 (fontified t) 70 71 (fontified t face (rainbow-delimiters-depth-2-face)) 71 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 88 (fontified t) 88 91 (fontified t face font-lock-keyword-face) 91 92 (fontified t) 92 104 (fontified t face font-lock-variable-name-face) 104 107 (fontified t) 107 112 (fontified t face font-lock-type-face) 112 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 130 (fontified t face (rainbow-delimiters-depth-4-face)) 130 138 (fontified t) 138 139 (fontified t face (rainbow-delimiters-depth-4-face)) 139 154 (fontified t) 154 155 (fontified t face (rainbow-delimiters-depth-4-face)) 155 156 (fontified t face (rainbow-delimiters-depth-4-face)) 156 157 (fontified t face (rainbow-delimiters-depth-3-face)) 157 177 (fontified t) 177 178 (fontified t face (rainbow-delimiters-depth-3-face)) 178 179 (fontified t face (rainbow-delimiters-depth-3-face)) 179 196 (fontified t) 196 197 (fontified t face (rainbow-delimiters-depth-3-face)) 197 204 (fontified t) 204 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 210 (fontified t face font-lock-type-face) 210 218 (fontified t) 218 219 (fontified t face (rainbow-delimiters-depth-3-face)) 219 244 (fontified t) 244 245 (fontified t face (rainbow-delimiters-depth-3-face)) 245 257 (fontified t) 257 258 (fontified t face (rainbow-delimiters-depth-3-face)) 258 264 (fontified t) 264 265 (fontified t face (rainbow-delimiters-depth-2-face)) 265 266 (fontified t) 266 267 (fontified t rear-nonsticky t) 267 268 (fontified t) 268 269 (fontified t) 269 273 (fontified t) 273 276 (fontified t face font-lock-keyword-face) 276 277 (fontified t) 277 280 (fontified t face font-lock-variable-name-face) 280 283 (fontified t) 283 290 (fontified t face font-lock-type-face) 290 292 (fontified t) 292 296 (fontified t) 296 297 (fontified t face (rainbow-delimiters-depth-2-face)) 297 309 (fontified t face font-lock-string-face) 309 310 (fontified t face (rainbow-delimiters-depth-2-face)) 310 311 (fontified t) 311 317 (fontified t) 317 318 (fontified t face (rainbow-delimiters-depth-2-face)) 318 319 (fontified t face (rainbow-delimiters-depth-2-face)) 319 321 (fontified t) 321 322 (fontified t) 322 326 (fontified t) 326 329 (fontified t face font-lock-keyword-face) 329 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 339 (fontified t face font-lock-variable-name-face) 339 342 (fontified t) 342 348 (fontified t face font-lock-type-face) 348 353 (fontified t) 353 354 (fontified t face (rainbow-delimiters-depth-2-face)) 354 355 (fontified t face (rainbow-delimiters-depth-2-face)) 355 357 (fontified t) 357 358 (fontified t) 358 362 (fontified t) 362 366 (fontified t face font-lock-keyword-face) 366 367 (fontified t) 367 368 (fontified t face (rainbow-delimiters-depth-2-face)) 368 369 (fontified t) 369 377 (fontified t) 377 383 (fontified t face rust-builtin-formatting-macro) 383 384 (fontified t face (rainbow-delimiters-depth-3-face)) 384 439 (fontified t face font-lock-string-face) 439 440 (fontified t face (rainbow-delimiters-depth-3-face)) 440 442 (fontified t) 442 443 (fontified t) 443 451 (fontified t) 451 454 (fontified t face font-lock-constant-face) 454 456 (fontified t) 456 458 (fontified t face font-lock-constant-face) 458 465 (fontified t) 465 466 (fontified t face (rainbow-delimiters-depth-3-face)) 466 467 (fontified t face (rainbow-delimiters-depth-3-face)) 467 477 (fontified t) 477 478 (fontified t face (rainbow-delimiters-depth-3-face)) 478 479 (fontified t face rust-ampersand-face) 479 482 (fontified t face font-lock-keyword-face) 482 488 (fontified t) 488 489 (fontified t face (rainbow-delimiters-depth-3-face)) 489 492 (fontified t) 492 500 (fontified t) 500 503 (fontified t face font-lock-keyword-face) 503 504 (fontified t) 504 509 (fontified t face font-lock-variable-name-face) 509 511 (fontified t) 511 516 (fontified t face font-lock-type-face) 516 530 (fontified t) 530 531 (fontified t face (rainbow-delimiters-depth-3-face)) 531 532 (fontified t face (rainbow-delimiters-depth-3-face)) 532 533 (fontified t) 533 539 (fontified t) 539 540 (fontified t face (rainbow-delimiters-depth-3-face)) 540 555 (fontified t face font-lock-string-face) 555 556 (fontified t face (rainbow-delimiters-depth-3-face)) 556 558 (fontified t) 558 566 (fontified t) 566 569 (fontified t face font-lock-keyword-face) 569 570 (fontified t) 570 575 (fontified t face font-lock-variable-name-face) 575 589 (fontified t) 589 590 (fontified t)) . 2370) (undo-tree-id5857 . 322) (undo-tree-id5858 . -1) (undo-tree-id5859 . -266) (undo-tree-id5860 . -1) (undo-tree-id5861 . -272) (undo-tree-id5862 . -269) (undo-tree-id5863 . -1) (undo-tree-id5864 . -267) (undo-tree-id5865 . -267) (undo-tree-id5866 . -267) (undo-tree-id5867 . -267) (undo-tree-id5868 . -267) (undo-tree-id5869 . -267) (undo-tree-id5870 . -267) (undo-tree-id5871 . -267) (undo-tree-id5872 . -267) (undo-tree-id5873 . -267) (undo-tree-id5874 . -267) (undo-tree-id5875 . -267) (undo-tree-id5876 . -267) (undo-tree-id5877 . -267) (undo-tree-id5878 . -267) (undo-tree-id5879 . -267) (undo-tree-id5880 . -267) (undo-tree-id5881 . -267) (undo-tree-id5882 . -267) (undo-tree-id5883 . -267) (undo-tree-id5884 . -267) (undo-tree-id5885 . -267) (undo-tree-id5886 . -267) (undo-tree-id5887 . -267) (undo-tree-id5888 . -267) (undo-tree-id5889 . -267) (undo-tree-id5890 . -267) (undo-tree-id5891 . -267)) nil (25661 28979 21951 529000) 0 nil])
([nil nil ((2884 . 2887) (2865 . 2884) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2865) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2866) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2867) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) 2868 (2865 . 2868) (2864 . 2866) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2864) (undo-tree-id5911 . -1) (#("msg" 0 3 (fontified nil)) . 2865) (undo-tree-id5912 . -3) (2864 . 2865) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2864 2888 nil nil nil t #s(yas--exit 2889 nil))) #s(yas--exit 2889 nil) 154 nil #s(yas--field 1 2864 2888 nil nil nil t #s(yas--exit 2889 nil)) nil nil)) (2857 . 2868) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 2857) (2857 . 2875) (#("ex" 0 2 (fontified nil)) . 2857) (2857 . 2859) (#("expect(…)" 0 9 (fontified nil)) . -2857) (2857 . 2866) (#("ex" 0 2 (fontified t)) . -2857) (undo-tree-id5913 . -2) (undo-tree-id5914 . -2) 2859 (2857 . 2859) (#("u" 0 1 (fontified t)) . -2857) (undo-tree-id5915 . -1) (#("n" 0 1 (fontified t)) . -2858) (undo-tree-id5916 . -1) (#("w" 0 1 (fontified t)) . -2859) (undo-tree-id5917 . -1) (#("r" 0 1 (fontified t)) . -2860) (undo-tree-id5918 . -1) (#("a" 0 1 (fontified t)) . -2861) (undo-tree-id5919 . -1) (#("p" 0 1 (fontified t)) . -2862) (undo-tree-id5920 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2863) (undo-tree-id5921 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2864) (undo-tree-id5922 . -1) (undo-tree-id5923 . 1) (undo-tree-id5924 . -1) 2865 (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -2865) (undo-tree-id5925 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 2866) (2865 . 2867) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2865) (2865 . 2866) (apply yas--snippet-revive 2857 2865 #s(yas--snippet nil nil #s(yas--exit 2865 nil) 153 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2865 nil) 153 nil nil nil nil)) (2857 . 2865) (#("unwrap()$0" 0 10 (fontified nil)) . 2857) (2857 . 2867) (#("un" 0 2 (fontified nil)) . 2857) (2857 . 2859) (#("unwrap()" 0 8 (fontified nil)) . -2857) (2857 . 2865) (#("un" 0 2 (fontified t)) . -2857) (undo-tree-id5926 . -2) (undo-tree-id5927 . -2) 2859 (2856 . 2859) (t 25661 28979 35731 95000)) nil (25661 29001 159377 956000) 0 nil])
([nil nil ((apply yas--snippet-revive 2857 2889 #s(yas--snippet nil (#s(yas--field 1 2864 2888 nil nil nil t #s(yas--exit 2889 nil))) #s(yas--exit 2889 nil) 154 nil #s(yas--field 1 2864 2888 nil nil nil t #s(yas--exit 2889 nil)) nil nil))) nil (25661 29001 159347 45000) 0 nil])
([nil nil ((2834 . 2882) (#(".read_line(&mut input)" 0 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 12 (fontified t face rust-ampersand-face) 12 15 (fontified t face font-lock-keyword-face) 15 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face))) . 2834)) nil (25661 29001 159341 529000) 0 nil])
([nil nil ((3040 . 3045) (#("in" 0 2 (fontified nil)) . 3040) (3040 . 3042) (#("index" 0 5 (fontified nil)) . -3040) (3040 . 3045) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -3040) (undo-tree-id5928 . -2) (undo-tree-id5929 . -2) (undo-tree-id5930 . -2) (undo-tree-id5931 . -2) (undo-tree-id5932 . -2) (undo-tree-id5933 . -2) (undo-tree-id5934 . -2) (undo-tree-id5935 . -2) (undo-tree-id5936 . -2) (undo-tree-id5937 . -2) (undo-tree-id5938 . -2) (undo-tree-id5939 . -2) (undo-tree-id5940 . -2) (undo-tree-id5941 . -2) (undo-tree-id5942 . -2) (undo-tree-id5943 . -2) (undo-tree-id5944 . -2) (undo-tree-id5945 . -2) (undo-tree-id5946 . -2) (undo-tree-id5947 . -2) (undo-tree-id5948 . -2) (undo-tree-id5949 . -2) (undo-tree-id5950 . -2) (undo-tree-id5951 . -2) (undo-tree-id5952 . -2) (undo-tree-id5953 . -2) (undo-tree-id5954 . -2) (undo-tree-id5955 . -2) (undo-tree-id5956 . -2) (undo-tree-id5957 . -2) (undo-tree-id5958 . -2) (undo-tree-id5959 . -2) (undo-tree-id5960 . -2) (undo-tree-id5961 . -2) (undo-tree-id5962 . -2) (undo-tree-id5963 . -2) (undo-tree-id5964 . -2) (undo-tree-id5965 . -2) (undo-tree-id5966 . -2) (undo-tree-id5967 . -1) (undo-tree-id5968 . -2) (undo-tree-id5969 . -2) (undo-tree-id5970 . -2) (undo-tree-id5971 . -2) (undo-tree-id5972 . -2) (undo-tree-id5973 . -2) (undo-tree-id5974 . -2) (undo-tree-id5975 . -2) (undo-tree-id5976 . -2) (undo-tree-id5977 . -2) (undo-tree-id5978 . -2) (undo-tree-id5979 . -2) (undo-tree-id5980 . -2) (undo-tree-id5981 . -2) (undo-tree-id5982 . -2) (undo-tree-id5983 . -2) (undo-tree-id5984 . -2) (undo-tree-id5985 . -2) (undo-tree-id5986 . -2) (undo-tree-id5987 . -2) 3042 (3041 . 3042) (3040 . 3041) (3039 . 3041) (3029 . 3039) (#("te" 0 2 (fontified nil)) . 3029) (undo-tree-id5988 . -2) (3029 . 3031) (#("test_image" 0 10 (fontified nil)) . -3029) (undo-tree-id5989 . -10) (3029 . 3039) (#("te" 0 2 (fontified t)) . -3029) (undo-tree-id5990 . -2) (undo-tree-id5991 . -2) (undo-tree-id5992 . -2) 3031 (3029 . 3031) (#("i" 0 1 (fontified t)) . -3029) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (#("m" 0 1 (fontified t)) . -3030) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) 3031 (3030 . 3031) (#("train_image" 0 11 (fontified nil)) . 3030) (undo-tree-id5999 . -11) (3029 . 3030) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3029 3046 nil nil nil t #s(yas--exit 3047 nil))) #s(yas--exit 3047 nil) 155 nil #s(yas--field 1 3029 3046 nil nil nil t #s(yas--exit 3047 nil)) nil nil)) (3017 . 3041) (#("print_image(${1:train_image})$0" 0 31 (fontified nil)) . 3017) (3017 . 3048) (#("pr" 0 2 (fontified nil)) . 3017) (3017 . 3019) (#("print_image(…)" 0 14 (fontified nil)) . -3017) (3017 . 3031) (#("pr" 0 2 (fontified t)) . -3017) (undo-tree-id6000 . -2) (undo-tree-id6001 . -2) 3019 (3017 . 3019) (3016 . 3017) (#("	" 0 1 (fontified nil)) . 3015) (undo-tree-id6002 . -1) (3014 . 3017) (t 25661 29001 175961 907000)) nil (25661 29028 453279 291000) 0 nil])
([nil nil ((3047 . 3048) (apply yas--snippet-revive 3017 3047 #s(yas--snippet nil (#s(yas--field 1 3029 3046 nil nil nil t #s(yas--exit 3047 nil))) #s(yas--exit 3047 nil) 155 nil #s(yas--field 1 3029 3046 nil nil nil t #s(yas--exit 3047 nil)) nil nil))) nil (25661 29028 453221 893000) 0 nil])
([nil nil ((3016 . 3024) (#("	" 0 1 (fontified t)) . 3016)) nil (25661 29028 453216 104000) 0 nil])
([nil nil ((3036 . 3037) (t 25661 29028 469579 781000)) nil (25661 29034 814645 655000) 0 nil])
([nil nil ((3082 . 3086) (#(" " 0 1 (fontified t face font-lock-string-face)) . -3082) (undo-tree-id6030 . -1) 3083 (3082 . 3083) (#(" " 0 1 (fontified t face font-lock-string-face)) . -3082) (undo-tree-id6031 . -1) 3083 (3082 . 3083) (#(" " 0 1 (fontified t face font-lock-string-face)) . -3082) (undo-tree-id6032 . -1) 3083 (3079 . 3083) (3076 . 3079) (#(":" 0 1 (fontified t face font-lock-string-face)) . -3076) (undo-tree-id6033 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -3077) (undo-tree-id6034 . -1) 3078 (3076 . 3078) (3069 . 3076) (3068 . 3070) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -3068) (3068 . 3069) (apply yas--snippet-revive 3059 3069 #s(yas--snippet nil nil #s(yas--exit 3068 nil) 156 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3068 nil) 156 nil nil nil nil)) (3059 . 3069) (#("println!($0)" 0 12 (fontified nil)) . 3059) (3059 . 3071) (#("pr" 0 2 (fontified nil)) . 3059) (3059 . 3061) (#("println!(…)" 0 11 (fontified nil)) . -3059) (3059 . 3070) (#("pr" 0 2 (fontified t)) . -3059) (undo-tree-id6035 . -2) (undo-tree-id6036 . -2) 3061 (3059 . 3061) (3058 . 3059) (#("	" 0 1 (fontified nil)) . 3057) (undo-tree-id6037 . -1) (3056 . 3059) (t 25661 29034 829646 88000)) nil (25661 29121 428973 59000) 0 nil])
([nil nil ((3097 . 3102) (#("in" 0 2 (fontified nil)) . 3097) (3097 . 3099) (#("index" 0 5 (fontified nil)) . -3097) (3097 . 3102) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -3097) (undo-tree-id6026 . -2) (undo-tree-id6027 . -2) 3099 (3097 . 3099) (3096 . 3098) (3089 . 3096) (#("tr" 0 2 (fontified nil)) . 3089) (3089 . 3091) (#("trn_lbl" 0 7 (fontified nil)) . -3089) (3089 . 3096) (#("tr" 0 2 (fontified t)) . -3089) (undo-tree-id6028 . -2) (undo-tree-id6029 . -2) 3091 (3087 . 3091)) nil (25661 29121 428962 435000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -3129) (undo-tree-id6022 . -1) 3130 (3118 . 3130) (3117 . 3119) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -3117) (3117 . 3118) (apply yas--snippet-revive 3108 3118 #s(yas--snippet nil nil #s(yas--exit 3117 nil) 157 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3117 nil) 157 nil nil nil nil)) (3108 . 3118) (#("println!($0)" 0 12 (fontified nil)) . 3108) (3108 . 3120) (#("pr" 0 2 (fontified nil)) . 3108) (3108 . 3110) (#("println!(…)" 0 11 (fontified nil)) . -3108) (3108 . 3119) (#("pr" 0 2 (fontified t)) . -3108) (undo-tree-id6023 . -2) (undo-tree-id6024 . -2) 3110 (3108 . 3110) (3107 . 3108) (#("	" 0 1 (fontified nil)) . 3106) (undo-tree-id6025 . -1) (3105 . 3108) (3104 . 3105)) nil (25661 29121 428953 751000) 0 nil])
([nil nil ((3080 . 3081) (#("e" 0 1 (fontified t face font-lock-string-face)) . 3080)) nil (25661 29121 428859 22000) 0 nil])
([nil nil ((3078 . 3079) (#("e" 0 1 (fontified t face font-lock-string-face)) . 3078)) nil (25661 29121 428858 146000) 0 nil])
([nil nil ((3080 . 3081) (#("a" 0 1 (fontified t face font-lock-string-face)) . 3080)) nil (25661 29121 428857 214000) 0 nil])
([nil nil ((3133 . 3137) (#(" " 0 1 (fontified t face font-lock-string-face)) . -3133) (undo-tree-id6021 . -1) 3134 (3129 . 3134)) nil (25661 29121 428856 25000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3152 3157 nil nil nil nil #s(yas--exit 3158 nil))) #s(yas--exit 3158 nil) 158 nil #s(yas--field 1 3152 3157 nil nil nil nil #s(yas--exit 3158 nil)) nil nil)) (3144 . 3158) (#("predict(${1:image})$0" 0 21 (fontified nil)) . 3144) (3144 . 3165) (#("pr" 0 2 (fontified nil)) . 3144) (3144 . 3146) (#("predict(…)" 0 10 (fontified nil)) . -3144) (3144 . 3154) (#("pr" 0 2 (fontified t)) . -3144) (undo-tree-id6011 . -2) (undo-tree-id6012 . -2) 3146 (3143 . 3146) (3140 . 3143) (#("ne" 0 2 (fontified nil)) . 3140) (3140 . 3142) (#("net" 0 3 (fontified nil)) . -3140) (3140 . 3143) (#("ne" 0 2 (fontified t)) . -3140) (undo-tree-id6013 . -2) (undo-tree-id6014 . -2) 3142 (3140 . 3142) (#("p" 0 1 (fontified t)) . -3140) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (#("r" 0 1 (fontified t)) . -3141) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) 3142 (3140 . 3142) (#("t" 0 1 (fontified t)) . -3140) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) 3141 (3138 . 3141)) nil (25661 29121 428851 904000) 0 nil])
([nil nil ((apply yas--snippet-revive 3144 3158 #s(yas--snippet nil (#s(yas--field 1 3152 3157 nil nil nil nil #s(yas--exit 3158 nil))) #s(yas--exit 3158 nil) 158 nil #s(yas--field 1 3152 3157 nil nil nil nil #s(yas--exit 3158 nil)) nil nil))) nil (25661 29121 428841 359000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . 3152) (undo-tree-id6008 . 5) (undo-tree-id6009 . -4) (undo-tree-id6010 . -5)) nil (25661 29121 428840 224000) 0 nil])
([nil nil ((3163 . 3168) (#("in" 0 2 (fontified nil)) . 3163) (3163 . 3165) (#("index" 0 5 (fontified nil)) . -3163) (3163 . 3168) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -3163) (undo-tree-id6004 . -2) (undo-tree-id6005 . -2) 3165 (3163 . 3165) (3162 . 3164) (3152 . 3162) (#("te" 0 2 (fontified nil)) . 3152) (3152 . 3154) (#("test_image" 0 10 (fontified nil)) . -3152) (3152 . 3162) (#("te" 0 2 (fontified t)) . -3152) (undo-tree-id6006 . -2) (undo-tree-id6007 . -2) 3154 (3152 . 3154)) nil (25661 29121 428835 897000) 0 nil])
([nil nil ((3058 . 3122) (#("	println!(\"correct label: {}\", trn_lbl[index]);

	" 0 1 (fontified t) 1 9 (fontified t face rust-builtin-formatting-macro) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 26 (fontified t face font-lock-string-face) 26 28 (fontified t face rust-string-interpolation) 28 29 (fontified t face font-lock-string-face) 29 31 (fontified t) 31 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-4-face)) 39 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-4-face)) 45 46 (fontified t face (rainbow-delimiters-depth-3-face)) 46 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t)) . 3058) (undo-tree-id6003 . -49)) nil (25661 29121 428825 56000) 0 nil])
([nil nil ((apply yas--snippet-revive 3184 3191 #s(yas--snippet nil nil #s(yas--exit 3191 nil) 159 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3191 nil) 159 nil nil nil nil)) (3184 . 3191) (#("clone()$0" 0 9 (fontified nil)) . 3184) (3184 . 3193) (#("cl" 0 2 (fontified nil)) . 3184) (3184 . 3186) (#("clone() (as Clone)" 0 18 (fontified nil)) . -3184) (3184 . 3202) (#("cl" 0 2 (fontified t)) . -3184) (undo-tree-id6258 . -2) (undo-tree-id6259 . -2) (undo-tree-id6260 . -2) (undo-tree-id6261 . -2) (undo-tree-id6262 . -2) (undo-tree-id6263 . -2) (undo-tree-id6264 . -2) (undo-tree-id6265 . -2) (undo-tree-id6266 . -2) (undo-tree-id6267 . -2) (undo-tree-id6268 . -2) (undo-tree-id6269 . -2) (undo-tree-id6270 . -2) (undo-tree-id6271 . -2) (undo-tree-id6272 . -2) (undo-tree-id6273 . -2) (undo-tree-id6274 . -2) (undo-tree-id6275 . -2) (undo-tree-id6276 . -2) (undo-tree-id6277 . -2) (undo-tree-id6278 . -2) (undo-tree-id6279 . -2) (undo-tree-id6280 . -2) (undo-tree-id6281 . -2) (undo-tree-id6282 . -2) (undo-tree-id6283 . -2) (undo-tree-id6284 . -2) (undo-tree-id6285 . -2) (undo-tree-id6286 . -2) (undo-tree-id6287 . -2) (undo-tree-id6288 . -2) (undo-tree-id6289 . -2) (undo-tree-id6290 . -2) (undo-tree-id6291 . -2) (undo-tree-id6292 . -2) (undo-tree-id6293 . -2) (undo-tree-id6294 . -2) (undo-tree-id6295 . -2) (undo-tree-id6296 . -2) (undo-tree-id6297 . -2) (undo-tree-id6298 . -2) (undo-tree-id6299 . -2) (undo-tree-id6300 . -2) (undo-tree-id6301 . -2) (undo-tree-id6302 . -2) (undo-tree-id6303 . -2) (undo-tree-id6304 . -2) (undo-tree-id6305 . -2) (undo-tree-id6306 . -2) (undo-tree-id6307 . -2) 3186 (3184 . 3186) (#("l" 0 1 (fontified t)) . -3184) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) 3185 (3183 . 3185) (t 25661 29121 440549 20000)) nil (25661 29126 565879 823000) 0 nil])
([nil nil ((3131 . 3226) (#("\"predicted label: {}\", net.predict(test_image[index].clone())" 0 18 (fontified t face font-lock-string-face) 18 20 (fontified t face rust-string-interpolation) 20 21 (fontified t face font-lock-string-face) 21 23 (fontified t) 23 27 (fontified t) 27 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-4-face)) 35 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-5-face)) 46 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-5-face)) 52 53 (fontified t) 53 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-5-face)) 59 60 (fontified t face (rainbow-delimiters-depth-5-face)) 60 61 (fontified t face (rainbow-delimiters-depth-4-face))) . 3131) (undo-tree-id6038 . 1) (undo-tree-id6039 . -22) (undo-tree-id6040 . -51) (undo-tree-id6041 . -53) (undo-tree-id6042 . -53) (undo-tree-id6043 . -53) (undo-tree-id6044 . -53) (undo-tree-id6045 . -53) (undo-tree-id6046 . -53) (undo-tree-id6047 . -53) (undo-tree-id6048 . -53) (undo-tree-id6049 . -53) (undo-tree-id6050 . -53) (undo-tree-id6051 . -53) (undo-tree-id6052 . -53) (undo-tree-id6053 . -53) (undo-tree-id6054 . -53) (undo-tree-id6055 . -53) (undo-tree-id6056 . -53) (undo-tree-id6057 . -53) (undo-tree-id6058 . -53) (undo-tree-id6059 . -53) (undo-tree-id6060 . -53) (undo-tree-id6061 . -53) (undo-tree-id6062 . -53) (undo-tree-id6063 . -53) (undo-tree-id6064 . -53) (undo-tree-id6065 . -53) (undo-tree-id6066 . -53) (undo-tree-id6067 . -53) (undo-tree-id6068 . -53) (undo-tree-id6069 . -53) (undo-tree-id6070 . -53) (undo-tree-id6071 . -53) (undo-tree-id6072 . -53) (undo-tree-id6073 . -53) (undo-tree-id6074 . -53) (undo-tree-id6075 . -53) (undo-tree-id6076 . -53) (undo-tree-id6077 . -53) (undo-tree-id6078 . -53) (undo-tree-id6079 . -53) (undo-tree-id6080 . -53) (undo-tree-id6081 . -53) (undo-tree-id6082 . -53) (undo-tree-id6083 . -53) (undo-tree-id6084 . -53) (undo-tree-id6085 . -53) (undo-tree-id6086 . -53) (undo-tree-id6087 . -53) (undo-tree-id6088 . -60) (undo-tree-id6089 . -60) (undo-tree-id6090 . -60) (undo-tree-id6091 . -60) (undo-tree-id6092 . -60) (undo-tree-id6093 . -60) (undo-tree-id6094 . -60) (undo-tree-id6095 . -60) (undo-tree-id6096 . -60) (undo-tree-id6097 . -60) (undo-tree-id6098 . -60) (undo-tree-id6099 . -60) (undo-tree-id6100 . -60) (undo-tree-id6101 . -60) (undo-tree-id6102 . -60) (undo-tree-id6103 . -60) (undo-tree-id6104 . -60) (undo-tree-id6105 . -60) (undo-tree-id6106 . -60) (undo-tree-id6107 . -60) (undo-tree-id6108 . -60) (undo-tree-id6109 . -60) (undo-tree-id6110 . -60) (undo-tree-id6111 . -60) (undo-tree-id6112 . -60) (undo-tree-id6113 . -60) (undo-tree-id6114 . -60) (undo-tree-id6115 . -60) (undo-tree-id6116 . -60) (undo-tree-id6117 . -60) (undo-tree-id6118 . -60) (undo-tree-id6119 . -60) (undo-tree-id6120 . -60) (undo-tree-id6121 . -60) (undo-tree-id6122 . -60) (undo-tree-id6123 . -60) (undo-tree-id6124 . -60) (undo-tree-id6125 . -60) (undo-tree-id6126 . -60) (undo-tree-id6127 . -60) (undo-tree-id6128 . -60) (undo-tree-id6129 . -60) (undo-tree-id6130 . -60) (undo-tree-id6131 . -60) (undo-tree-id6132 . -60) (undo-tree-id6133 . -60) (undo-tree-id6134 . -60) (undo-tree-id6135 . -60) (undo-tree-id6136 . -60) (undo-tree-id6137 . -60) (undo-tree-id6138 . -60) (undo-tree-id6139 . -60) (undo-tree-id6140 . -59) (undo-tree-id6141 . -59) (undo-tree-id6142 . -59) (undo-tree-id6143 . -59) (undo-tree-id6144 . -59) (undo-tree-id6145 . -59) (undo-tree-id6146 . -59) (undo-tree-id6147 . -59) (undo-tree-id6148 . -59) (undo-tree-id6149 . -59) (undo-tree-id6150 . -59) (undo-tree-id6151 . -59) (undo-tree-id6152 . -59) (undo-tree-id6153 . -59) (undo-tree-id6154 . -59) (undo-tree-id6155 . -59) (undo-tree-id6156 . -59) (undo-tree-id6157 . -59) (undo-tree-id6158 . -59) (undo-tree-id6159 . -59) (undo-tree-id6160 . -59) (undo-tree-id6161 . -59) (undo-tree-id6162 . -59) (undo-tree-id6163 . -59) (undo-tree-id6164 . -59) (undo-tree-id6165 . -59) (undo-tree-id6166 . -59) (undo-tree-id6167 . -59) (undo-tree-id6168 . -59) (undo-tree-id6169 . -59) (undo-tree-id6170 . -59) (undo-tree-id6171 . -59) (undo-tree-id6172 . -59) (undo-tree-id6173 . -59) (undo-tree-id6174 . -59) (undo-tree-id6175 . -59) (undo-tree-id6176 . -59) (undo-tree-id6177 . -59) (undo-tree-id6178 . -59) (undo-tree-id6179 . -59) (undo-tree-id6180 . -59) (undo-tree-id6181 . -59) (undo-tree-id6182 . -59) (undo-tree-id6183 . -59) (undo-tree-id6184 . -59) (undo-tree-id6185 . -59) (undo-tree-id6186 . -59) (undo-tree-id6187 . -59) (undo-tree-id6188 . -59) (undo-tree-id6189 . -59) (undo-tree-id6190 . -59) (undo-tree-id6191 . -59) (undo-tree-id6192 . -59) (undo-tree-id6193 . -59) (undo-tree-id6194 . -59) (undo-tree-id6195 . -59) (undo-tree-id6196 . -59) (undo-tree-id6197 . -59) (undo-tree-id6198 . -59) (undo-tree-id6199 . -59) (undo-tree-id6200 . -59) (undo-tree-id6201 . -59) (undo-tree-id6202 . -59) (undo-tree-id6203 . -59) (undo-tree-id6204 . -59) (undo-tree-id6205 . -59) (undo-tree-id6206 . -59) (undo-tree-id6207 . -59) (undo-tree-id6208 . -59) (undo-tree-id6209 . -59) (undo-tree-id6210 . -59) (undo-tree-id6211 . -59) (undo-tree-id6212 . -59) (undo-tree-id6213 . -59) (undo-tree-id6214 . -59) (undo-tree-id6215 . -59) (undo-tree-id6216 . -59) (undo-tree-id6217 . -59) (undo-tree-id6218 . -59) (undo-tree-id6219 . -59) (undo-tree-id6220 . -59) (undo-tree-id6221 . -59) (undo-tree-id6222 . -59) (undo-tree-id6223 . -59) (undo-tree-id6224 . -59) (undo-tree-id6225 . -59) (undo-tree-id6226 . -59) (undo-tree-id6227 . -59) (undo-tree-id6228 . -59) (undo-tree-id6229 . -59) (undo-tree-id6230 . -59) (undo-tree-id6231 . -59) (undo-tree-id6232 . -59) (undo-tree-id6233 . -59) (undo-tree-id6234 . -59) (undo-tree-id6235 . -59) (undo-tree-id6236 . -59) (undo-tree-id6237 . -59) (undo-tree-id6238 . -59) (undo-tree-id6239 . -59) (undo-tree-id6240 . -59) (undo-tree-id6241 . -59) (undo-tree-id6242 . -59) (undo-tree-id6243 . -59) (undo-tree-id6244 . -59) (undo-tree-id6245 . -59) (undo-tree-id6246 . -59) (undo-tree-id6247 . -59) (undo-tree-id6248 . -59) (undo-tree-id6249 . -59) (undo-tree-id6250 . -59) (undo-tree-id6251 . -59) (undo-tree-id6252 . -59) (undo-tree-id6253 . -59) (undo-tree-id6254 . -59) (undo-tree-id6255 . -59) (undo-tree-id6256 . -59) (undo-tree-id6257 . -59)) nil (25661 29126 565842 18000) 0 nil])
([nil nil ((#("        //        print_image()
" 0 8 (fontified t) 8 10 (fontified t face font-lock-comment-delimiter-face) 10 18 (fontified t face font-lock-comment-delimiter-face) 18 29 (fontified t face font-lock-comment-face) 29 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face) 31 32 (fontified t face font-lock-comment-face)) . 3229) (undo-tree-id6312 . -31) (undo-tree-id6313 . -16) 3245 (t 25661 29126 580602 607000)) nil (25661 29131 48271 305000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3228) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1)) nil (25661 29131 48263 845000) 0 nil])
([nil nil ((#("
    let first = 28 * 28;
    let second = 500;
    let third = 10;

    let Mnist {
        trn_img,
        trn_lbl,
        tst_img,
        tst_lbl,
        ..
    } = MnistBuilder::new()
        .label_format_digit()
        .training_set_length(50_000)
        .validation_set_length(10_000)
        .test_set_length(10_000)
        .finalize();

    let mut train_images = Vec::new();
    for chunks in trn_img.chunks(first) {
        let image_matrix = Array::from_shape_vec((first, 1), chunks.to_vec())
            .unwrap()
            .map(|x| *x as f64 / 256.0);
        train_images.push(image_matrix);
    }

    // for k in 0..20 {
    //     print_image(&train_images[k]);

    //     println!(\"{}\", trn_lbl[k]);
    // }
    let mut network = init_network(first, second, third);

    let mut count: u64 = 0;

    println!(\"training the model, it's gonna take a lot of time\");

    for (img, lbl) in train_images.iter().zip(trn_lbl) {
        network = network.forward_propagate(img.clone()).unwrap();

        let (net, loss) = network.backprop(lbl, EPSILON);

        network = net;

        if count % 100 == 0 {
            println!(\"loss: {loss}\");
        }

        count += 1;
    }

    let mut test_image = Vec::new();
    for chunks in tst_img.chunks(first) {
        let image_matrix = Array::from_shape_vec((first, 1), chunks.to_vec())
            .unwrap()
            .map(|x| *x as f64 / 256.0);
        test_image.push(image_matrix);
    }

    let mut corrects = 0.0;

    for thing in test_image.iter().zip(tst_lbl).take(300) {
        let (img, lbl) = thing;

        let i = network.predict(img.clone());
        if i == lbl as usize {
            corrects += 1.0;
        }
    }

    let percentage = (corrects * 100.0) / 300.0;
    println!(\"works {} % of the time\", percentage);

    println!(\"saving the model....\");
    network.save(\"model.cbor\").unwrap();" 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-variable-name-face) 14 26 (fontified t) 26 30 (fontified t) 30 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 40 (fontified t face font-lock-variable-name-face) 40 48 (fontified t) 48 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 61 (fontified t face font-lock-variable-name-face) 61 67 (fontified t) 67 68 (rear-nonsticky t fontified t) 68 69 (fontified t) 69 73 (fontified t) 73 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t) 77 82 (fontified t face font-lock-type-face) 82 83 (fontified t) 83 84 (fontified t face (rainbow-delimiters-depth-2-face)) 84 168 (fontified t) 168 169 (fontified t face (rainbow-delimiters-depth-2-face)) 169 172 (fontified t) 172 184 (fontified t face font-lock-type-face) 184 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-2-face)) 190 191 (fontified t face (rainbow-delimiters-depth-2-face)) 191 219 (fontified t) 219 220 (fontified t face (rainbow-delimiters-depth-2-face)) 220 221 (fontified t face (rainbow-delimiters-depth-2-face)) 221 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-2-face)) 251 257 (fontified t) 257 258 (fontified t face (rainbow-delimiters-depth-2-face)) 258 289 (fontified t) 289 290 (fontified t face (rainbow-delimiters-depth-2-face)) 290 296 (fontified t) 296 297 (fontified t face (rainbow-delimiters-depth-2-face)) 297 322 (fontified t) 322 323 (fontified t face (rainbow-delimiters-depth-2-face)) 323 329 (fontified t) 329 330 (fontified t face (rainbow-delimiters-depth-2-face)) 330 331 (fontified t) 331 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-2-face)) 349 350 (fontified t face (rainbow-delimiters-depth-2-face)) 350 352 (fontified t) 352 353 (fontified t) 353 356 (fontified t) 356 357 (rear-nonsticky t fontified t) 357 360 (fontified t face font-lock-keyword-face) 360 361 (fontified t) 361 364 (fontified t face font-lock-keyword-face) 364 365 (fontified t) 365 377 (fontified t face font-lock-variable-name-face) 377 380 (fontified t) 380 383 (fontified t face font-lock-type-face) 383 388 (fontified t) 388 389 (fontified t face (rainbow-delimiters-depth-2-face)) 389 390 (fontified t face (rainbow-delimiters-depth-2-face)) 390 391 (fontified t) 391 392 (fontified t) 392 396 (fontified t) 396 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 406 (fontified t face font-lock-variable-name-face) 406 407 (fontified t) 407 409 (fontified t face font-lock-keyword-face) 409 424 (fontified t) 424 425 (fontified t face (rainbow-delimiters-depth-2-face)) 425 430 (fontified t) 430 431 (fontified t face (rainbow-delimiters-depth-2-face)) 431 432 (fontified t) 432 433 (fontified t face (rainbow-delimiters-depth-2-face)) 433 434 (fontified t) 434 442 (fontified t) 442 445 (fontified t face font-lock-keyword-face) 445 446 (fontified t) 446 458 (fontified t face font-lock-variable-name-face) 458 461 (fontified t) 461 466 (fontified t face font-lock-type-face) 466 482 (fontified t) 482 483 (fontified t face (rainbow-delimiters-depth-3-face)) 483 484 (fontified t face (rainbow-delimiters-depth-4-face)) 484 489 (fontified t) 489 492 (fontified t) 492 493 (fontified t face (rainbow-delimiters-depth-4-face)) 493 508 (fontified t) 508 509 (fontified t face (rainbow-delimiters-depth-4-face)) 509 510 (fontified t face (rainbow-delimiters-depth-4-face)) 510 511 (fontified t face (rainbow-delimiters-depth-3-face)) 511 512 (fontified t) 512 531 (fontified t) 531 532 (fontified t face (rainbow-delimiters-depth-3-face)) 532 533 (fontified t face (rainbow-delimiters-depth-3-face)) 533 550 (fontified t) 550 551 (fontified t face (rainbow-delimiters-depth-3-face)) 551 558 (fontified t) 558 560 (fontified t face font-lock-keyword-face) 560 561 (fontified t) 561 564 (fontified t face font-lock-type-face) 564 572 (fontified t) 572 573 (fontified t face (rainbow-delimiters-depth-3-face)) 573 600 (fontified t) 600 601 (fontified t face (rainbow-delimiters-depth-3-face)) 601 613 (fontified t) 613 614 (fontified t face (rainbow-delimiters-depth-3-face)) 614 620 (fontified t) 620 621 (fontified t face (rainbow-delimiters-depth-2-face)) 621 622 (fontified t) 622 623 (fontified t) 623 627 (fontified t) 627 630 (fontified t face font-lock-comment-delimiter-face) 630 633 (fontified t face font-lock-comment-face) 633 634 (fontified t face font-lock-comment-face) 634 635 (fontified t face font-lock-comment-face) 635 636 (fontified t face font-lock-comment-face) 636 638 (fontified t face font-lock-comment-face) 638 645 (fontified t face font-lock-comment-face) 645 646 (fontified t face font-lock-comment-face) 646 647 (fontified t face font-lock-comment-face) 647 651 (fontified t) 651 654 (fontified t face font-lock-comment-delimiter-face) 654 658 (fontified t face font-lock-comment-delimiter-face) 658 669 (fontified t face font-lock-comment-face) 669 670 (fontified t face font-lock-comment-face) 670 671 (fontified t face font-lock-comment-face) 671 683 (fontified t face font-lock-comment-face) 683 684 (fontified t face font-lock-comment-face) 684 685 (fontified t face font-lock-comment-face) 685 686 (fontified t face font-lock-comment-face) 686 687 (fontified t face font-lock-comment-face) 687 689 (fontified t face font-lock-comment-face) 689 694 (fontified t) 694 697 (fontified t face font-lock-comment-delimiter-face) 697 701 (fontified t face font-lock-comment-delimiter-face) 701 709 (fontified t face font-lock-comment-face) 709 710 (fontified t face font-lock-comment-face) 710 711 (fontified t face font-lock-comment-face) 711 713 (fontified t face font-lock-comment-face) 713 714 (fontified t face font-lock-comment-face) 714 723 (fontified t face font-lock-comment-face) 723 724 (fontified t face font-lock-comment-face) 724 725 (fontified t face font-lock-comment-face) 725 726 (fontified t face font-lock-comment-face) 726 727 (fontified t face font-lock-comment-face) 727 729 (fontified t face font-lock-comment-face) 729 733 (fontified t) 733 736 (fontified t face font-lock-comment-delimiter-face) 736 737 (fontified t face font-lock-comment-face) 737 738 (fontified t face font-lock-comment-face) 738 742 (fontified t) 742 745 (fontified t face font-lock-keyword-face) 745 746 (fontified t) 746 749 (fontified t face font-lock-keyword-face) 749 750 (fontified t) 750 757 (fontified t face font-lock-variable-name-face) 757 772 (fontified t) 772 773 (fontified t face (rainbow-delimiters-depth-2-face)) 773 793 (fontified t) 793 794 (fontified t face (rainbow-delimiters-depth-2-face)) 794 796 (fontified t) 796 797 (fontified t) 797 801 (fontified t) 801 804 (fontified t face font-lock-keyword-face) 804 805 (fontified t) 805 808 (fontified t face font-lock-keyword-face) 808 809 (fontified t) 809 814 (fontified t face font-lock-variable-name-face) 814 816 (fontified t) 816 819 (fontified t face font-lock-type-face) 819 825 (fontified t) 825 826 (fontified t) 826 830 (fontified t) 830 838 (fontified t face rust-builtin-formatting-macro) 838 839 (fontified t face (rainbow-delimiters-depth-2-face)) 839 890 (fontified t face font-lock-string-face) 890 891 (fontified t face (rainbow-delimiters-depth-2-face)) 891 892 (fontified t) 892 893 (fontified t) 893 894 (fontified t) 894 898 (fontified t) 898 901 (fontified t face font-lock-keyword-face) 901 902 (fontified t) 902 903 (fontified t face (rainbow-delimiters-depth-2-face)) 903 911 (fontified t) 911 912 (fontified t face (rainbow-delimiters-depth-2-face)) 912 913 (fontified t) 913 915 (fontified t face font-lock-keyword-face) 915 933 (fontified t) 933 934 (fontified t face (rainbow-delimiters-depth-2-face)) 934 935 (fontified t face (rainbow-delimiters-depth-2-face)) 935 939 (fontified t) 939 940 (fontified t face (rainbow-delimiters-depth-2-face)) 940 947 (fontified t) 947 948 (fontified t face (rainbow-delimiters-depth-2-face)) 948 949 (fontified t) 949 950 (fontified t face (rainbow-delimiters-depth-2-face)) 950 951 (fontified t) 951 994 (fontified t) 994 995 (fontified t face (rainbow-delimiters-depth-3-face)) 995 1004 (fontified t) 1004 1005 (fontified t face (rainbow-delimiters-depth-4-face)) 1005 1006 (fontified t face (rainbow-delimiters-depth-4-face)) 1006 1007 (fontified t face (rainbow-delimiters-depth-3-face)) 1007 1014 (fontified t) 1014 1015 (fontified t face (rainbow-delimiters-depth-3-face)) 1015 1016 (fontified t face (rainbow-delimiters-depth-3-face)) 1016 1019 (fontified t) 1019 1027 (fontified t) 1027 1030 (fontified t face font-lock-keyword-face) 1030 1031 (fontified t) 1031 1032 (fontified t face (rainbow-delimiters-depth-3-face)) 1032 1041 (fontified t) 1041 1042 (fontified t face (rainbow-delimiters-depth-3-face)) 1042 1061 (fontified t) 1061 1062 (fontified t face (rainbow-delimiters-depth-3-face)) 1062 1067 (fontified t) 1067 1074 (fontified t face font-lock-type-face) 1074 1075 (fontified t face (rainbow-delimiters-depth-3-face)) 1075 1077 (fontified t) 1077 1078 (fontified t) 1078 1110 (fontified t) 1110 1112 (fontified t face font-lock-keyword-face) 1112 1130 (fontified t) 1130 1131 (fontified t face (rainbow-delimiters-depth-3-face)) 1131 1144 (fontified t) 1144 1152 (fontified t face rust-builtin-formatting-macro) 1152 1153 (fontified t face (rainbow-delimiters-depth-4-face)) 1153 1160 (fontified t face font-lock-string-face) 1160 1166 (fontified t face rust-string-interpolation) 1166 1167 (fontified t face font-lock-string-face) 1167 1168 (fontified t face (rainbow-delimiters-depth-4-face)) 1168 1178 (fontified t) 1178 1179 (fontified t face (rainbow-delimiters-depth-3-face)) 1179 1200 (fontified t) 1200 1201 (fontified t) 1201 1205 (fontified t) 1205 1206 (fontified t face (rainbow-delimiters-depth-2-face)) 1206 1207 (fontified t) 1207 1208 (fontified t) 1208 1212 (fontified t) 1212 1215 (fontified t face font-lock-keyword-face) 1215 1216 (fontified t) 1216 1219 (fontified t face font-lock-keyword-face) 1219 1220 (fontified t) 1220 1230 (fontified t face font-lock-variable-name-face) 1230 1233 (fontified t) 1233 1236 (fontified t face font-lock-type-face) 1236 1241 (fontified t) 1241 1242 (fontified t face (rainbow-delimiters-depth-2-face)) 1242 1243 (fontified t face (rainbow-delimiters-depth-2-face)) 1243 1249 (fontified t) 1249 1252 (fontified t face font-lock-keyword-face) 1252 1253 (fontified t) 1253 1259 (fontified t face font-lock-variable-name-face) 1259 1260 (fontified t) 1260 1262 (fontified t face font-lock-keyword-face) 1262 1277 (fontified t) 1277 1278 (fontified t face (rainbow-delimiters-depth-2-face)) 1278 1283 (fontified t) 1283 1284 (fontified t face (rainbow-delimiters-depth-2-face)) 1284 1285 (fontified t) 1285 1286 (fontified t face (rainbow-delimiters-depth-2-face)) 1286 1287 (fontified t) 1287 1295 (fontified t) 1295 1298 (fontified t face font-lock-keyword-face) 1298 1299 (fontified t) 1299 1311 (fontified t face font-lock-variable-name-face) 1311 1314 (fontified t) 1314 1319 (fontified t face font-lock-type-face) 1319 1335 (fontified t) 1335 1336 (fontified t face (rainbow-delimiters-depth-3-face)) 1336 1337 (fontified t face (rainbow-delimiters-depth-4-face)) 1337 1342 (fontified t) 1342 1345 (fontified t) 1345 1346 (fontified t face (rainbow-delimiters-depth-4-face)) 1346 1361 (fontified t) 1361 1362 (fontified t face (rainbow-delimiters-depth-4-face)) 1362 1363 (fontified t face (rainbow-delimiters-depth-4-face)) 1363 1364 (fontified t face (rainbow-delimiters-depth-3-face)) 1364 1365 (fontified t) 1365 1384 (fontified t) 1384 1385 (fontified t face (rainbow-delimiters-depth-3-face)) 1385 1386 (fontified t face (rainbow-delimiters-depth-3-face)) 1386 1403 (fontified t) 1403 1404 (fontified t face (rainbow-delimiters-depth-3-face)) 1404 1411 (fontified t) 1411 1413 (fontified t face font-lock-keyword-face) 1413 1414 (fontified t) 1414 1417 (fontified t face font-lock-type-face) 1417 1425 (fontified t) 1425 1426 (fontified t face (rainbow-delimiters-depth-3-face)) 1426 1451 (fontified t) 1451 1452 (fontified t face (rainbow-delimiters-depth-3-face)) 1452 1464 (fontified t) 1464 1465 (fontified t face (rainbow-delimiters-depth-3-face)) 1465 1471 (fontified t) 1471 1472 (fontified t face (rainbow-delimiters-depth-2-face)) 1472 1478 (fontified t) 1478 1481 (fontified t face font-lock-keyword-face) 1481 1482 (fontified t) 1482 1485 (fontified t face font-lock-keyword-face) 1485 1486 (fontified t) 1486 1492 (fontified t face font-lock-variable-name-face) 1492 1494 (face font-lock-variable-name-face fontified t) 1494 1502 (fontified t) 1502 1507 (fontified t) 1507 1510 (fontified t face font-lock-keyword-face) 1510 1511 (fontified t) 1511 1516 (fontified t face font-lock-variable-name-face) 1516 1517 (fontified t) 1517 1519 (fontified t face font-lock-keyword-face) 1519 1535 (fontified t) 1535 1536 (fontified t face (rainbow-delimiters-depth-2-face)) 1536 1537 (fontified t face (rainbow-delimiters-depth-2-face)) 1537 1541 (fontified t) 1541 1542 (fontified t face (rainbow-delimiters-depth-2-face)) 1542 1549 (fontified t) 1549 1550 (fontified t face (rainbow-delimiters-depth-2-face)) 1550 1555 (fontified t) 1555 1556 (fontified t face (rainbow-delimiters-depth-2-face)) 1556 1559 (fontified t) 1559 1560 (fontified t face (rainbow-delimiters-depth-2-face)) 1560 1561 (fontified t) 1561 1562 (fontified t face (rainbow-delimiters-depth-2-face)) 1562 1571 (fontified t) 1571 1574 (fontified t face font-lock-keyword-face) 1574 1575 (fontified t) 1575 1576 (fontified t face (rainbow-delimiters-depth-3-face)) 1576 1584 (fontified t) 1584 1585 (fontified t face (rainbow-delimiters-depth-3-face)) 1585 1596 (fontified t) 1596 1604 (fontified t) 1604 1607 (fontified t face font-lock-keyword-face) 1607 1608 (fontified t) 1608 1609 (fontified t face font-lock-variable-name-face) 1609 1612 (fontified t) 1612 1619 (fontified t) 1619 1627 (fontified t) 1627 1628 (fontified t face (rainbow-delimiters-depth-3-face)) 1628 1637 (fontified t) 1637 1638 (fontified t face (rainbow-delimiters-depth-4-face)) 1638 1639 (fontified t face (rainbow-delimiters-depth-4-face)) 1639 1640 (fontified t face (rainbow-delimiters-depth-3-face)) 1640 1641 (fontified t) 1641 1642 (fontified t) 1642 1650 (fontified t) 1650 1652 (fontified t face font-lock-keyword-face) 1652 1662 (fontified t) 1662 1664 (fontified t face font-lock-keyword-face) 1664 1665 (fontified t) 1665 1670 (fontified t face font-lock-type-face) 1670 1671 (fontified t) 1671 1672 (fontified t face (rainbow-delimiters-depth-3-face)) 1672 1673 (fontified t) 1673 1698 (fontified t) 1698 1702 (fontified t) 1702 1710 (fontified t) 1710 1711 (fontified t face (rainbow-delimiters-depth-3-face)) 1711 1712 (fontified t) 1712 1716 (fontified t) 1716 1717 (fontified t face (rainbow-delimiters-depth-2-face)) 1717 1723 (fontified t) 1723 1726 (fontified t face font-lock-keyword-face) 1726 1727 (fontified t) 1727 1737 (fontified t face font-lock-variable-name-face) 1737 1740 (fontified t) 1740 1741 (fontified t face (rainbow-delimiters-depth-2-face)) 1741 1757 (fontified t) 1757 1758 (fontified t face (rainbow-delimiters-depth-2-face)) 1758 1768 (fontified t) 1768 1772 (fontified t) 1772 1780 (fontified t face rust-builtin-formatting-macro) 1780 1781 (fontified t face (rainbow-delimiters-depth-2-face)) 1781 1788 (fontified t face font-lock-string-face) 1788 1790 (fontified t face rust-string-interpolation) 1790 1805 (fontified t face font-lock-string-face) 1805 1817 (fontified t) 1817 1818 (fontified t face (rainbow-delimiters-depth-2-face)) 1818 1820 (fontified t) 1820 1821 (fontified t) 1821 1825 (fontified t) 1825 1833 (fontified t face rust-builtin-formatting-macro) 1833 1834 (fontified t face (rainbow-delimiters-depth-2-face)) 1834 1856 (fontified t face font-lock-string-face) 1856 1857 (fontified t face (rainbow-delimiters-depth-2-face)) 1857 1859 (fontified t) 1859 1863 (fontified t) 1863 1871 (fontified t) 1871 1875 (fontified t) 1875 1876 (fontified t face (rainbow-delimiters-depth-2-face)) 1876 1888 (fontified t face font-lock-string-face) 1888 1889 (fontified t face (rainbow-delimiters-depth-2-face)) 1889 1890 (fontified t) 1890 1896 (fontified t) 1896 1897 (fontified t face (rainbow-delimiters-depth-2-face)) 1897 1898 (fontified t face (rainbow-delimiters-depth-2-face)) 1898 1899 (fontified t)) . 141) (undo-tree-id6579 . -1898) (undo-tree-id6580 . -1898) (undo-tree-id6581 . -1898) (undo-tree-id6582 . -616) (undo-tree-id6583 . -948) (undo-tree-id6584 . -738) (undo-tree-id6585 . -69) (undo-tree-id6586 . -396) (undo-tree-id6587 . -335) (undo-tree-id6588 . -353) (undo-tree-id6589 . -658) (undo-tree-id6590 . -894) (undo-tree-id6591 . -894) (undo-tree-id6592 . -894) (undo-tree-id6593 . -738) (undo-tree-id6594 . -894) (undo-tree-id6595 . -894) (undo-tree-id6596 . -894) (undo-tree-id6597 . -622) (undo-tree-id6598 . -622) (undo-tree-id6599 . -1208) (undo-tree-id6600 . -1596) (undo-tree-id6601 . -1596) (undo-tree-id6602 . -1596) (undo-tree-id6603 . -1596) (undo-tree-id6604 . -1650) (undo-tree-id6605 . -894) (undo-tree-id6606 . -1285) (undo-tree-id6607 . -1285) (undo-tree-id6608 . -894) (undo-tree-id6609 . -894) (undo-tree-id6610 . -1561) (undo-tree-id6611 . -1561) (undo-tree-id6612 . -1561) (undo-tree-id6613 . -894) (undo-tree-id6614 . -1018) (undo-tree-id6615 . -1018) (undo-tree-id6616 . -1207) (undo-tree-id6617 . -1207) (undo-tree-id6618 . -1207) (undo-tree-id6619 . -948) (undo-tree-id6620 . -948) (undo-tree-id6621 . -622) (undo-tree-id6622 . -1473) (undo-tree-id6623 . -1898) (t 25661 29131 63982 681000)) nil (25661 29156 150132 253000) 0 nil])
([nil nil ((146 . 156) (143 . 146)) nil (25661 29156 150106 652000) 0 nil])
([nil nil ((159 . 163) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 159) (159 . 163) (158 . 160) (156 . 159)) nil (25661 29156 150105 481000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2061 . 2062) (nil fontified nil 163 . 2062) (163 . 2062) 162) nil (25661 29156 150103 632000) 0 nil])
([nil nil ((141 . 156) (#("
}


fn train() {
    " 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 18 (fontified t) 18 22 (fontified t)) . 141) (undo-tree-id6314 . -22) (undo-tree-id6315 . -22) (undo-tree-id6316 . 22) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . 8) (undo-tree-id6321 . -13) (undo-tree-id6322 . -13) (undo-tree-id6323 . -13) (undo-tree-id6324 . -13) (undo-tree-id6325 . -13) (undo-tree-id6326 . -13) (undo-tree-id6327 . -13) (undo-tree-id6328 . -13) (undo-tree-id6329 . -13) (undo-tree-id6330 . -13) (undo-tree-id6331 . -13) (undo-tree-id6332 . -13) (undo-tree-id6333 . -13) (undo-tree-id6334 . -13) (undo-tree-id6335 . -13) (undo-tree-id6336 . -13) (undo-tree-id6337 . -13) (undo-tree-id6338 . -13) (undo-tree-id6339 . -13) (undo-tree-id6340 . -13) (undo-tree-id6341 . -13) (undo-tree-id6342 . -13) (undo-tree-id6343 . -13) (undo-tree-id6344 . -13) (undo-tree-id6345 . -13) (undo-tree-id6346 . -13) (undo-tree-id6347 . -13) (undo-tree-id6348 . -13) (undo-tree-id6349 . -13) (undo-tree-id6350 . -13) (undo-tree-id6351 . -13) (undo-tree-id6352 . -13) (undo-tree-id6353 . -13) (undo-tree-id6354 . -13) (undo-tree-id6355 . -13) (undo-tree-id6356 . -13) (undo-tree-id6357 . -15) (undo-tree-id6358 . -15) (undo-tree-id6359 . -15) (undo-tree-id6360 . -15) (undo-tree-id6361 . -15) (undo-tree-id6362 . -15) (undo-tree-id6363 . -15) (undo-tree-id6364 . -15) (undo-tree-id6365 . -15) (undo-tree-id6366 . -15) (undo-tree-id6367 . -15) (undo-tree-id6368 . -15) (undo-tree-id6369 . -15) (undo-tree-id6370 . -15) (undo-tree-id6371 . -15) (undo-tree-id6372 . -15) (undo-tree-id6373 . -15) (undo-tree-id6374 . -15) (undo-tree-id6375 . -15) (undo-tree-id6376 . -15) (undo-tree-id6377 . -15) (undo-tree-id6378 . -15) (undo-tree-id6379 . -15) (undo-tree-id6380 . -15) (undo-tree-id6381 . -15) (undo-tree-id6382 . -15) (undo-tree-id6383 . -15) (undo-tree-id6384 . -15) (undo-tree-id6385 . -15) (undo-tree-id6386 . -15) (undo-tree-id6387 . -16) (undo-tree-id6388 . -16) (undo-tree-id6389 . -16) (undo-tree-id6390 . -16) (undo-tree-id6391 . -16) (undo-tree-id6392 . -16) (undo-tree-id6393 . -16) (undo-tree-id6394 . -16) (undo-tree-id6395 . -16) (undo-tree-id6396 . -16) (undo-tree-id6397 . -16) (undo-tree-id6398 . -16) (undo-tree-id6399 . -16) (undo-tree-id6400 . -16) (undo-tree-id6401 . -16) (undo-tree-id6402 . -16) (undo-tree-id6403 . -16) (undo-tree-id6404 . -16) (undo-tree-id6405 . -16) (undo-tree-id6406 . -16) (undo-tree-id6407 . -16) (undo-tree-id6408 . -16) (undo-tree-id6409 . -16) (undo-tree-id6410 . -16) (undo-tree-id6411 . -16) (undo-tree-id6412 . -16) (undo-tree-id6413 . -16) (undo-tree-id6414 . -16) (undo-tree-id6415 . -16) (undo-tree-id6416 . -16) (undo-tree-id6417 . -16) (undo-tree-id6418 . -16) (undo-tree-id6419 . -16) (undo-tree-id6420 . -16) (undo-tree-id6421 . -16) (undo-tree-id6422 . -16) (undo-tree-id6423 . -16) (undo-tree-id6424 . -16) (undo-tree-id6425 . -16) (undo-tree-id6426 . -16) (undo-tree-id6427 . -16) (undo-tree-id6428 . -16) (undo-tree-id6429 . -16) (undo-tree-id6430 . -16) (undo-tree-id6431 . -16) (undo-tree-id6432 . -16) (undo-tree-id6433 . -16) (undo-tree-id6434 . -16) (undo-tree-id6435 . -16) (undo-tree-id6436 . -16) (undo-tree-id6437 . -17) (undo-tree-id6438 . -17) (undo-tree-id6439 . -17) (undo-tree-id6440 . -17) (undo-tree-id6441 . -17) (undo-tree-id6442 . -17) (undo-tree-id6443 . -17) (undo-tree-id6444 . -17) (undo-tree-id6445 . -17) (undo-tree-id6446 . -17) (undo-tree-id6447 . -17) (undo-tree-id6448 . -17) (undo-tree-id6449 . -17) (undo-tree-id6450 . -17) (undo-tree-id6451 . -17) (undo-tree-id6452 . -17) (undo-tree-id6453 . -17) (undo-tree-id6454 . -17) (undo-tree-id6455 . -17) (undo-tree-id6456 . -17) (undo-tree-id6457 . -17) (undo-tree-id6458 . -17) (undo-tree-id6459 . -17) (undo-tree-id6460 . -17) (undo-tree-id6461 . -17) (undo-tree-id6462 . -17) (undo-tree-id6463 . -17) (undo-tree-id6464 . -17) (undo-tree-id6465 . -17) (undo-tree-id6466 . -17) (undo-tree-id6467 . -17) (undo-tree-id6468 . -17) (undo-tree-id6469 . -17) (undo-tree-id6470 . -17) (undo-tree-id6471 . -17) (undo-tree-id6472 . -17) (undo-tree-id6473 . -17) (undo-tree-id6474 . -17) (undo-tree-id6475 . -17) (undo-tree-id6476 . -17) (undo-tree-id6477 . -17) (undo-tree-id6478 . -17) (undo-tree-id6479 . -17) (undo-tree-id6480 . -17) (undo-tree-id6481 . -17) (undo-tree-id6482 . -17) (undo-tree-id6483 . -17) (undo-tree-id6484 . -17) (undo-tree-id6485 . -17) (undo-tree-id6486 . -17) (undo-tree-id6487 . -17) (undo-tree-id6488 . -17) (undo-tree-id6489 . -17) (undo-tree-id6490 . -17) (undo-tree-id6491 . -17) (undo-tree-id6492 . -17) (undo-tree-id6493 . -17) (undo-tree-id6494 . 5) (undo-tree-id6495 . -22) (undo-tree-id6496 . -22) (undo-tree-id6497 . -22) (undo-tree-id6498 . -22) (undo-tree-id6499 . -22) (undo-tree-id6500 . -22) (undo-tree-id6501 . -22) (undo-tree-id6502 . -22) (undo-tree-id6503 . -22) (undo-tree-id6504 . -22) (undo-tree-id6505 . -22) (undo-tree-id6506 . -22) (undo-tree-id6507 . -22) (undo-tree-id6508 . -22) (undo-tree-id6509 . -22) (undo-tree-id6510 . -22) (undo-tree-id6511 . -22) (undo-tree-id6512 . -22) (undo-tree-id6513 . -22) (undo-tree-id6514 . -22) (undo-tree-id6515 . -22) (undo-tree-id6516 . -22) (undo-tree-id6517 . -22) (undo-tree-id6518 . -22) (undo-tree-id6519 . -22) (undo-tree-id6520 . -22) (undo-tree-id6521 . -22) (undo-tree-id6522 . -22) (undo-tree-id6523 . -22) (undo-tree-id6524 . -22) (undo-tree-id6525 . -22) (undo-tree-id6526 . -22) (undo-tree-id6527 . -22) (undo-tree-id6528 . -22) (undo-tree-id6529 . -22) (undo-tree-id6530 . -22) (undo-tree-id6531 . -22) (undo-tree-id6532 . -22) (undo-tree-id6533 . -22) (undo-tree-id6534 . -22) (undo-tree-id6535 . -22) (undo-tree-id6536 . -22) (undo-tree-id6537 . -22) (undo-tree-id6538 . -22) (undo-tree-id6539 . -22) (undo-tree-id6540 . -21) (undo-tree-id6541 . -21) (undo-tree-id6542 . -21) (undo-tree-id6543 . -21) (undo-tree-id6544 . -21) (undo-tree-id6545 . -21) (undo-tree-id6546 . -21) (undo-tree-id6547 . -21) (undo-tree-id6548 . -21) (undo-tree-id6549 . -21) (undo-tree-id6550 . -21) (undo-tree-id6551 . -21) (undo-tree-id6552 . -21) (undo-tree-id6553 . -21) (undo-tree-id6554 . -21) (undo-tree-id6555 . -21) (undo-tree-id6556 . -21) (undo-tree-id6557 . -21) (undo-tree-id6558 . -21) (undo-tree-id6559 . -21) (undo-tree-id6560 . -21) (undo-tree-id6561 . -21) (undo-tree-id6562 . -21) (undo-tree-id6563 . -21) (undo-tree-id6564 . -21) (undo-tree-id6565 . -21) (undo-tree-id6566 . -21) (undo-tree-id6567 . -21) (undo-tree-id6568 . -21) (undo-tree-id6569 . -21) (undo-tree-id6570 . -21) (undo-tree-id6571 . -21) (undo-tree-id6572 . -21) (undo-tree-id6573 . -21) (undo-tree-id6574 . -21) (undo-tree-id6575 . -21) (undo-tree-id6576 . -21) (undo-tree-id6577 . -21) (undo-tree-id6578 . -21)) nil (25661 29156 150091 116000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -147) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) 148 (147 . 148) (143 . 147) (#("    " 0 4 (fontified nil)) . 142) (undo-tree-id7063 . -4) (142 . 147) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 142) (142 . 146) (141 . 143) (t 25661 29156 164244 353000)) nil (25661 29189 866429 879000) 0 nil])
([nil nil ((187 . 202) (#("r" 0 1 (fontified t face font-lock-string-face)) . -187) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -188) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -189) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -190) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) 191 (180 . 191) (#(" " 0 1 (fontified t face font-lock-string-face)) . -180) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) 181 (162 . 181) (#("," 0 1 (fontified t face font-lock-string-face)) . -162) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -163) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -164) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -165) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) 166 (162 . 166) (#(" " 0 1 (fontified t face font-lock-string-face)) . -162) (undo-tree-id7019 . -1) 163 (157 . 163) (156 . 158) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -156) (156 . 157) (apply yas--snippet-revive 147 157 #s(yas--snippet nil nil #s(yas--exit 156 nil) 160 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 156 nil) 160 nil nil nil nil)) (147 . 157) (#("println!($0)" 0 12 (fontified nil)) . 147) (147 . 159) (#("pr" 0 2 (fontified nil)) . 147) (147 . 149) (#("println!(…)" 0 11 (fontified nil)) . -147) (147 . 158) (#("pr" 0 2 (fontified t)) . -147) (undo-tree-id7020 . -2) (undo-tree-id7021 . -2) 149 (147 . 149) (143 . 147) (#("    " 0 4 (fontified nil)) . 142) (undo-tree-id7022 . -4) (146 . 147) (142 . 146)) nil (25661 29189 866386 712000) 0 nil])
([nil nil ((204 . 205)) nil (25661 29189 866368 989000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -207) (undo-tree-id6893 . -4) (undo-tree-id6894 . -4) (undo-tree-id6895 . -4) (undo-tree-id6896 . -4) (undo-tree-id6897 . -4) (undo-tree-id6898 . -4) (undo-tree-id6899 . -4) (undo-tree-id6900 . -4) (undo-tree-id6901 . -4) (undo-tree-id6902 . -4) (undo-tree-id6903 . -4) (undo-tree-id6904 . -4) (undo-tree-id6905 . -4) (undo-tree-id6906 . -4) (undo-tree-id6907 . -4) (undo-tree-id6908 . -4) (undo-tree-id6909 . -4) (undo-tree-id6910 . -4) (undo-tree-id6911 . -4) (undo-tree-id6912 . -4) (undo-tree-id6913 . -4) (undo-tree-id6914 . -4) (undo-tree-id6915 . -4) (undo-tree-id6916 . -4) (undo-tree-id6917 . -4) (undo-tree-id6918 . -4) (undo-tree-id6919 . -4) (undo-tree-id6920 . -4) (undo-tree-id6921 . -4) (undo-tree-id6922 . -4) (undo-tree-id6923 . -4) (undo-tree-id6924 . -4) (undo-tree-id6925 . -4) (undo-tree-id6926 . -4) (undo-tree-id6927 . -4) (undo-tree-id6928 . -4) (undo-tree-id6929 . -4) (undo-tree-id6930 . -4) (undo-tree-id6931 . -4) (undo-tree-id6932 . -4) (undo-tree-id6933 . -4) (undo-tree-id6934 . -4) (undo-tree-id6935 . -4) (undo-tree-id6936 . -4) (undo-tree-id6937 . -4) (undo-tree-id6938 . -4) (undo-tree-id6939 . -4) (undo-tree-id6940 . -4) (undo-tree-id6941 . -4) (undo-tree-id6942 . -4) (undo-tree-id6943 . -4) (undo-tree-id6944 . -4) (undo-tree-id6945 . -4) (undo-tree-id6946 . -4) (undo-tree-id6947 . -4) (undo-tree-id6948 . -4) (undo-tree-id6949 . -4) (undo-tree-id6950 . -4) (undo-tree-id6951 . -4) (undo-tree-id6952 . -4) (undo-tree-id6953 . -4) (undo-tree-id6954 . -4) (undo-tree-id6955 . -4) (undo-tree-id6956 . -4) (undo-tree-id6957 . -4) (undo-tree-id6958 . -4) (undo-tree-id6959 . -4) (undo-tree-id6960 . -4) (undo-tree-id6961 . -4) (undo-tree-id6962 . -4) (undo-tree-id6963 . -4) (undo-tree-id6964 . -4) (undo-tree-id6965 . -4) (undo-tree-id6966 . -4) (undo-tree-id6967 . -4) (undo-tree-id6968 . -4) (undo-tree-id6969 . -4) (undo-tree-id6970 . -4) (undo-tree-id6971 . -4) (undo-tree-id6972 . -4) (undo-tree-id6973 . -4) (undo-tree-id6974 . -4) (undo-tree-id6975 . -4) 211 (207 . 211) (#("    " 0 4 (fontified nil)) . 206) (undo-tree-id6976 . -4) (undo-tree-id6977 . -4) (undo-tree-id6978 . -4) (undo-tree-id6979 . -4) (undo-tree-id6980 . -4) (undo-tree-id6981 . -4) (undo-tree-id6982 . -4) (undo-tree-id6983 . -4) (undo-tree-id6984 . -4) (undo-tree-id6985 . -4) (undo-tree-id6986 . -4) (undo-tree-id6987 . -4) (undo-tree-id6988 . -4) (undo-tree-id6989 . -4) (undo-tree-id6990 . -4) (undo-tree-id6991 . -4) (undo-tree-id6992 . -4) (undo-tree-id6993 . -4) (undo-tree-id6994 . -4) (undo-tree-id6995 . -4) (undo-tree-id6996 . -4) (undo-tree-id6997 . -4) (undo-tree-id6998 . -4) (undo-tree-id6999 . -4) (205 . 211)) nil (25661 29189 866364 912000) 0 nil])
([nil nil ((142 . 204) (#("
    println!(\"hello, enter 0 to train, 1 to see predictions\");


    " 0 1 (fontified t) 1 5 (fontified t) 5 13 (fontified t face rust-builtin-formatting-macro) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 61 (fontified t face font-lock-string-face) 61 62 (fontified t face (rainbow-delimiters-depth-2-face)) 62 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 70 (fontified t)) . 142) (undo-tree-id6624 . 5) (undo-tree-id6625 . -70) (undo-tree-id6626 . -70) (undo-tree-id6627 . -70) (undo-tree-id6628 . -70) (undo-tree-id6629 . -70) (undo-tree-id6630 . -70) (undo-tree-id6631 . -70) (undo-tree-id6632 . -70) (undo-tree-id6633 . -70) (undo-tree-id6634 . -70) (undo-tree-id6635 . -70) (undo-tree-id6636 . -70) (undo-tree-id6637 . -70) (undo-tree-id6638 . -70) (undo-tree-id6639 . -70) (undo-tree-id6640 . -70) (undo-tree-id6641 . -70) (undo-tree-id6642 . -70) (undo-tree-id6643 . -70) (undo-tree-id6644 . -70) (undo-tree-id6645 . -70) (undo-tree-id6646 . -70) (undo-tree-id6647 . -70) (undo-tree-id6648 . -70) (undo-tree-id6649 . -70) (undo-tree-id6650 . -70) (undo-tree-id6651 . -70) (undo-tree-id6652 . -70) (undo-tree-id6653 . -70) (undo-tree-id6654 . -70) (undo-tree-id6655 . -70) (undo-tree-id6656 . -70) (undo-tree-id6657 . -70) (undo-tree-id6658 . -70) (undo-tree-id6659 . -70) (undo-tree-id6660 . -70) (undo-tree-id6661 . -70) (undo-tree-id6662 . -20) (undo-tree-id6663 . 10) (undo-tree-id6664 . -64) (undo-tree-id6665 . -64) (undo-tree-id6666 . -64) (undo-tree-id6667 . -64) (undo-tree-id6668 . -64) (undo-tree-id6669 . -64) (undo-tree-id6670 . -64) (undo-tree-id6671 . -64) (undo-tree-id6672 . -64) (undo-tree-id6673 . -64) (undo-tree-id6674 . -64) (undo-tree-id6675 . -64) (undo-tree-id6676 . -64) (undo-tree-id6677 . -64) (undo-tree-id6678 . -64) (undo-tree-id6679 . -64) (undo-tree-id6680 . -64) (undo-tree-id6681 . -64) (undo-tree-id6682 . -64) (undo-tree-id6683 . -64) (undo-tree-id6684 . -64) (undo-tree-id6685 . -64) (undo-tree-id6686 . 6) (undo-tree-id6687 . -65) (undo-tree-id6688 . -65) (undo-tree-id6689 . -65) (undo-tree-id6690 . -65) (undo-tree-id6691 . -65) (undo-tree-id6692 . -65) (undo-tree-id6693 . -65) (undo-tree-id6694 . -65) (undo-tree-id6695 . -65) (undo-tree-id6696 . -65) (undo-tree-id6697 . -65) (undo-tree-id6698 . -65) (undo-tree-id6699 . -65) (undo-tree-id6700 . -65) (undo-tree-id6701 . -65) (undo-tree-id6702 . -65) (undo-tree-id6703 . -65) (undo-tree-id6704 . -65) (undo-tree-id6705 . -65) (undo-tree-id6706 . -65) (undo-tree-id6707 . -65) (undo-tree-id6708 . -65) (undo-tree-id6709 . -65) (undo-tree-id6710 . -65) (undo-tree-id6711 . -65) (undo-tree-id6712 . -65) (undo-tree-id6713 . -65) (undo-tree-id6714 . -65) (undo-tree-id6715 . -65) (undo-tree-id6716 . -65) (undo-tree-id6717 . -65) (undo-tree-id6718 . -65) (undo-tree-id6719 . -65) (undo-tree-id6720 . -65) (undo-tree-id6721 . -65) (undo-tree-id6722 . -65) (undo-tree-id6723 . -65) (undo-tree-id6724 . -65) (undo-tree-id6725 . -65) (undo-tree-id6726 . -65) (undo-tree-id6727 . -65) (undo-tree-id6728 . -65) (undo-tree-id6729 . -65) (undo-tree-id6730 . -65) (undo-tree-id6731 . -65) (undo-tree-id6732 . -65) (undo-tree-id6733 . -65) (undo-tree-id6734 . -65) (undo-tree-id6735 . -65) (undo-tree-id6736 . -65) (undo-tree-id6737 . -65) (undo-tree-id6738 . -65) (undo-tree-id6739 . -65) (undo-tree-id6740 . -65) (undo-tree-id6741 . -65) (undo-tree-id6742 . -65) (undo-tree-id6743 . -65) (undo-tree-id6744 . -65) (undo-tree-id6745 . -65) (undo-tree-id6746 . -65) (undo-tree-id6747 . -65) (undo-tree-id6748 . -65) (undo-tree-id6749 . -65) (undo-tree-id6750 . -65) (undo-tree-id6751 . -65) (undo-tree-id6752 . -65) (undo-tree-id6753 . -65) (undo-tree-id6754 . -65) (undo-tree-id6755 . -65) (undo-tree-id6756 . -65) (undo-tree-id6757 . -65) (undo-tree-id6758 . -65) (undo-tree-id6759 . -65) (undo-tree-id6760 . -65) (undo-tree-id6761 . -65) (undo-tree-id6762 . -65) (undo-tree-id6763 . -65) (undo-tree-id6764 . -65) (undo-tree-id6765 . -65) (undo-tree-id6766 . -65) (undo-tree-id6767 . -65) (undo-tree-id6768 . -65) (undo-tree-id6769 . -65) (undo-tree-id6770 . -65) (undo-tree-id6771 . -65) (undo-tree-id6772 . -65) (undo-tree-id6773 . -65) (undo-tree-id6774 . -65) (undo-tree-id6775 . -65) (undo-tree-id6776 . -65) (undo-tree-id6777 . -65) (undo-tree-id6778 . -65) (undo-tree-id6779 . -65) (undo-tree-id6780 . -65) (undo-tree-id6781 . -65) (undo-tree-id6782 . -65) (undo-tree-id6783 . -65) (undo-tree-id6784 . -65) (undo-tree-id6785 . -65) (undo-tree-id6786 . -65) (undo-tree-id6787 . -65) (undo-tree-id6788 . -65) (undo-tree-id6789 . -65) (undo-tree-id6790 . -65) (undo-tree-id6791 . -65) (undo-tree-id6792 . -65) (undo-tree-id6793 . -65) (undo-tree-id6794 . -65) (undo-tree-id6795 . -65) (undo-tree-id6796 . -65) (undo-tree-id6797 . -65) (undo-tree-id6798 . -65) (undo-tree-id6799 . -65) (undo-tree-id6800 . -65) (undo-tree-id6801 . -65) (undo-tree-id6802 . -65) (undo-tree-id6803 . -65) (undo-tree-id6804 . -65) (undo-tree-id6805 . -65) (undo-tree-id6806 . -65) (undo-tree-id6807 . -65) (undo-tree-id6808 . -65) (undo-tree-id6809 . -65) (undo-tree-id6810 . -65) (undo-tree-id6811 . -65) (undo-tree-id6812 . -65) (undo-tree-id6813 . -65) (undo-tree-id6814 . -65) (undo-tree-id6815 . -65) (undo-tree-id6816 . -65) (undo-tree-id6817 . -65) (undo-tree-id6818 . -65) (undo-tree-id6819 . -65) (undo-tree-id6820 . -65) (undo-tree-id6821 . -65) (undo-tree-id6822 . -65) (undo-tree-id6823 . -65) (undo-tree-id6824 . -65) (undo-tree-id6825 . -65) (undo-tree-id6826 . -65) (undo-tree-id6827 . -65) (undo-tree-id6828 . -65) (undo-tree-id6829 . -65) (undo-tree-id6830 . -65) (undo-tree-id6831 . -65) (undo-tree-id6832 . -65) (undo-tree-id6833 . -65) (undo-tree-id6834 . -65) (undo-tree-id6835 . -65) (undo-tree-id6836 . -65) (undo-tree-id6837 . -65) (undo-tree-id6838 . -65) (undo-tree-id6839 . -65) (undo-tree-id6840 . -65) (undo-tree-id6841 . -65) (undo-tree-id6842 . -65) (undo-tree-id6843 . -65) (undo-tree-id6844 . -65) (undo-tree-id6845 . -65) (undo-tree-id6846 . -65) (undo-tree-id6847 . -65) (undo-tree-id6848 . -65) (undo-tree-id6849 . -65) (undo-tree-id6850 . -65) (undo-tree-id6851 . -65) (undo-tree-id6852 . -65) (undo-tree-id6853 . -65) (undo-tree-id6854 . -65) (undo-tree-id6855 . -65) (undo-tree-id6856 . -65) (undo-tree-id6857 . -65) (undo-tree-id6858 . -65) (undo-tree-id6859 . -65) (undo-tree-id6860 . -65) (undo-tree-id6861 . -65) (undo-tree-id6862 . -65) (undo-tree-id6863 . -65) (undo-tree-id6864 . -65) (undo-tree-id6865 . -65) (undo-tree-id6866 . -65) (undo-tree-id6867 . -65) (undo-tree-id6868 . -65) (undo-tree-id6869 . -65) (undo-tree-id6870 . -65) (undo-tree-id6871 . -65) (undo-tree-id6872 . -65) (undo-tree-id6873 . -65) (undo-tree-id6874 . -65) (undo-tree-id6875 . -65) (undo-tree-id6876 . -65) (undo-tree-id6877 . -65) (undo-tree-id6878 . -65) (undo-tree-id6879 . -65) (undo-tree-id6880 . -65) (undo-tree-id6881 . -65) (undo-tree-id6882 . -65) (undo-tree-id6883 . -65) (undo-tree-id6884 . -65) (undo-tree-id6885 . -65) (undo-tree-id6886 . -65) (undo-tree-id6887 . -65) (undo-tree-id6888 . -65) (undo-tree-id6889 . -65) (undo-tree-id6890 . -65) (undo-tree-id6891 . -65) (undo-tree-id6892 . -65)) nil (25661 29189 866294 264000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -210) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) 211 (210 . 211) (#("i" 0 1 (fontified t)) . -210) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -211) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (#("p" 0 1 (fontified t)) . -212) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) 213 (210 . 213) (#("i" 0 1 (fontified t)) . -210) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -211) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) 212 (210 . 212) (#("p" 0 1 (fontified t)) . -210) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (#("r" 0 1 (fontified t)) . -211) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) 212 (210 . 212) (#("p" 0 1 (fontified t)) . -210) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (#("r" 0 1 (fontified t)) . -211) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) 212 (211 . 212) (210 . 211) (206 . 210) (#("    " 0 4 (fontified nil)) . 205) (undo-tree-id7111 . -4) (204 . 210) (t 25661 29189 877929 146000)) nil (25661 29300 192132 701000) 0 nil])
([nil nil ((206 . 210) (#("    " 0 4 (fontified nil)) . 205) (undo-tree-id7090 . -4) (209 . 210) (205 . 209)) nil (25661 29300 192117 962000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 206) (undo-tree-id7087 . 1) (undo-tree-id7088 . -4) (undo-tree-id7089 . -3) 209) nil (25661 29300 192115 749000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 206) (undo-tree-id7082 . 5) (undo-tree-id7083 . -4) (undo-tree-id7084 . -4) (undo-tree-id7085 . -3) (undo-tree-id7086 . 1) 209) nil (25661 29300 192112 985000) 0 nil])
([nil nil ((206 . 210) (#("    " 0 4 (fontified nil)) . 205) (undo-tree-id7081 . -4) (209 . 210) (205 . 209)) nil (25661 29300 192109 236000) 0 nil])
([nil nil ((nil rear-nonsticky nil 240 . 241) (nil fontified nil 205 . 241) (205 . 241)) nil (25661 29300 192107 327000) 0 nil])
([nil nil ((277 . 282) (#("in" 0 2 (fontified nil)) . 277) (undo-tree-id7064 . -2) (277 . 279) (#("input" 0 5 (fontified nil)) . -277) (undo-tree-id7065 . -5) (277 . 282) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -277) (undo-tree-id7066 . -2) (undo-tree-id7067 . -2) (undo-tree-id7068 . -2) 279 (273 . 279) (#("buf" 0 3 (fontified nil)) . 273) (undo-tree-id7069 . -3) (272 . 273) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil))) #s(yas--exit 283 nil) 162 nil #s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil)) nil nil)) (262 . 276) (#("read_line(${1:buf})$0" 0 21 (fontified nil)) . 262) (262 . 283) (#("re" 0 2 (fontified nil)) . 262) (262 . 264) (#("read_line(…)" 0 12 (fontified nil)) . -262) (262 . 274) (#("re" 0 2 (fontified t)) . -262) (undo-tree-id7070 . -2) (undo-tree-id7071 . -2) 264 (261 . 264) (apply yas--snippet-revive 254 261 #s(yas--snippet nil nil #s(yas--exit 261 nil) 161 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 261 nil) 161 nil nil nil nil)) (254 . 261) (#("stdin()$0" 0 9 (fontified nil)) . 254) (254 . 263) (#("st" 0 2 (fontified nil)) . 254) (254 . 256) (#("stdin()" 0 7 (fontified nil)) . -254) (254 . 261) (#("st" 0 2 (fontified t)) . -254) (undo-tree-id7072 . -2) (undo-tree-id7073 . -2) 256 (252 . 256) (250 . 252) (#("io" 0 2 (fontified nil)) . 250) (250 . 252) (#("io" 0 2 (fontified t)) . -250) (undo-tree-id7074 . -2) (undo-tree-id7075 . -2) 252 (248 . 252) (245 . 248) (#("st" 0 2 (fontified nil)) . 245) (245 . 247) (#("std" 0 3 (fontified nil)) . -245) (245 . 248) (#("st" 0 2 (fontified t)) . -245) (undo-tree-id7076 . -2) (undo-tree-id7077 . -2) 247 (245 . 247) (#("i" 0 1 (fontified t)) . -245) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) 246 (245 . 246) (241 . 245) (#("    " 0 4 (fontified nil)) . 240) (undo-tree-id7080 . -4) (244 . 245) (240 . 244)) nil (25661 29300 195013 558000) 0 nil])
([nil nil ((292 . 310) (291 . 293) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -291) (undo-tree-id7665 . -1) (#("msg" 0 3 (fontified nil)) . 292) (undo-tree-id7666 . -3) (291 . 292) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 291 311 nil nil nil t #s(yas--exit 312 nil))) #s(yas--exit 312 nil) 163 nil #s(yas--field 1 291 311 nil nil nil t #s(yas--exit 312 nil)) nil nil)) (284 . 295) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 284) (284 . 302) (#("ex" 0 2 (fontified nil)) . 284) (284 . 286) (#("expect(…)" 0 9 (fontified nil)) . -284) (284 . 293) (#("ex" 0 2 (fontified t)) . -284) (undo-tree-id7667 . -2) (undo-tree-id7668 . -2) 286 (283 . 286) (apply yas--snippet-revive 262 283 #s(yas--snippet nil (#s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil))) #s(yas--exit 283 nil) 162 nil #s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil)) nil nil))) nil (25661 29314 360738 209000) 0 nil] [nil nil ((317 . 322) (#("in" 0 2 (fontified nil)) . 317) (317 . 319) (#("input" 0 5 (fontified nil)) . 317) (317 . 322) (#("in" 0 2 (fontified nil)) . 317) (312 . 319) (302 . 316) (#("read_line(${1:buf})$0" 0 21 (fontified nil)) . 302) (302 . 323) (#("re" 0 2 (fontified nil)) . 302) (302 . 304) (#("read_line(…)" 0 12 (fontified nil)) . 302) (302 . 314) (#("re" 0 2 (fontified nil)) . 302) (301 . 304) (294 . 301) (#("stdin()$0" 0 9 (fontified nil)) . 294) (294 . 303) (#("st" 0 2 (fontified nil)) . 294) (294 . 296) (#("stdin()" 0 7 (fontified nil)) . 294) (294 . 301) (#("st" 0 2 (fontified nil)) . 294) (292 . 296) (290 . 292) (#("io" 0 2 (fontified nil)) . 290) (290 . 292) (#("io" 0 2 (fontified nil)) . 290) (288 . 292) (285 . 288) (#("st" 0 2 (fontified nil)) . 285) (285 . 287) (#("std" 0 3 (fontified nil)) . 285) (285 . 288) (#("st" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 285) (285 . 287) (#("i" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -285) 286 (285 . 286) (283 . 285) (apply yas--snippet-revive 262 283 #s(yas--snippet nil (#s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil))) #s(yas--exit 283 nil) 162 nil #s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil))) #s(yas--exit 283 nil) 162 nil #s(yas--field 1 272 282 nil nil nil t #s(yas--exit 283 nil)) nil nil)) (#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 283) (undo-tree-id7112 . -2) (undo-tree-id7113 . -2) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -2) (#("i" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 285) (285 . 286) (#("st" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 285) (285 . 287) (#("std" 0 3 (fontified nil)) . 285) (285 . 288) (#("st" 0 2 (fontified nil)) . 285) (285 . 287) (#("std" 0 3 (fontified nil face font-lock-constant-face)) . 285) (undo-tree-id7117 . -3) (undo-tree-id7118 . -3) (undo-tree-id7119 . -3) (#("::io" 0 2 (fontified nil) 2 4 (fontified nil)) . 288) (undo-tree-id7120 . -2) (undo-tree-id7121 . -2) (undo-tree-id7122 . -2) (290 . 292) (#("io" 0 2 (fontified nil)) . 290) (290 . 292) (#("io" 0 2 (fontified nil face font-lock-constant-face)) . 290) (undo-tree-id7123 . -2) (undo-tree-id7124 . -2) (undo-tree-id7125 . -2) (#("::st" 0 2 (fontified nil) 2 4 (fontified nil)) . 292) (undo-tree-id7126 . -2) (undo-tree-id7127 . -2) (undo-tree-id7128 . -2) (294 . 296) (#("stdin()" 0 7 (fontified nil)) . 294) (294 . 301) (#("st" 0 2 (fontified nil)) . 294) (294 . 296) (#("stdin()$0" 0 9 (fontified nil)) . 294) (294 . 303) (#("stdin()" 0 5 (fontified nil) 5 6 (fontified nil face (rainbow-delimiters-depth-2-face)) 6 7 (fontified nil face (rainbow-delimiters-depth-2-face))) . 294) (undo-tree-id7129 . -7) (undo-tree-id7130 . -7) (undo-tree-id7131 . -7) (#(".re" 0 1 (fontified nil) 1 3 (fontified nil)) . 301) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (302 . 304) (#("read_line(…)" 0 12 (fontified nil)) . 302) (302 . 314) (#("re" 0 2 (fontified nil)) . 302) (302 . 304) (#("read_line(${1:buf})$0" 0 21 (fontified nil)) . 302) (302 . 323) (#("read_line(buf)" 0 9 (fontified nil) 9 10 (fontified nil face (rainbow-delimiters-depth-2-face)) 10 13 (fontified nil) 13 14 (fontified nil face (rainbow-delimiters-depth-2-face))) . 302) (undo-tree-id7135 . 4) (undo-tree-id7136 . -10) (undo-tree-id7137 . -10) (undo-tree-id7138 . -10) (#("&mut in" 0 1 (fontified nil face rust-ampersand-face) 1 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil) 5 7 (fontified nil)) . 312) (undo-tree-id7139 . -5) (undo-tree-id7140 . -5) (undo-tree-id7141 . -5) (317 . 319) (#("input" 0 5 (fontified nil)) . 317) (317 . 322) (#("in" 0 2 (fontified nil)) . 317) (317 . 319) (#("input" 0 5 (fontified t)) . 317) (undo-tree-id7142 . -4) (undo-tree-id7143 . -4) (undo-tree-id7144 . -4)) (25661 29300 192066 626000) 0 nil])
([nil nil ((312 . 313) (apply yas--snippet-revive 284 312 #s(yas--snippet nil (#s(yas--field 1 291 311 nil nil nil t #s(yas--exit 312 nil))) #s(yas--exit 312 nil) 163 nil #s(yas--field 1 291 311 nil nil nil t #s(yas--exit 312 nil)) nil nil))) nil (25661 29314 360732 842000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -315) (undo-tree-id7564 . -4) (undo-tree-id7565 . -4) (undo-tree-id7566 . -4) (undo-tree-id7567 . -4) (undo-tree-id7568 . -4) (undo-tree-id7569 . -4) (undo-tree-id7570 . -4) (undo-tree-id7571 . -4) (undo-tree-id7572 . -4) (undo-tree-id7573 . -4) (undo-tree-id7574 . -4) (undo-tree-id7575 . -4) (undo-tree-id7576 . -4) (undo-tree-id7577 . -4) (undo-tree-id7578 . -4) (undo-tree-id7579 . -4) (undo-tree-id7580 . -4) (undo-tree-id7581 . -4) (undo-tree-id7582 . -4) (undo-tree-id7583 . -4) (undo-tree-id7584 . -4) (undo-tree-id7585 . -4) (undo-tree-id7586 . -4) (undo-tree-id7587 . -4) (undo-tree-id7588 . -4) (undo-tree-id7589 . -4) (undo-tree-id7590 . -4) (undo-tree-id7591 . -4) (undo-tree-id7592 . -4) (undo-tree-id7593 . -4) (undo-tree-id7594 . -4) (undo-tree-id7595 . -4) (undo-tree-id7596 . -4) (undo-tree-id7597 . -4) (undo-tree-id7598 . -4) (undo-tree-id7599 . -4) (undo-tree-id7600 . -4) (undo-tree-id7601 . -4) (undo-tree-id7602 . -4) (undo-tree-id7603 . -4) (undo-tree-id7604 . -4) (undo-tree-id7605 . -4) (undo-tree-id7606 . -4) (undo-tree-id7607 . -4) (undo-tree-id7608 . -4) (undo-tree-id7609 . -4) (undo-tree-id7610 . -4) (undo-tree-id7611 . -4) (undo-tree-id7612 . -4) (undo-tree-id7613 . -4) (undo-tree-id7614 . -4) (undo-tree-id7615 . -4) (undo-tree-id7616 . -4) (undo-tree-id7617 . -4) (undo-tree-id7618 . -4) (undo-tree-id7619 . -4) (undo-tree-id7620 . -4) (undo-tree-id7621 . -4) (undo-tree-id7622 . -4) (undo-tree-id7623 . -4) (undo-tree-id7624 . -4) (undo-tree-id7625 . -4) (undo-tree-id7626 . -4) (undo-tree-id7627 . -4) (undo-tree-id7628 . -4) (undo-tree-id7629 . -4) (undo-tree-id7630 . -4) (undo-tree-id7631 . -4) (undo-tree-id7632 . -4) 319 (315 . 319) (#("    " 0 4 (fontified nil)) . 314) (undo-tree-id7633 . -4) (undo-tree-id7634 . -4) (undo-tree-id7635 . -4) (undo-tree-id7636 . -4) (undo-tree-id7637 . -4) (undo-tree-id7638 . -4) (undo-tree-id7639 . -4) (undo-tree-id7640 . -4) (undo-tree-id7641 . -4) (undo-tree-id7642 . -4) (undo-tree-id7643 . -4) (undo-tree-id7644 . -4) (undo-tree-id7645 . -4) (undo-tree-id7646 . -4) (undo-tree-id7647 . -4) (undo-tree-id7648 . -4) (undo-tree-id7649 . -4) (undo-tree-id7650 . -4) (undo-tree-id7651 . -4) (undo-tree-id7652 . -4) (undo-tree-id7653 . -4) (undo-tree-id7654 . -4) (undo-tree-id7655 . -4) (undo-tree-id7656 . -4) (undo-tree-id7657 . -4) (undo-tree-id7658 . -4) (undo-tree-id7659 . -4) (undo-tree-id7660 . -4) (undo-tree-id7661 . -4) (undo-tree-id7662 . -4) (undo-tree-id7663 . -4) (undo-tree-id7664 . -4) (313 . 319)) nil (25661 29314 360728 290000) 0 nil])
([nil nil ((315 . 319)) nil (25661 29314 360675 553000) 0 nil])
([nil nil ((261 . 331) (#(".read_line(&mut input).expect(\"couldn't read line\");

    

    " 0 1 (fontified t) 1 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t face rust-ampersand-face) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t) 23 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-2-face)) 30 50 (fontified t face font-lock-string-face) 50 51 (fontified t face (rainbow-delimiters-depth-2-face)) 51 53 (fontified t) 53 54 (fontified t) 54 58 (fontified t) 58 59 (rear-nonsticky t fontified t) 59 60 (fontified t) 60 64 (fontified t)) . 261) (undo-tree-id7145 . 6) (undo-tree-id7146 . -30) (undo-tree-id7147 . 15) (undo-tree-id7148 . -53) (undo-tree-id7149 . -53) (undo-tree-id7150 . -53) (undo-tree-id7151 . -53) (undo-tree-id7152 . -53) (undo-tree-id7153 . -53) (undo-tree-id7154 . -53) (undo-tree-id7155 . -53) (undo-tree-id7156 . -53) (undo-tree-id7157 . -53) (undo-tree-id7158 . -53) (undo-tree-id7159 . -53) (undo-tree-id7160 . -53) (undo-tree-id7161 . -53) (undo-tree-id7162 . -53) (undo-tree-id7163 . -53) (undo-tree-id7164 . -53) (undo-tree-id7165 . -53) (undo-tree-id7166 . -53) (undo-tree-id7167 . -53) (undo-tree-id7168 . -53) (undo-tree-id7169 . -53) (undo-tree-id7170 . -53) (undo-tree-id7171 . -53) (undo-tree-id7172 . -53) (undo-tree-id7173 . -53) (undo-tree-id7174 . -53) (undo-tree-id7175 . -53) (undo-tree-id7176 . -53) (undo-tree-id7177 . -53) (undo-tree-id7178 . 11) (undo-tree-id7179 . -54) (undo-tree-id7180 . -54) (undo-tree-id7181 . -54) (undo-tree-id7182 . -54) (undo-tree-id7183 . -54) (undo-tree-id7184 . -54) (undo-tree-id7185 . -54) (undo-tree-id7186 . -54) (undo-tree-id7187 . -54) (undo-tree-id7188 . -54) (undo-tree-id7189 . -54) (undo-tree-id7190 . -54) (undo-tree-id7191 . -54) (undo-tree-id7192 . -54) (undo-tree-id7193 . -54) (undo-tree-id7194 . -54) (undo-tree-id7195 . -54) (undo-tree-id7196 . -54) (undo-tree-id7197 . -54) (undo-tree-id7198 . -54) (undo-tree-id7199 . -54) (undo-tree-id7200 . -54) (undo-tree-id7201 . -54) (undo-tree-id7202 . -54) (undo-tree-id7203 . -54) (undo-tree-id7204 . -54) (undo-tree-id7205 . -54) (undo-tree-id7206 . -54) (undo-tree-id7207 . -54) (undo-tree-id7208 . -54) (undo-tree-id7209 . -54) (undo-tree-id7210 . -54) (undo-tree-id7211 . -54) (undo-tree-id7212 . -54) (undo-tree-id7213 . -54) (undo-tree-id7214 . -54) (undo-tree-id7215 . -54) (undo-tree-id7216 . -54) (undo-tree-id7217 . -54) (undo-tree-id7218 . -54) (undo-tree-id7219 . -54) (undo-tree-id7220 . -54) (undo-tree-id7221 . -54) (undo-tree-id7222 . -54) (undo-tree-id7223 . -54) (undo-tree-id7224 . -54) (undo-tree-id7225 . -54) (undo-tree-id7226 . -54) (undo-tree-id7227 . -54) (undo-tree-id7228 . -54) (undo-tree-id7229 . -54) (undo-tree-id7230 . -54) (undo-tree-id7231 . -54) (undo-tree-id7232 . -54) (undo-tree-id7233 . -54) (undo-tree-id7234 . -54) (undo-tree-id7235 . -54) (undo-tree-id7236 . -54) (undo-tree-id7237 . -54) (undo-tree-id7238 . -54) (undo-tree-id7239 . -54) (undo-tree-id7240 . -54) (undo-tree-id7241 . -54) (undo-tree-id7242 . -54) (undo-tree-id7243 . -54) (undo-tree-id7244 . -54) (undo-tree-id7245 . -54) (undo-tree-id7246 . -54) (undo-tree-id7247 . -54) (undo-tree-id7248 . -54) (undo-tree-id7249 . -54) (undo-tree-id7250 . -54) (undo-tree-id7251 . -54) (undo-tree-id7252 . -54) (undo-tree-id7253 . -54) (undo-tree-id7254 . -54) (undo-tree-id7255 . -54) (undo-tree-id7256 . -54) (undo-tree-id7257 . -54) (undo-tree-id7258 . -54) (undo-tree-id7259 . -54) (undo-tree-id7260 . -54) (undo-tree-id7261 . -54) (undo-tree-id7262 . -54) (undo-tree-id7263 . -54) (undo-tree-id7264 . -54) (undo-tree-id7265 . -54) (undo-tree-id7266 . -54) (undo-tree-id7267 . -54) (undo-tree-id7268 . -54) (undo-tree-id7269 . -54) (undo-tree-id7270 . -54) (undo-tree-id7271 . -54) (undo-tree-id7272 . -54) (undo-tree-id7273 . -54) (undo-tree-id7274 . -54) (undo-tree-id7275 . -54) (undo-tree-id7276 . -54) (undo-tree-id7277 . -54) (undo-tree-id7278 . -54) (undo-tree-id7279 . -54) (undo-tree-id7280 . -54) (undo-tree-id7281 . -54) (undo-tree-id7282 . -54) (undo-tree-id7283 . -54) (undo-tree-id7284 . -54) (undo-tree-id7285 . -54) (undo-tree-id7286 . -54) (undo-tree-id7287 . -54) (undo-tree-id7288 . -54) (undo-tree-id7289 . -54) (undo-tree-id7290 . -54) (undo-tree-id7291 . -54) (undo-tree-id7292 . -54) (undo-tree-id7293 . -53) (undo-tree-id7294 . -53) (undo-tree-id7295 . -53) (undo-tree-id7296 . -53) (undo-tree-id7297 . -53) (undo-tree-id7298 . -53) (undo-tree-id7299 . -53) (undo-tree-id7300 . -53) (undo-tree-id7301 . -53) (undo-tree-id7302 . -53) (undo-tree-id7303 . -53) (undo-tree-id7304 . -53) (undo-tree-id7305 . -53) (undo-tree-id7306 . -53) (undo-tree-id7307 . -53) (undo-tree-id7308 . -53) (undo-tree-id7309 . -53) (undo-tree-id7310 . -53) (undo-tree-id7311 . -53) (undo-tree-id7312 . -53) (undo-tree-id7313 . -53) (undo-tree-id7314 . -53) (undo-tree-id7315 . -53) (undo-tree-id7316 . -53) (undo-tree-id7317 . -53) (undo-tree-id7318 . -53) (undo-tree-id7319 . -53) (undo-tree-id7320 . -53) (undo-tree-id7321 . -53) (undo-tree-id7322 . -53) (undo-tree-id7323 . -53) (undo-tree-id7324 . -53) (undo-tree-id7325 . -53) (undo-tree-id7326 . -53) (undo-tree-id7327 . -53) (undo-tree-id7328 . -53) (undo-tree-id7329 . -53) (undo-tree-id7330 . -53) (undo-tree-id7331 . -53) (undo-tree-id7332 . -53) (undo-tree-id7333 . -53) (undo-tree-id7334 . -53) (undo-tree-id7335 . -53) (undo-tree-id7336 . -54) (undo-tree-id7337 . -54) (undo-tree-id7338 . -54) (undo-tree-id7339 . -54) (undo-tree-id7340 . -54) (undo-tree-id7341 . -54) (undo-tree-id7342 . -54) (undo-tree-id7343 . -54) (undo-tree-id7344 . -54) (undo-tree-id7345 . -54) (undo-tree-id7346 . -54) (undo-tree-id7347 . -54) (undo-tree-id7348 . -54) (undo-tree-id7349 . -54) (undo-tree-id7350 . -54) (undo-tree-id7351 . -54) (undo-tree-id7352 . -54) (undo-tree-id7353 . -54) (undo-tree-id7354 . -54) (undo-tree-id7355 . -54) (undo-tree-id7356 . -54) (undo-tree-id7357 . -54) (undo-tree-id7358 . -54) (undo-tree-id7359 . -54) (undo-tree-id7360 . -54) (undo-tree-id7361 . -54) (undo-tree-id7362 . -54) (undo-tree-id7363 . -54) (undo-tree-id7364 . -54) (undo-tree-id7365 . -54) (undo-tree-id7366 . -54) (undo-tree-id7367 . -54) (undo-tree-id7368 . -54) (undo-tree-id7369 . -54) (undo-tree-id7370 . -54) (undo-tree-id7371 . -54) (undo-tree-id7372 . -54) (undo-tree-id7373 . -54) (undo-tree-id7374 . -54) (undo-tree-id7375 . -54) (undo-tree-id7376 . -54) (undo-tree-id7377 . -54) (undo-tree-id7378 . -54) (undo-tree-id7379 . -54) (undo-tree-id7380 . -54) (undo-tree-id7381 . -54) (undo-tree-id7382 . -54) (undo-tree-id7383 . -54) (undo-tree-id7384 . -54) (undo-tree-id7385 . -54) (undo-tree-id7386 . -54) (undo-tree-id7387 . -58) (undo-tree-id7388 . -58) (undo-tree-id7389 . -58) (undo-tree-id7390 . -58) (undo-tree-id7391 . -58) (undo-tree-id7392 . -58) (undo-tree-id7393 . -58) (undo-tree-id7394 . -58) (undo-tree-id7395 . -58) (undo-tree-id7396 . -58) (undo-tree-id7397 . -58) (undo-tree-id7398 . -58) (undo-tree-id7399 . -58) (undo-tree-id7400 . -58) (undo-tree-id7401 . -58) (undo-tree-id7402 . -58) (undo-tree-id7403 . -58) (undo-tree-id7404 . -58) (undo-tree-id7405 . -58) (undo-tree-id7406 . -58) (undo-tree-id7407 . -58) (undo-tree-id7408 . -58) (undo-tree-id7409 . -58) (undo-tree-id7410 . -58) (undo-tree-id7411 . -58) (undo-tree-id7412 . -58) (undo-tree-id7413 . -58) (undo-tree-id7414 . -58) (undo-tree-id7415 . -58) (undo-tree-id7416 . -58) (undo-tree-id7417 . -58) (undo-tree-id7418 . -58) (undo-tree-id7419 . -58) (undo-tree-id7420 . -58) (undo-tree-id7421 . -58) (undo-tree-id7422 . -58) (undo-tree-id7423 . -58) (undo-tree-id7424 . -58) (undo-tree-id7425 . -58) (undo-tree-id7426 . -58) (undo-tree-id7427 . -58) (undo-tree-id7428 . -58) (undo-tree-id7429 . -58) (undo-tree-id7430 . -58) (undo-tree-id7431 . -58) (undo-tree-id7432 . -58) (undo-tree-id7433 . -58) (undo-tree-id7434 . -58) (undo-tree-id7435 . -58) (undo-tree-id7436 . -58) (undo-tree-id7437 . -58) (undo-tree-id7438 . -58) (undo-tree-id7439 . -58) (undo-tree-id7440 . -58) (undo-tree-id7441 . -58) (undo-tree-id7442 . -58) (undo-tree-id7443 . -58) (undo-tree-id7444 . -58) (undo-tree-id7445 . -58) (undo-tree-id7446 . -58) (undo-tree-id7447 . -58) (undo-tree-id7448 . -58) (undo-tree-id7449 . -58) (undo-tree-id7450 . -58) (undo-tree-id7451 . -58) (undo-tree-id7452 . -58) (undo-tree-id7453 . -58) (undo-tree-id7454 . -58) (undo-tree-id7455 . -58) (undo-tree-id7456 . -58) (undo-tree-id7457 . -58) (undo-tree-id7458 . -58) (undo-tree-id7459 . -58) (undo-tree-id7460 . -58) (undo-tree-id7461 . -57) (undo-tree-id7462 . -57) (undo-tree-id7463 . -57) (undo-tree-id7464 . -57) (undo-tree-id7465 . -57) (undo-tree-id7466 . -57) (undo-tree-id7467 . -57) (undo-tree-id7468 . -57) (undo-tree-id7469 . -57) (undo-tree-id7470 . -54) (undo-tree-id7471 . -57) (undo-tree-id7472 . -57) (undo-tree-id7473 . -57) (undo-tree-id7474 . -57) (undo-tree-id7475 . -57) (undo-tree-id7476 . -57) (undo-tree-id7477 . -57) (undo-tree-id7478 . -57) (undo-tree-id7479 . -57) (undo-tree-id7480 . -57) (undo-tree-id7481 . -57) (undo-tree-id7482 . -57) (undo-tree-id7483 . -57) (undo-tree-id7484 . -57) (undo-tree-id7485 . -57) (undo-tree-id7486 . -57) (undo-tree-id7487 . -57) (undo-tree-id7488 . -57) (undo-tree-id7489 . -57) (undo-tree-id7490 . -57) (undo-tree-id7491 . -57) (undo-tree-id7492 . -57) (undo-tree-id7493 . -57) (undo-tree-id7494 . -57) (undo-tree-id7495 . -57) (undo-tree-id7496 . -57) (undo-tree-id7497 . -57) (undo-tree-id7498 . -57) (undo-tree-id7499 . -57) (undo-tree-id7500 . -57) (undo-tree-id7501 . -57) (undo-tree-id7502 . -57) (undo-tree-id7503 . -57) (undo-tree-id7504 . -57) (undo-tree-id7505 . -57) (undo-tree-id7506 . -57) (undo-tree-id7507 . -57) (undo-tree-id7508 . -57) (undo-tree-id7509 . -57) (undo-tree-id7510 . -57) (undo-tree-id7511 . -57) (undo-tree-id7512 . -57) (undo-tree-id7513 . -57) (undo-tree-id7514 . -57) (undo-tree-id7515 . -57) (undo-tree-id7516 . -57) (undo-tree-id7517 . -57) (undo-tree-id7518 . -57) (undo-tree-id7519 . -57) (undo-tree-id7520 . -57) (undo-tree-id7521 . -57) (undo-tree-id7522 . -57) (undo-tree-id7523 . -57) (undo-tree-id7524 . -57) (undo-tree-id7525 . -57) (undo-tree-id7526 . -57) (undo-tree-id7527 . -57) (undo-tree-id7528 . -57) (undo-tree-id7529 . -57) (undo-tree-id7530 . -57) (undo-tree-id7531 . -57) (undo-tree-id7532 . -57) (undo-tree-id7533 . -57) (undo-tree-id7534 . -57) (undo-tree-id7535 . -57) (undo-tree-id7536 . -57) (undo-tree-id7537 . -57) (undo-tree-id7538 . -57) (undo-tree-id7539 . -57) (undo-tree-id7540 . -57) (undo-tree-id7541 . -57) (undo-tree-id7542 . -57) (undo-tree-id7543 . -57) (undo-tree-id7544 . -57) (undo-tree-id7545 . -57) (undo-tree-id7546 . -57) (undo-tree-id7547 . -57) (undo-tree-id7548 . -57) (undo-tree-id7549 . -57) (undo-tree-id7550 . -57) (undo-tree-id7551 . -57) (undo-tree-id7552 . -57) (undo-tree-id7553 . -57) (undo-tree-id7554 . -57) (undo-tree-id7555 . -57) (undo-tree-id7556 . -57) (undo-tree-id7557 . -57) (undo-tree-id7558 . -57) (undo-tree-id7559 . -57) (undo-tree-id7560 . -57) (undo-tree-id7561 . -57) (undo-tree-id7562 . -57) (undo-tree-id7563 . -57)) nil (25661 29314 360657 191000) 0 nil])
([nil nil ((344 . 348) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -344) (undo-tree-id8073 . -1) 345 (344 . 345) (337 . 344) (333 . 337) (#("    " 0 4 (fontified nil)) . 332) (undo-tree-id8074 . -4) (331 . 337) (t 25661 29314 379227 51000)) nil (25661 29408 772164 645000) 0 nil])
([nil nil ((201 . 202)) nil (25661 29408 772162 37000) 0 nil])
([nil nil ((202 . 203)) nil (25661 29408 772161 481000) 0 nil])
([nil nil ((201 . 204)) nil (25661 29408 772160 792000) 0 nil])
([nil nil ((156 . 161)) nil (25661 29408 772160 72000) 0 nil])
([nil nil ((396 . 400) (392 . 396) (#("t" 0 1 (fontified t face font-lock-string-face)) . -392) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -393) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -394) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (#(" " 0 1 (fontified nil face font-lock-string-face)) . -395) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -396) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -397) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -398) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -399) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -400) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -401) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) 402 (386 . 402) (#("p" 0 1 (fontified t face font-lock-string-face)) . -386) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -387) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -388) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -389) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -390) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -391) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -392) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -393) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (#("n" 0 1 (fontified nil face font-lock-string-face)) . -394) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -395) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -396) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -397) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -398) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -399) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) 400 (386 . 400) (#("c" 0 1 (fontified t face font-lock-string-face)) . -386) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) 387 (#("o" 0 1 (fontified t face font-lock-string-face)) . -387) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -388) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) 389 (386 . 389) (385 . 387) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -385) (undo-tree-id8058 . -1) (#("msg" 0 3 (fontified nil)) . 386) (undo-tree-id8059 . -3) (385 . 386) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 385 401 nil nil nil t #s(yas--exit 402 nil))) #s(yas--exit 402 nil) 165 nil #s(yas--field 1 385 401 nil nil nil t #s(yas--exit 402 nil)) nil nil)) (378 . 389) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 378) (378 . 396) (#("ex" 0 2 (fontified nil)) . 378) (378 . 380) (#("expect(…)" 0 9 (fontified nil)) . -378) (378 . 387) (#("ex" 0 2 (fontified t)) . -378) (undo-tree-id8060 . -2) (undo-tree-id8061 . -2) 380 (378 . 380) (#("p" 0 1 (fontified t)) . -378) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (#("r" 0 1 (fontified t)) . -379) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) 380 (378 . 380) (377 . 378) (apply yas--snippet-revive 370 377 #s(yas--snippet nil nil #s(yas--exit 377 nil) 164 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 377 nil) 164 nil nil nil nil)) (370 . 377) (#("parse()$0" 0 9 (fontified nil)) . 370) (370 . 379) (#("pa" 0 2 (fontified nil)) . 370) (370 . 372) (#("parse()" 0 7 (fontified nil)) . -370) (370 . 377) (#("pa" 0 2 (fontified t)) . -370) (undo-tree-id8066 . -2) (undo-tree-id8067 . -2) 372 (371 . 372) (370 . 371) (369 . 370) (364 . 369) (#("i" 0 1 (fontified nil)) . 364) (364 . 365) (#("input" 0 5 (fontified nil)) . -364) (364 . 369) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -364) (undo-tree-id8068 . -2) (undo-tree-id8069 . -2) 366 (364 . 366) (363 . 364) (361 . 363) (359 . 361) (#("u" 0 1 (fontified nil)) . 359) (359 . 360) (#("u8" 0 2 (fontified nil)) . -359) (359 . 361) (#("u" 0 1 (fontified t)) . -359) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) 360 (357 . 360) (#(" " 0 1 (fontified t)) . -357) (undo-tree-id8072 . -1) 358) nil (25661 29408 772150 111000) 0 nil])
([nil nil ((apply yas--snippet-revive 427 434 #s(yas--snippet nil nil #s(yas--exit 434 nil) 166 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 434 nil) 166 nil nil nil nil)) (427 . 434) (#("train()$0" 0 9 (fontified nil)) . 427) (427 . 436) (#("tr" 0 2 (fontified nil)) . 427) (427 . 429) (#("train()" 0 7 (fontified nil)) . -427) (427 . 434) (#("tr" 0 2 (fontified t)) . -427) (undo-tree-id7916 . -2) (undo-tree-id7917 . -2) (undo-tree-id7918 . -2) (undo-tree-id7919 . -2) (undo-tree-id7920 . -2) (undo-tree-id7921 . -2) (undo-tree-id7922 . -2) (undo-tree-id7923 . -2) (undo-tree-id7924 . -2) (undo-tree-id7925 . -2) (undo-tree-id7926 . -2) (undo-tree-id7927 . -2) (undo-tree-id7928 . -2) (undo-tree-id7929 . -2) (undo-tree-id7930 . -2) (undo-tree-id7931 . -2) (undo-tree-id7932 . -2) (undo-tree-id7933 . -2) (undo-tree-id7934 . -2) (undo-tree-id7935 . -2) (undo-tree-id7936 . -2) (undo-tree-id7937 . -2) (undo-tree-id7938 . -2) (undo-tree-id7939 . -2) (undo-tree-id7940 . -2) (undo-tree-id7941 . -2) (undo-tree-id7942 . -2) (undo-tree-id7943 . -2) (undo-tree-id7944 . -2) (undo-tree-id7945 . -2) (undo-tree-id7946 . -2) (undo-tree-id7947 . -2) (undo-tree-id7948 . -2) (undo-tree-id7949 . -2) (undo-tree-id7950 . -2) (undo-tree-id7951 . -2) (undo-tree-id7952 . -2) (undo-tree-id7953 . -2) (undo-tree-id7954 . -2) (undo-tree-id7955 . -2) (undo-tree-id7956 . -2) (undo-tree-id7957 . -2) (undo-tree-id7958 . -2) (undo-tree-id7959 . -2) (undo-tree-id7960 . -2) (undo-tree-id7961 . -2) (undo-tree-id7962 . -2) (undo-tree-id7963 . -2) (undo-tree-id7964 . -2) (undo-tree-id7965 . -2) (undo-tree-id7966 . -2) (undo-tree-id7967 . -2) (undo-tree-id7968 . -2) (undo-tree-id7969 . -2) (undo-tree-id7970 . -2) (undo-tree-id7971 . -2) (undo-tree-id7972 . -2) (undo-tree-id7973 . -2) (undo-tree-id7974 . -2) (undo-tree-id7975 . -2) (undo-tree-id7976 . -2) (undo-tree-id7977 . -2) (undo-tree-id7978 . -2) (undo-tree-id7979 . -2) (undo-tree-id7980 . -2) (undo-tree-id7981 . -2) (undo-tree-id7982 . -2) (undo-tree-id7983 . -2) (undo-tree-id7984 . -2) (undo-tree-id7985 . -2) (undo-tree-id7986 . -2) (undo-tree-id7987 . -2) (undo-tree-id7988 . -2) (undo-tree-id7989 . -2) (undo-tree-id7990 . -2) (undo-tree-id7991 . -2) (undo-tree-id7992 . -2) (undo-tree-id7993 . -2) (undo-tree-id7994 . -2) (undo-tree-id7995 . -2) (undo-tree-id7996 . -2) (undo-tree-id7997 . -2) 429 (428 . 429) (427 . 428) (426 . 427) (427 . 431) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 426) (426 . 427) (425 . 427) (422 . 426) (418 . 422) (412 . 418) (#("cho" 0 3 (fontified nil)) . 412) (412 . 415) (#("choice" 0 6 (fontified nil)) . -412) (412 . 418) (#("cho" 0 3 (fontified t)) . -412) (undo-tree-id7998 . -3) (undo-tree-id7999 . -3) 415 (414 . 415) (411 . 414) (#(" " 0 1 (fontified t)) . -411) (undo-tree-id8000 . -1) 412 (409 . 412) (405 . 409) (#("    " 0 4 (fontified nil)) . 404) (undo-tree-id8001 . -4) (403 . 409) (#("a" 0 1 (fontified t)) . -403) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) 404 (402 . 404) (apply yas--snippet-revive 378 402 #s(yas--snippet nil (#s(yas--field 1 385 401 nil nil nil t #s(yas--exit 402 nil))) #s(yas--exit 402 nil) 165 nil #s(yas--field 1 385 401 nil nil nil t #s(yas--exit 402 nil)) nil nil))) nil (25661 29408 772098 908000) 0 nil])
([nil nil ((apply yas--snippet-revive 449 460 #s(yas--snippet nil nil #s(yas--exit 460 nil) 167 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 460 nil) 167 nil nil nil nil)) (449 . 460) (#("predictor()$0" 0 13 (fontified nil)) . 449) (449 . 462) (#("pr" 0 2 (fontified nil)) . 449) (449 . 451) (#("predictor()" 0 11 (fontified nil)) . -449) (449 . 460) (#("pr" 0 2 (fontified t)) . -449) (undo-tree-id7831 . -2) (undo-tree-id7832 . -2) (undo-tree-id7833 . -2) (undo-tree-id7834 . -2) (undo-tree-id7835 . -2) (undo-tree-id7836 . -2) (undo-tree-id7837 . -2) (undo-tree-id7838 . -2) (undo-tree-id7839 . -2) (undo-tree-id7840 . -2) (undo-tree-id7841 . -2) (undo-tree-id7842 . -2) (undo-tree-id7843 . -2) (undo-tree-id7844 . -2) (undo-tree-id7845 . -2) (undo-tree-id7846 . -2) (undo-tree-id7847 . -2) (undo-tree-id7848 . -2) (undo-tree-id7849 . -2) (undo-tree-id7850 . -2) (undo-tree-id7851 . -2) (undo-tree-id7852 . -2) (undo-tree-id7853 . -2) (undo-tree-id7854 . -2) (undo-tree-id7855 . -2) (undo-tree-id7856 . -2) (undo-tree-id7857 . -2) (undo-tree-id7858 . -2) (undo-tree-id7859 . -2) (undo-tree-id7860 . -2) (undo-tree-id7861 . -2) (undo-tree-id7862 . -2) (undo-tree-id7863 . -2) (undo-tree-id7864 . -2) (undo-tree-id7865 . -2) (undo-tree-id7866 . -2) (undo-tree-id7867 . -2) (undo-tree-id7868 . -2) (undo-tree-id7869 . -2) (undo-tree-id7870 . -2) (undo-tree-id7871 . -2) (undo-tree-id7872 . -2) (undo-tree-id7873 . -2) (undo-tree-id7874 . -2) (undo-tree-id7875 . -2) (undo-tree-id7876 . -2) (undo-tree-id7877 . -2) (undo-tree-id7878 . -2) (undo-tree-id7879 . -2) (undo-tree-id7880 . -2) (undo-tree-id7881 . -2) (undo-tree-id7882 . -2) (undo-tree-id7883 . -2) (undo-tree-id7884 . -2) (undo-tree-id7885 . -2) (undo-tree-id7886 . -2) (undo-tree-id7887 . -2) (undo-tree-id7888 . -2) (undo-tree-id7889 . -2) (undo-tree-id7890 . -2) (undo-tree-id7891 . -2) (undo-tree-id7892 . -2) (undo-tree-id7893 . -2) (undo-tree-id7894 . -2) (undo-tree-id7895 . -2) (undo-tree-id7896 . -2) (undo-tree-id7897 . -2) (undo-tree-id7898 . -2) (undo-tree-id7899 . -2) (undo-tree-id7900 . -2) (undo-tree-id7901 . -2) (undo-tree-id7902 . -2) (undo-tree-id7903 . -2) (undo-tree-id7904 . -2) (undo-tree-id7905 . -2) (undo-tree-id7906 . -2) (undo-tree-id7907 . -2) (undo-tree-id7908 . -2) (undo-tree-id7909 . -2) (undo-tree-id7910 . -2) (undo-tree-id7911 . -2) (undo-tree-id7912 . -2) (undo-tree-id7913 . -2) (undo-tree-id7914 . -2) (undo-tree-id7915 . -2) 451 (449 . 451) (448 . 449) (449 . 453) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 448) (448 . 449) (447 . 449) (440 . 448)) nil (25661 29408 772009 603000) 0 nil])
([nil nil ((426 . 463) (#("	train()
    } else {
	" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t) 9 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 15 (fontified t) 15 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t) 22 23 (fontified t)) . 426) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -23) (undo-tree-id7749 . -23) (undo-tree-id7750 . -23) (undo-tree-id7751 . -23) (undo-tree-id7752 . -23) (undo-tree-id7753 . -23) (undo-tree-id7754 . -23) (undo-tree-id7755 . -23) (undo-tree-id7756 . -23) (undo-tree-id7757 . -23) (undo-tree-id7758 . -23) (undo-tree-id7759 . -23) (undo-tree-id7760 . -23) (undo-tree-id7761 . -23) (undo-tree-id7762 . -23) (undo-tree-id7763 . -23) (undo-tree-id7764 . -23) (undo-tree-id7765 . -23) (undo-tree-id7766 . -23) (undo-tree-id7767 . -23) (undo-tree-id7768 . -23) (undo-tree-id7769 . -23) (undo-tree-id7770 . -23) (undo-tree-id7771 . -23) (undo-tree-id7772 . -23) (undo-tree-id7773 . -23) (undo-tree-id7774 . -23) (undo-tree-id7775 . -23) (undo-tree-id7776 . -23) (undo-tree-id7777 . -23) (undo-tree-id7778 . -23) (undo-tree-id7779 . -23) (undo-tree-id7780 . -23) (undo-tree-id7781 . -23) (undo-tree-id7782 . -23) (undo-tree-id7783 . -23) (undo-tree-id7784 . -23) (undo-tree-id7785 . -23) (undo-tree-id7786 . -23) (undo-tree-id7787 . -23) (undo-tree-id7788 . -23) (undo-tree-id7789 . -23) (undo-tree-id7790 . -23) (undo-tree-id7791 . -23) (undo-tree-id7792 . -23) (undo-tree-id7793 . -23) (undo-tree-id7794 . -23) (undo-tree-id7795 . -23) (undo-tree-id7796 . -23) (undo-tree-id7797 . -23) (undo-tree-id7798 . -23) (undo-tree-id7799 . -23) (undo-tree-id7800 . -23) (undo-tree-id7801 . -23) (undo-tree-id7802 . -23) (undo-tree-id7803 . -23) (undo-tree-id7804 . -23) (undo-tree-id7805 . -23) (undo-tree-id7806 . -23) (undo-tree-id7807 . -23) (undo-tree-id7808 . -23) (undo-tree-id7809 . -23) (undo-tree-id7810 . -23) (undo-tree-id7811 . -23) (undo-tree-id7812 . -23) (undo-tree-id7813 . -23) (undo-tree-id7814 . -23) (undo-tree-id7815 . -23) (undo-tree-id7816 . -23) (undo-tree-id7817 . -23) (undo-tree-id7818 . -23) (undo-tree-id7819 . -23) (undo-tree-id7820 . -23) (undo-tree-id7821 . -23) (undo-tree-id7822 . -23) (undo-tree-id7823 . -23) (undo-tree-id7824 . -23) (undo-tree-id7825 . -23) (undo-tree-id7826 . -23) (undo-tree-id7827 . -23) (undo-tree-id7828 . -23) (undo-tree-id7829 . -23) (undo-tree-id7830 . -22)) nil (25661 29408 771946 836000) 0 nil])
([nil nil ((#("u8 " 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t)) . 359) (undo-tree-id8183 . -2) (undo-tree-id8184 . -3) (t 25661 29408 786877 933000)) nil (25661 29452 474883 198000) 0 nil])
([nil nil ((362 . 363) (359 . 362) (#("i" 0 1 (fontified nil)) . 359) (359 . 360) (#("i32" 0 3 (fontified nil)) . -359) (359 . 362) (#("i" 0 1 (fontified t)) . -359) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) 360 (359 . 360)) nil (25661 29452 474800 408000) 0 nil])
([nil nil ((371 . 372) (370 . 371) (t 25661 29452 490666 881000)) nil (25661 29509 719462 566000) 0 nil])
([nil nil ((apply yas--snippet-revive 371 377 #s(yas--snippet nil nil #s(yas--exit 377 nil) 168 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 377 nil) 168 nil nil nil nil)) (371 . 377) (#("trim()$0" 0 8 (fontified nil)) . 371) (371 . 379) (#("tri" 0 3 (fontified nil)) . 371) (371 . 374) (#("trim()" 0 6 (fontified nil)) . -371) (371 . 377) (#("tri" 0 3 (fontified t)) . -371) (undo-tree-id8186 . -3) (undo-tree-id8187 . -3) 374 (373 . 374) (371 . 373)) nil (25661 29509 719458 924000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 377) (undo-tree-id8185 . 1)) nil (25661 29509 719450 180000) 0 nil])
([nil nil ((apply yas--snippet-revive 3314 3320 #s(yas--snippet nil nil #s(yas--exit 3320 nil) 169 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3320 nil) 169 nil nil nil nil)) (3314 . 3320) (#("trim()$0" 0 8 (fontified nil)) . 3314) (3314 . 3322) (#("tr" 0 2 (fontified nil)) . 3314) (3314 . 3316) (#("trim()" 0 6 (fontified nil)) . -3314) (3314 . 3320) (#("tr" 0 2 (fontified t)) . -3314) (undo-tree-id8188 . -2) (undo-tree-id8189 . -2) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -2) (undo-tree-id8207 . -2) (undo-tree-id8208 . -2) (undo-tree-id8209 . -2) (undo-tree-id8210 . -2) (undo-tree-id8211 . -2) (undo-tree-id8212 . -2) (undo-tree-id8213 . -2) (undo-tree-id8214 . -2) (undo-tree-id8215 . -2) (undo-tree-id8216 . -2) (undo-tree-id8217 . -2) (undo-tree-id8218 . -2) (undo-tree-id8219 . -2) (undo-tree-id8220 . -2) (undo-tree-id8221 . -2) (undo-tree-id8222 . -2) (undo-tree-id8223 . -2) (undo-tree-id8224 . -2) (undo-tree-id8225 . -2) (undo-tree-id8226 . -2) (undo-tree-id8227 . -2) (undo-tree-id8228 . -2) (undo-tree-id8229 . -2) (undo-tree-id8230 . -2) (undo-tree-id8231 . -2) (undo-tree-id8232 . -2) (undo-tree-id8233 . -2) (undo-tree-id8234 . -2) (undo-tree-id8235 . -2) (undo-tree-id8236 . -2) (undo-tree-id8237 . -2) (undo-tree-id8238 . -2) (undo-tree-id8239 . -2) (undo-tree-id8240 . -2) (undo-tree-id8241 . -2) (undo-tree-id8242 . -2) (undo-tree-id8243 . -2) (undo-tree-id8244 . -2) (undo-tree-id8245 . -2) (undo-tree-id8246 . -2) (undo-tree-id8247 . -2) (undo-tree-id8248 . -2) (undo-tree-id8249 . -2) (undo-tree-id8250 . -2) (undo-tree-id8251 . -2) 3316 (3313 . 3316) (t 25661 29509 734596 955000)) nil (25661 29524 701649 366000) 0 nil])
([nil nil ((3112 . 3114) (t 25661 29524 718086 490000)) nil (25661 29554 851924 944000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 3963) (t 25661 29554 868400 792000)) nil (25661 29615 265527 12000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 3963)) nil (25661 29615 265525 809000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3963)) nil (25661 29615 265523 841000) 0 nil])
([nil nil ((3973 . 3977)) nil (25661 29615 265518 128000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3973)) nil (25661 29632 309826 154000) 0 nil])
([nil nil ((4149 . 4151) (t 25661 29617 475720 120000)) nil (25661 29632 309825 16000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 4150) (undo-tree-id8252 . 1) (undo-tree-id8253 . -2) (undo-tree-id8254 . -2) (undo-tree-id8255 . -2) (undo-tree-id8256 . -2) (undo-tree-id8257 . -2) (undo-tree-id8258 . 2) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1)) nil (25661 29632 309816 292000) 0 nil])
([nil nil ((4150 . 4157) (t 25661 29632 325874 932000)) nil (25661 29638 796600 677000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 4156) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (4157 . 4158)) nil (25661 29638 796594 267000) 0 nil])
([nil nil ((3176 . 3177) (#("	" 0 1 (fontified nil)) . 3175) (undo-tree-id8484 . -1) (3175 . 3177) (#("	" 0 1 (fontified nil)) . 3174) (3174 . 3175) (3174 . 3175) (t 25661 29638 812609 222000)) nil (25661 29772 978213 680000) 0 nil])
([nil nil ((3198 . 3199) (apply yas--snippet-revive 3193 3198 #s(yas--snippet nil nil #s(yas--exit 3198 nil) 170 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3198 nil) 170 nil nil nil nil)) (3193 . 3198) (#("new()$0" 0 7 (fontified nil)) . 3193) (3193 . 3200) (#("ne" 0 2 (fontified nil)) . 3193) (3193 . 3195) (#("new()" 0 5 (fontified nil)) . -3193) (3193 . 3198) (#("ne" 0 2 (fontified t)) . -3193) (undo-tree-id8474 . -2) (undo-tree-id8475 . -2) 3195 (3191 . 3195) (3185 . 3191) (#("St" 0 2 (fontified nil)) . 3185) (3185 . 3187) (#("String" 0 6 (fontified nil)) . -3185) (3185 . 3191) (#("St" 0 2 (fontified t face font-lock-type-face)) . -3185) (undo-tree-id8476 . -2) (undo-tree-id8477 . -2) 3187 (3184 . 3187) (#("=" 0 1 (fontified t)) . -3184) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (#(" " 0 1 (fontified t)) . -3185) (undo-tree-id8480 . -1) 3186 (3182 . 3186) (3177 . 3182) (#("in" 0 2 (fontified nil)) . 3177) (3177 . 3179) (#("input" 0 5 (fontified nil)) . -3177) (3177 . 3182) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -3177) (undo-tree-id8481 . -2) (undo-tree-id8482 . -2) 3179 (3177 . 3179) (3176 . 3177) (#("	" 0 1 (fontified nil)) . 3175) (undo-tree-id8483 . -1) (3176 . 3177) (3175 . 3176)) nil (25661 29772 978207 33000) 0 nil])
([nil nil ((3175 . 3206) (#("
	input = String::new();
	" 0 1 (fontified t) 1 2 (fontified t) 2 10 (fontified t) 10 16 (fontified t face font-lock-type-face) 16 18 (fontified t) 18 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 3175) (undo-tree-id8467 . 2) (undo-tree-id8468 . -1) (undo-tree-id8469 . -23) (undo-tree-id8470 . -23) (undo-tree-id8471 . -23) (undo-tree-id8472 . -23) (undo-tree-id8473 . -23)) nil (25661 29772 978189 573000) 0 nil])
([nil nil ((#("        input = String::new();
" 0 16 (fontified t) 16 22 (fontified t face font-lock-type-face) 22 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 31 (fontified t)) . 3175) (undo-tree-id8528 . -30) (undo-tree-id8529 . -27) (undo-tree-id8530 . -31) (undo-tree-id8531 . -31) (undo-tree-id8532 . -31) (undo-tree-id8533 . -31) (undo-tree-id8534 . -31) (undo-tree-id8535 . -31) (undo-tree-id8536 . -31) (undo-tree-id8537 . -31) (undo-tree-id8538 . -31) (undo-tree-id8539 . -31) (undo-tree-id8540 . -31) (undo-tree-id8541 . -31) (undo-tree-id8542 . -31) (undo-tree-id8543 . -31) (undo-tree-id8544 . -31) (undo-tree-id8545 . -31) (undo-tree-id8546 . -31) (undo-tree-id8547 . -31) (undo-tree-id8548 . -31) (undo-tree-id8549 . -31) (undo-tree-id8550 . -31) (undo-tree-id8551 . -31) (undo-tree-id8552 . -31) (undo-tree-id8553 . -31) (undo-tree-id8554 . -31) (undo-tree-id8555 . -31) (undo-tree-id8556 . -31) (undo-tree-id8557 . -31) (undo-tree-id8558 . -31) (undo-tree-id8559 . -31) (undo-tree-id8560 . -31) (undo-tree-id8561 . -31) (undo-tree-id8562 . -31) (undo-tree-id8563 . -31) (undo-tree-id8564 . -31) (undo-tree-id8565 . -31) (t 25661 29772 994008 70000)) nil (25661 29785 97445 336000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3175) (undo-tree-id8485 . 1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1)) nil (25661 29785 97416 927000) 0 nil])
([nil nil ((apply yas--snippet-revive 494 502 #s(yas--snippet nil nil #s(yas--exit 501 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 501 nil) 0 nil nil nil nil)) (494 . 502) (#("print!($0)" 0 10 (fontified nil)) . 494) (494 . 504) (#("pr" 0 2 (fontified nil)) . 494) (494 . 496) (#("print!(…)" 0 9 (fontified nil)) . -494) (494 . 503) (#("pr" 0 2 (fontified t)) . -494) (undo-tree-id345 . -2) (undo-tree-id346 . -2) 496 (494 . 496) (490 . 494) (#("    " 0 4 (fontified nil)) . 489) (undo-tree-id347 . -4) (488 . 494) (t 25661 29785 114134 420000)) nil (25690 24347 536365 693000) 0 nil])
([nil nil ((#("    print!()
" 0 4 (fontified t) 4 10 (fontified t face rust-builtin-formatting-macro) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t)) . 490) (undo-tree-id220 . -4) (undo-tree-id221 . -10) (undo-tree-id222 . -11) (undo-tree-id223 . -11) (undo-tree-id224 . -11) (undo-tree-id225 . -11) (undo-tree-id226 . -11) (undo-tree-id227 . -11) (undo-tree-id228 . -11) (undo-tree-id229 . -11) (undo-tree-id230 . -11) (undo-tree-id231 . -11) (undo-tree-id232 . -11) (undo-tree-id233 . -11) (undo-tree-id234 . -11) (undo-tree-id235 . -11) (undo-tree-id236 . -11) (undo-tree-id237 . -11) (undo-tree-id238 . -11) (undo-tree-id239 . -11) (undo-tree-id240 . -11) (undo-tree-id241 . -11) (undo-tree-id242 . -11) (undo-tree-id243 . -11) (undo-tree-id244 . -11) (undo-tree-id245 . -11) (undo-tree-id246 . -11) (undo-tree-id247 . -11) (undo-tree-id248 . -11) (undo-tree-id249 . -11) (undo-tree-id250 . -11) (undo-tree-id251 . -11) (undo-tree-id252 . -11) (undo-tree-id253 . -11) (undo-tree-id254 . -11) (undo-tree-id255 . -11) (undo-tree-id256 . -11) (undo-tree-id257 . -11) (undo-tree-id258 . -11) (undo-tree-id259 . -11) (undo-tree-id260 . -11) (undo-tree-id261 . -11) (undo-tree-id262 . -11) (undo-tree-id263 . -11) (undo-tree-id264 . -11) (undo-tree-id265 . -11) (undo-tree-id266 . -11) (undo-tree-id267 . -11) (undo-tree-id268 . -11) (undo-tree-id269 . -11) (undo-tree-id270 . -11) (undo-tree-id271 . -11) (undo-tree-id272 . -11) (undo-tree-id273 . 2) (undo-tree-id274 . -10) (undo-tree-id275 . -10) (undo-tree-id276 . -10) (undo-tree-id277 . -10) (undo-tree-id278 . -10) (undo-tree-id279 . -10) (undo-tree-id280 . -10) (undo-tree-id281 . -10) (undo-tree-id282 . -10) (undo-tree-id283 . -10) (undo-tree-id284 . -10) (undo-tree-id285 . -10) (undo-tree-id286 . -10) (undo-tree-id287 . -10) (undo-tree-id288 . -10) (undo-tree-id289 . -10) (undo-tree-id290 . -10) (undo-tree-id291 . -10) (undo-tree-id292 . -10) (undo-tree-id293 . -10) (undo-tree-id294 . -10) (undo-tree-id295 . -10) (undo-tree-id296 . -10) (undo-tree-id297 . -10) (undo-tree-id298 . -10) (undo-tree-id299 . 3) (undo-tree-id300 . -11) (undo-tree-id301 . 2) (undo-tree-id302 . -12) (undo-tree-id303 . -10) (undo-tree-id304 . -10) (undo-tree-id305 . -10) (undo-tree-id306 . -10) (undo-tree-id307 . -10) (undo-tree-id308 . -10) (undo-tree-id309 . -10) (undo-tree-id310 . -10) (undo-tree-id311 . -10) (undo-tree-id312 . -10) (undo-tree-id313 . -10) (undo-tree-id314 . -10) (undo-tree-id315 . -10) (undo-tree-id316 . -10) (undo-tree-id317 . -10) (undo-tree-id318 . -10) (undo-tree-id319 . -10) (undo-tree-id320 . -10) (undo-tree-id321 . -10) (undo-tree-id322 . -10) (undo-tree-id323 . -10) (undo-tree-id324 . -10) (undo-tree-id325 . -10) (undo-tree-id326 . -10) (undo-tree-id327 . -10) (undo-tree-id328 . -10) (undo-tree-id329 . -10) (undo-tree-id330 . -10) (undo-tree-id331 . -10) (undo-tree-id332 . -10) (undo-tree-id333 . -10) (undo-tree-id334 . -10) (undo-tree-id335 . -10) (undo-tree-id336 . -10) (undo-tree-id337 . -10) (undo-tree-id338 . -10) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (undo-tree-id341 . -10) (undo-tree-id342 . -10) (undo-tree-id343 . -13) (undo-tree-id344 . -12) 500) nil (25690 24347 536356 783000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -489) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1)) nil (25690 24347 536281 255000) 0 nil])
nil
